// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PracticeImport represents a row from 'AllergyNew.practice_imports'.
type PracticeImport struct {
	ID             uint           `json:"id"`              // id
	ExportID       sql.NullInt64  `json:"export_id"`       // export_id
	UserID         sql.NullInt64  `json:"user_id"`         // user_id
	PracticeID     sql.NullInt64  `json:"practice_id"`     // practice_id
	ActiveTable    sql.NullString `json:"active_table"`    // active_table
	TablesImported sql.NullInt64  `json:"tables_imported"` // tables_imported
	TotalTables    sql.NullInt64  `json:"total_tables"`    // total_tables
	TableRecords   sql.NullInt64  `json:"table_records"`   // table_records
	TotalRecords   sql.NullInt64  `json:"total_records"`   // total_records
	Filename       sql.NullString `json:"filename"`        // filename
	Started        mysql.NullTime `json:"started"`         // started
	Completed      mysql.NullTime `json:"completed"`       // completed
	Status         Status         `json:"status"`          // status
	Notes          sql.NullString `json:"notes"`           // notes
	UpdatedBy      sql.NullInt64  `json:"updated_By"`      // updated_By
	Updated        time.Time      `json:"updated"`         // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PracticeImport exists in the database.
func (pi *PracticeImport) Exists() bool {
	return pi._exists
}

// Deleted provides information if the PracticeImport has been deleted from the database.
func (pi *PracticeImport) Deleted() bool {
	return pi._deleted
}

// Insert inserts the PracticeImport to the database.
func (pi *PracticeImport) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practice_imports (` +
		`export_id, user_id, practice_id, active_table, tables_imported, total_tables, table_records, total_records, filename, started, completed, status, notes, updated_By, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pi.ExportID, pi.UserID, pi.PracticeID, pi.ActiveTable, pi.TablesImported, pi.TotalTables, pi.TableRecords, pi.TotalRecords, pi.Filename, pi.Started, pi.Completed, pi.Status, pi.Notes, pi.UpdatedBy, pi.Updated)
	res, err := db.Exec(sqlstr, pi.ExportID, pi.UserID, pi.PracticeID, pi.ActiveTable, pi.TablesImported, pi.TotalTables, pi.TableRecords, pi.TotalRecords, pi.Filename, pi.Started, pi.Completed, pi.Status, pi.Notes, pi.UpdatedBy, pi.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pi.ID = uint(id)
	pi._exists = true

	return nil
}

// Update updates the PracticeImport in the database.
func (pi *PracticeImport) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practice_imports SET ` +
		`export_id = ?, user_id = ?, practice_id = ?, active_table = ?, tables_imported = ?, total_tables = ?, table_records = ?, total_records = ?, filename = ?, started = ?, completed = ?, status = ?, notes = ?, updated_By = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pi.ExportID, pi.UserID, pi.PracticeID, pi.ActiveTable, pi.TablesImported, pi.TotalTables, pi.TableRecords, pi.TotalRecords, pi.Filename, pi.Started, pi.Completed, pi.Status, pi.Notes, pi.UpdatedBy, pi.Updated, pi.ID)
	_, err = db.Exec(sqlstr, pi.ExportID, pi.UserID, pi.PracticeID, pi.ActiveTable, pi.TablesImported, pi.TotalTables, pi.TableRecords, pi.TotalRecords, pi.Filename, pi.Started, pi.Completed, pi.Status, pi.Notes, pi.UpdatedBy, pi.Updated, pi.ID)
	return err
}

// Save saves the PracticeImport to the database.
func (pi *PracticeImport) Save(db XODB) error {
	if pi.Exists() {
		return pi.Update(db)
	}

	return pi.Insert(db)
}

// Delete deletes the PracticeImport from the database.
func (pi *PracticeImport) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pi._exists {
		return nil
	}

	// if deleted, bail
	if pi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practice_imports WHERE id = ?`

	// run query
	XOLog(sqlstr, pi.ID)
	_, err = db.Exec(sqlstr, pi.ID)
	if err != nil {
		return err
	}

	// set deleted
	pi._deleted = true

	return nil
}

// PracticeImportByID retrieves a row from 'AllergyNew.practice_imports' as a PracticeImport.
//
// Generated from index 'practice_imports_id_pkey'.
func PracticeImportByID(db XODB, id uint) (*PracticeImport, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, export_id, user_id, practice_id, active_table, tables_imported, total_tables, table_records, total_records, filename, started, completed, status, notes, updated_By, updated ` +
		`FROM AllergyNew.practice_imports ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pi := PracticeImport{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pi.ID, &pi.ExportID, &pi.UserID, &pi.PracticeID, &pi.ActiveTable, &pi.TablesImported, &pi.TotalTables, &pi.TableRecords, &pi.TotalRecords, &pi.Filename, &pi.Started, &pi.Completed, &pi.Status, &pi.Notes, &pi.UpdatedBy, &pi.Updated)
	if err != nil {
		return nil, err
	}

	return &pi, nil
}
