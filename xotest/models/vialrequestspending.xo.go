// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialRequestsPending represents a row from 'AllergyNew.vial_requests_pending'.
type VialRequestsPending struct {
	ID                uint           `json:"id"`                 // id
	RequestID         uint           `json:"request_id"`         // request_id
	PatientID         uint           `json:"patient_id"`         // patient_id
	PracticeID        uint           `json:"practice_id"`        // practice_id
	LocationID        uint           `json:"location_id"`        // location_id
	FormulaID         uint           `json:"formula_id"`         // formula_id
	Verified          bool           `json:"verified"`           // verified
	RequestDate       time.Time      `json:"request_date"`       // request_date
	Priority          bool           `json:"priority"`           // priority
	HoldReason        sql.NullString `json:"hold_reason"`        // hold_reason
	PatientFirstname  sql.NullString `json:"patient_firstname"`  // patient_firstname
	PatientMiddlename sql.NullString `json:"patient_middlename"` // patient_middlename
	PatientLastname   sql.NullString `json:"patient_lastname"`   // patient_lastname
	IntakeMethod      string         `json:"intake_method"`      // intake_method
	ShotLocation      sql.NullString `json:"shot_location"`      // shot_location
	PracticeName      sql.NullString `json:"practice_name"`      // practice_name
	LocationName      sql.NullString `json:"location_name"`      // location_name
	UserFirstname     sql.NullString `json:"user_firstname"`     // user_firstname
	UserMiddlename    sql.NullString `json:"user_middlename"`    // user_middlename
	UserLastname      sql.NullString `json:"user_lastname"`      // user_lastname
	UpdatedBy         sql.NullInt64  `json:"updated_by"`         // updated_by
	Updated           time.Time      `json:"updated"`            // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialRequestsPending exists in the database.
func (vrp *VialRequestsPending) Exists() bool {
	return vrp._exists
}

// Deleted provides information if the VialRequestsPending has been deleted from the database.
func (vrp *VialRequestsPending) Deleted() bool {
	return vrp._deleted
}

// Insert inserts the VialRequestsPending to the database.
func (vrp *VialRequestsPending) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vrp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_requests_pending (` +
		`request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vrp.RequestID, vrp.PatientID, vrp.PracticeID, vrp.LocationID, vrp.FormulaID, vrp.Verified, vrp.RequestDate, vrp.Priority, vrp.HoldReason, vrp.PatientFirstname, vrp.PatientMiddlename, vrp.PatientLastname, vrp.IntakeMethod, vrp.ShotLocation, vrp.PracticeName, vrp.LocationName, vrp.UserFirstname, vrp.UserMiddlename, vrp.UserLastname, vrp.UpdatedBy, vrp.Updated)
	res, err := db.Exec(sqlstr, vrp.RequestID, vrp.PatientID, vrp.PracticeID, vrp.LocationID, vrp.FormulaID, vrp.Verified, vrp.RequestDate, vrp.Priority, vrp.HoldReason, vrp.PatientFirstname, vrp.PatientMiddlename, vrp.PatientLastname, vrp.IntakeMethod, vrp.ShotLocation, vrp.PracticeName, vrp.LocationName, vrp.UserFirstname, vrp.UserMiddlename, vrp.UserLastname, vrp.UpdatedBy, vrp.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vrp.ID = uint(id)
	vrp._exists = true

	return nil
}

// Update updates the VialRequestsPending in the database.
func (vrp *VialRequestsPending) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vrp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_requests_pending SET ` +
		`request_id = ?, patient_id = ?, practice_id = ?, location_id = ?, formula_id = ?, verified = ?, request_date = ?, priority = ?, hold_reason = ?, patient_firstname = ?, patient_middlename = ?, patient_lastname = ?, intake_method = ?, shot_location = ?, practice_name = ?, location_name = ?, user_firstname = ?, user_middlename = ?, user_lastname = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vrp.RequestID, vrp.PatientID, vrp.PracticeID, vrp.LocationID, vrp.FormulaID, vrp.Verified, vrp.RequestDate, vrp.Priority, vrp.HoldReason, vrp.PatientFirstname, vrp.PatientMiddlename, vrp.PatientLastname, vrp.IntakeMethod, vrp.ShotLocation, vrp.PracticeName, vrp.LocationName, vrp.UserFirstname, vrp.UserMiddlename, vrp.UserLastname, vrp.UpdatedBy, vrp.Updated, vrp.ID)
	_, err = db.Exec(sqlstr, vrp.RequestID, vrp.PatientID, vrp.PracticeID, vrp.LocationID, vrp.FormulaID, vrp.Verified, vrp.RequestDate, vrp.Priority, vrp.HoldReason, vrp.PatientFirstname, vrp.PatientMiddlename, vrp.PatientLastname, vrp.IntakeMethod, vrp.ShotLocation, vrp.PracticeName, vrp.LocationName, vrp.UserFirstname, vrp.UserMiddlename, vrp.UserLastname, vrp.UpdatedBy, vrp.Updated, vrp.ID)
	return err
}

// Save saves the VialRequestsPending to the database.
func (vrp *VialRequestsPending) Save(db XODB) error {
	if vrp.Exists() {
		return vrp.Update(db)
	}

	return vrp.Insert(db)
}

// Delete deletes the VialRequestsPending from the database.
func (vrp *VialRequestsPending) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrp._exists {
		return nil
	}

	// if deleted, bail
	if vrp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_requests_pending WHERE id = ?`

	// run query
	XOLog(sqlstr, vrp.ID)
	_, err = db.Exec(sqlstr, vrp.ID)
	if err != nil {
		return err
	}

	// set deleted
	vrp._deleted = true

	return nil
}

// VialRequestsPendingsByLocationID retrieves a row from 'AllergyNew.vial_requests_pending' as a VialRequestsPending.
//
// Generated from index 'Locations'.
func VialRequestsPendingsByLocationID(db XODB, locationID uint) ([]*VialRequestsPending, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_pending ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsPending{}
	for q.Next() {
		vrp := VialRequestsPending{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrp.ID, &vrp.RequestID, &vrp.PatientID, &vrp.PracticeID, &vrp.LocationID, &vrp.FormulaID, &vrp.Verified, &vrp.RequestDate, &vrp.Priority, &vrp.HoldReason, &vrp.PatientFirstname, &vrp.PatientMiddlename, &vrp.PatientLastname, &vrp.IntakeMethod, &vrp.ShotLocation, &vrp.PracticeName, &vrp.LocationName, &vrp.UserFirstname, &vrp.UserMiddlename, &vrp.UserLastname, &vrp.UpdatedBy, &vrp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrp)
	}

	return res, nil
}

// VialRequestsPendingsByPatientID retrieves a row from 'AllergyNew.vial_requests_pending' as a VialRequestsPending.
//
// Generated from index 'Patients'.
func VialRequestsPendingsByPatientID(db XODB, patientID uint) ([]*VialRequestsPending, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_pending ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsPending{}
	for q.Next() {
		vrp := VialRequestsPending{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrp.ID, &vrp.RequestID, &vrp.PatientID, &vrp.PracticeID, &vrp.LocationID, &vrp.FormulaID, &vrp.Verified, &vrp.RequestDate, &vrp.Priority, &vrp.HoldReason, &vrp.PatientFirstname, &vrp.PatientMiddlename, &vrp.PatientLastname, &vrp.IntakeMethod, &vrp.ShotLocation, &vrp.PracticeName, &vrp.LocationName, &vrp.UserFirstname, &vrp.UserMiddlename, &vrp.UserLastname, &vrp.UpdatedBy, &vrp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrp)
	}

	return res, nil
}

// VialRequestsPendingsByPracticeID retrieves a row from 'AllergyNew.vial_requests_pending' as a VialRequestsPending.
//
// Generated from index 'Practices'.
func VialRequestsPendingsByPracticeID(db XODB, practiceID uint) ([]*VialRequestsPending, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_pending ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsPending{}
	for q.Next() {
		vrp := VialRequestsPending{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrp.ID, &vrp.RequestID, &vrp.PatientID, &vrp.PracticeID, &vrp.LocationID, &vrp.FormulaID, &vrp.Verified, &vrp.RequestDate, &vrp.Priority, &vrp.HoldReason, &vrp.PatientFirstname, &vrp.PatientMiddlename, &vrp.PatientLastname, &vrp.IntakeMethod, &vrp.ShotLocation, &vrp.PracticeName, &vrp.LocationName, &vrp.UserFirstname, &vrp.UserMiddlename, &vrp.UserLastname, &vrp.UpdatedBy, &vrp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrp)
	}

	return res, nil
}

// VialRequestsPendingsByPriority retrieves a row from 'AllergyNew.vial_requests_pending' as a VialRequestsPending.
//
// Generated from index 'Priority'.
func VialRequestsPendingsByPriority(db XODB, priority bool) ([]*VialRequestsPending, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_pending ` +
		`WHERE priority = ?`

	// run query
	XOLog(sqlstr, priority)
	q, err := db.Query(sqlstr, priority)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsPending{}
	for q.Next() {
		vrp := VialRequestsPending{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrp.ID, &vrp.RequestID, &vrp.PatientID, &vrp.PracticeID, &vrp.LocationID, &vrp.FormulaID, &vrp.Verified, &vrp.RequestDate, &vrp.Priority, &vrp.HoldReason, &vrp.PatientFirstname, &vrp.PatientMiddlename, &vrp.PatientLastname, &vrp.IntakeMethod, &vrp.ShotLocation, &vrp.PracticeName, &vrp.LocationName, &vrp.UserFirstname, &vrp.UserMiddlename, &vrp.UserLastname, &vrp.UpdatedBy, &vrp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrp)
	}

	return res, nil
}

// VialRequestsPendingsByRequestID retrieves a row from 'AllergyNew.vial_requests_pending' as a VialRequestsPending.
//
// Generated from index 'Requests'.
func VialRequestsPendingsByRequestID(db XODB, requestID uint) ([]*VialRequestsPending, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_pending ` +
		`WHERE request_id = ?`

	// run query
	XOLog(sqlstr, requestID)
	q, err := db.Query(sqlstr, requestID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsPending{}
	for q.Next() {
		vrp := VialRequestsPending{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrp.ID, &vrp.RequestID, &vrp.PatientID, &vrp.PracticeID, &vrp.LocationID, &vrp.FormulaID, &vrp.Verified, &vrp.RequestDate, &vrp.Priority, &vrp.HoldReason, &vrp.PatientFirstname, &vrp.PatientMiddlename, &vrp.PatientLastname, &vrp.IntakeMethod, &vrp.ShotLocation, &vrp.PracticeName, &vrp.LocationName, &vrp.UserFirstname, &vrp.UserMiddlename, &vrp.UserLastname, &vrp.UpdatedBy, &vrp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrp)
	}

	return res, nil
}

// VialRequestsPendingByID retrieves a row from 'AllergyNew.vial_requests_pending' as a VialRequestsPending.
//
// Generated from index 'vial_requests_pending_id_pkey'.
func VialRequestsPendingByID(db XODB, id uint) (*VialRequestsPending, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_pending ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vrp := VialRequestsPending{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vrp.ID, &vrp.RequestID, &vrp.PatientID, &vrp.PracticeID, &vrp.LocationID, &vrp.FormulaID, &vrp.Verified, &vrp.RequestDate, &vrp.Priority, &vrp.HoldReason, &vrp.PatientFirstname, &vrp.PatientMiddlename, &vrp.PatientLastname, &vrp.IntakeMethod, &vrp.ShotLocation, &vrp.PracticeName, &vrp.LocationName, &vrp.UserFirstname, &vrp.UserMiddlename, &vrp.UserLastname, &vrp.UpdatedBy, &vrp.Updated)
	if err != nil {
		return nil, err
	}

	return &vrp, nil
}
