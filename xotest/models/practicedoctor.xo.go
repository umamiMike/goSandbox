// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PracticeDoctor represents a row from 'AllergyNew.practice_doctors'.
type PracticeDoctor struct {
	ID             uint           `json:"id"`               // id
	PracticeID     sql.NullInt64  `json:"practice_id"`      // practice_id
	Prefix         sql.NullString `json:"prefix"`           // prefix
	Firstname      sql.NullString `json:"firstname"`        // firstname
	Middlename     sql.NullString `json:"middlename"`       // middlename
	Lastname       sql.NullString `json:"lastname"`         // lastname
	Suffix         sql.NullString `json:"suffix"`           // suffix
	Title          sql.NullString `json:"title"`            // title
	Active         int8           `json:"active"`           // active
	EmrReferenceID sql.NullString `json:"emr_reference_id"` // emr_reference_id
	UpdatedBy      sql.NullInt64  `json:"updated_by"`       // updated_by
	Updated        time.Time      `json:"updated"`          // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PracticeDoctor exists in the database.
func (pd *PracticeDoctor) Exists() bool {
	return pd._exists
}

// Deleted provides information if the PracticeDoctor has been deleted from the database.
func (pd *PracticeDoctor) Deleted() bool {
	return pd._deleted
}

// Insert inserts the PracticeDoctor to the database.
func (pd *PracticeDoctor) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practice_doctors (` +
		`practice_id, prefix, firstname, middlename, lastname, suffix, title, active, emr_reference_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pd.PracticeID, pd.Prefix, pd.Firstname, pd.Middlename, pd.Lastname, pd.Suffix, pd.Title, pd.Active, pd.EmrReferenceID, pd.UpdatedBy, pd.Updated)
	res, err := db.Exec(sqlstr, pd.PracticeID, pd.Prefix, pd.Firstname, pd.Middlename, pd.Lastname, pd.Suffix, pd.Title, pd.Active, pd.EmrReferenceID, pd.UpdatedBy, pd.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pd.ID = uint(id)
	pd._exists = true

	return nil
}

// Update updates the PracticeDoctor in the database.
func (pd *PracticeDoctor) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practice_doctors SET ` +
		`practice_id = ?, prefix = ?, firstname = ?, middlename = ?, lastname = ?, suffix = ?, title = ?, active = ?, emr_reference_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pd.PracticeID, pd.Prefix, pd.Firstname, pd.Middlename, pd.Lastname, pd.Suffix, pd.Title, pd.Active, pd.EmrReferenceID, pd.UpdatedBy, pd.Updated, pd.ID)
	_, err = db.Exec(sqlstr, pd.PracticeID, pd.Prefix, pd.Firstname, pd.Middlename, pd.Lastname, pd.Suffix, pd.Title, pd.Active, pd.EmrReferenceID, pd.UpdatedBy, pd.Updated, pd.ID)
	return err
}

// Save saves the PracticeDoctor to the database.
func (pd *PracticeDoctor) Save(db XODB) error {
	if pd.Exists() {
		return pd.Update(db)
	}

	return pd.Insert(db)
}

// Delete deletes the PracticeDoctor from the database.
func (pd *PracticeDoctor) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pd._exists {
		return nil
	}

	// if deleted, bail
	if pd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practice_doctors WHERE id = ?`

	// run query
	XOLog(sqlstr, pd.ID)
	_, err = db.Exec(sqlstr, pd.ID)
	if err != nil {
		return err
	}

	// set deleted
	pd._deleted = true

	return nil
}

// Practice returns the Practice associated with the PracticeDoctor's PracticeID (practice_id).
//
// Generated from foreign key 'practice_doctors_practice'.
func (pd *PracticeDoctor) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(pd.PracticeID.Int64))
}

// User returns the User associated with the PracticeDoctor's UpdatedBy (updated_by).
//
// Generated from foreign key 'practice_doctors_updated'.
func (pd *PracticeDoctor) User(db XODB) (*User, error) {
	return UserByID(db, uint(pd.UpdatedBy.Int64))
}

// PracticeDoctorsByPracticeID retrieves a row from 'AllergyNew.practice_doctors' as a PracticeDoctor.
//
// Generated from index 'Practices'.
func PracticeDoctorsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*PracticeDoctor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, prefix, firstname, middlename, lastname, suffix, title, active, emr_reference_id, updated_by, updated ` +
		`FROM AllergyNew.practice_doctors ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticeDoctor{}
	for q.Next() {
		pd := PracticeDoctor{
			_exists: true,
		}

		// scan
		err = q.Scan(&pd.ID, &pd.PracticeID, &pd.Prefix, &pd.Firstname, &pd.Middlename, &pd.Lastname, &pd.Suffix, &pd.Title, &pd.Active, &pd.EmrReferenceID, &pd.UpdatedBy, &pd.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pd)
	}

	return res, nil
}

// PracticeDoctorByID retrieves a row from 'AllergyNew.practice_doctors' as a PracticeDoctor.
//
// Generated from index 'practice_doctors_id_pkey'.
func PracticeDoctorByID(db XODB, id uint) (*PracticeDoctor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, prefix, firstname, middlename, lastname, suffix, title, active, emr_reference_id, updated_by, updated ` +
		`FROM AllergyNew.practice_doctors ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pd := PracticeDoctor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pd.ID, &pd.PracticeID, &pd.Prefix, &pd.Firstname, &pd.Middlename, &pd.Lastname, &pd.Suffix, &pd.Title, &pd.Active, &pd.EmrReferenceID, &pd.UpdatedBy, &pd.Updated)
	if err != nil {
		return nil, err
	}

	return &pd, nil
}

// PracticeDoctorsByUpdatedBy retrieves a row from 'AllergyNew.practice_doctors' as a PracticeDoctor.
//
// Generated from index 'practice_doctors_updated'.
func PracticeDoctorsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PracticeDoctor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, prefix, firstname, middlename, lastname, suffix, title, active, emr_reference_id, updated_by, updated ` +
		`FROM AllergyNew.practice_doctors ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticeDoctor{}
	for q.Next() {
		pd := PracticeDoctor{
			_exists: true,
		}

		// scan
		err = q.Scan(&pd.ID, &pd.PracticeID, &pd.Prefix, &pd.Firstname, &pd.Middlename, &pd.Lastname, &pd.Suffix, &pd.Title, &pd.Active, &pd.EmrReferenceID, &pd.UpdatedBy, &pd.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pd)
	}

	return res, nil
}
