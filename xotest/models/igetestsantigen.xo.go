// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// IgeTestsAntigen represents a row from 'AllergyNew.ige_tests_antigens'.
type IgeTestsAntigen struct {
	ID             uint            `json:"id"`               // id
	TestID         sql.NullInt64   `json:"test_id"`          // test_id
	AntigenGroupID sql.NullInt64   `json:"antigen_group_id"` // antigen_group_id
	PatientID      sql.NullInt64   `json:"patient_id"`       // patient_id
	AntigenID      sql.NullInt64   `json:"antigen_id"`       // antigen_id
	Name           sql.NullString  `json:"name"`             // name
	Order          sql.NullInt64   `json:"order"`            // order
	IsBreak        sql.NullInt64   `json:"is_break"`         // is_break
	VialID         sql.NullInt64   `json:"vial_id"`          // vial_id
	Sensitivity    sql.NullFloat64 `json:"sensitivity"`      // sensitivity
	Class          sql.NullString  `json:"class"`            // class
	UpdatedBy      sql.NullInt64   `json:"updated_by"`       // updated_by
	Updated        time.Time       `json:"updated"`          // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IgeTestsAntigen exists in the database.
func (ita *IgeTestsAntigen) Exists() bool {
	return ita._exists
}

// Deleted provides information if the IgeTestsAntigen has been deleted from the database.
func (ita *IgeTestsAntigen) Deleted() bool {
	return ita._deleted
}

// Insert inserts the IgeTestsAntigen to the database.
func (ita *IgeTestsAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ita._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.ige_tests_antigens (` +
		`test_id, antigen_group_id, patient_id, antigen_id, name, order, is_break, vial_id, sensitivity, class, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ita.TestID, ita.AntigenGroupID, ita.PatientID, ita.AntigenID, ita.Name, ita.Order, ita.IsBreak, ita.VialID, ita.Sensitivity, ita.Class, ita.UpdatedBy, ita.Updated)
	res, err := db.Exec(sqlstr, ita.TestID, ita.AntigenGroupID, ita.PatientID, ita.AntigenID, ita.Name, ita.Order, ita.IsBreak, ita.VialID, ita.Sensitivity, ita.Class, ita.UpdatedBy, ita.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ita.ID = uint(id)
	ita._exists = true

	return nil
}

// Update updates the IgeTestsAntigen in the database.
func (ita *IgeTestsAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ita._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ita._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.ige_tests_antigens SET ` +
		`test_id = ?, antigen_group_id = ?, patient_id = ?, antigen_id = ?, name = ?, order = ?, is_break = ?, vial_id = ?, sensitivity = ?, class = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ita.TestID, ita.AntigenGroupID, ita.PatientID, ita.AntigenID, ita.Name, ita.Order, ita.IsBreak, ita.VialID, ita.Sensitivity, ita.Class, ita.UpdatedBy, ita.Updated, ita.ID)
	_, err = db.Exec(sqlstr, ita.TestID, ita.AntigenGroupID, ita.PatientID, ita.AntigenID, ita.Name, ita.Order, ita.IsBreak, ita.VialID, ita.Sensitivity, ita.Class, ita.UpdatedBy, ita.Updated, ita.ID)
	return err
}

// Save saves the IgeTestsAntigen to the database.
func (ita *IgeTestsAntigen) Save(db XODB) error {
	if ita.Exists() {
		return ita.Update(db)
	}

	return ita.Insert(db)
}

// Delete deletes the IgeTestsAntigen from the database.
func (ita *IgeTestsAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ita._exists {
		return nil
	}

	// if deleted, bail
	if ita._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.ige_tests_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, ita.ID)
	_, err = db.Exec(sqlstr, ita.ID)
	if err != nil {
		return err
	}

	// set deleted
	ita._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the IgeTestsAntigen's AntigenID (antigen_id).
//
// Generated from foreign key 'ige_tests_antigens_antigen'.
func (ita *IgeTestsAntigen) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(ita.AntigenID.Int64))
}

// Patient returns the Patient associated with the IgeTestsAntigen's PatientID (patient_id).
//
// Generated from foreign key 'ige_tests_antigens_patient'.
func (ita *IgeTestsAntigen) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(ita.PatientID.Int64))
}

// IgeTest returns the IgeTest associated with the IgeTestsAntigen's TestID (test_id).
//
// Generated from foreign key 'ige_tests_antigens_test'.
func (ita *IgeTestsAntigen) IgeTest(db XODB) (*IgeTest, error) {
	return IgeTestByID(db, uint(ita.TestID.Int64))
}

// User returns the User associated with the IgeTestsAntigen's UpdatedBy (updated_by).
//
// Generated from foreign key 'ige_tests_antigens_updated'.
func (ita *IgeTestsAntigen) User(db XODB) (*User, error) {
	return UserByID(db, uint(ita.UpdatedBy.Int64))
}

// IgeTestsVial returns the IgeTestsVial associated with the IgeTestsAntigen's VialID (vial_id).
//
// Generated from foreign key 'ige_tests_antigens_vial'.
func (ita *IgeTestsAntigen) IgeTestsVial(db XODB) (*IgeTestsVial, error) {
	return IgeTestsVialByID(db, uint(ita.VialID.Int64))
}

// IgeTestsAntigensByAntigenID retrieves a row from 'AllergyNew.ige_tests_antigens' as a IgeTestsAntigen.
//
// Generated from index 'Antigens'.
func IgeTestsAntigensByAntigenID(db XODB, antigenID sql.NullInt64) ([]*IgeTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_group_id, patient_id, antigen_id, name, order, is_break, vial_id, sensitivity, class, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_antigens ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsAntigen{}
	for q.Next() {
		ita := IgeTestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ita.ID, &ita.TestID, &ita.AntigenGroupID, &ita.PatientID, &ita.AntigenID, &ita.Name, &ita.Order, &ita.IsBreak, &ita.VialID, &ita.Sensitivity, &ita.Class, &ita.UpdatedBy, &ita.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ita)
	}

	return res, nil
}

// IgeTestsAntigensByPatientID retrieves a row from 'AllergyNew.ige_tests_antigens' as a IgeTestsAntigen.
//
// Generated from index 'Patients'.
func IgeTestsAntigensByPatientID(db XODB, patientID sql.NullInt64) ([]*IgeTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_group_id, patient_id, antigen_id, name, order, is_break, vial_id, sensitivity, class, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_antigens ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsAntigen{}
	for q.Next() {
		ita := IgeTestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ita.ID, &ita.TestID, &ita.AntigenGroupID, &ita.PatientID, &ita.AntigenID, &ita.Name, &ita.Order, &ita.IsBreak, &ita.VialID, &ita.Sensitivity, &ita.Class, &ita.UpdatedBy, &ita.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ita)
	}

	return res, nil
}

// IgeTestsAntigensByTestID retrieves a row from 'AllergyNew.ige_tests_antigens' as a IgeTestsAntigen.
//
// Generated from index 'Tests'.
func IgeTestsAntigensByTestID(db XODB, testID sql.NullInt64) ([]*IgeTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_group_id, patient_id, antigen_id, name, order, is_break, vial_id, sensitivity, class, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_antigens ` +
		`WHERE test_id = ?`

	// run query
	XOLog(sqlstr, testID)
	q, err := db.Query(sqlstr, testID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsAntigen{}
	for q.Next() {
		ita := IgeTestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ita.ID, &ita.TestID, &ita.AntigenGroupID, &ita.PatientID, &ita.AntigenID, &ita.Name, &ita.Order, &ita.IsBreak, &ita.VialID, &ita.Sensitivity, &ita.Class, &ita.UpdatedBy, &ita.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ita)
	}

	return res, nil
}

// IgeTestsAntigenByID retrieves a row from 'AllergyNew.ige_tests_antigens' as a IgeTestsAntigen.
//
// Generated from index 'ige_tests_antigens_id_pkey'.
func IgeTestsAntigenByID(db XODB, id uint) (*IgeTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_group_id, patient_id, antigen_id, name, order, is_break, vial_id, sensitivity, class, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ita := IgeTestsAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ita.ID, &ita.TestID, &ita.AntigenGroupID, &ita.PatientID, &ita.AntigenID, &ita.Name, &ita.Order, &ita.IsBreak, &ita.VialID, &ita.Sensitivity, &ita.Class, &ita.UpdatedBy, &ita.Updated)
	if err != nil {
		return nil, err
	}

	return &ita, nil
}

// IgeTestsAntigensByUpdatedBy retrieves a row from 'AllergyNew.ige_tests_antigens' as a IgeTestsAntigen.
//
// Generated from index 'rast_tests_antigens_updated'.
func IgeTestsAntigensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*IgeTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_group_id, patient_id, antigen_id, name, order, is_break, vial_id, sensitivity, class, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_antigens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsAntigen{}
	for q.Next() {
		ita := IgeTestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ita.ID, &ita.TestID, &ita.AntigenGroupID, &ita.PatientID, &ita.AntigenID, &ita.Name, &ita.Order, &ita.IsBreak, &ita.VialID, &ita.Sensitivity, &ita.Class, &ita.UpdatedBy, &ita.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ita)
	}

	return res, nil
}

// IgeTestsAntigensByVialID retrieves a row from 'AllergyNew.ige_tests_antigens' as a IgeTestsAntigen.
//
// Generated from index 'rast_tests_antigens_vial'.
func IgeTestsAntigensByVialID(db XODB, vialID sql.NullInt64) ([]*IgeTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_group_id, patient_id, antigen_id, name, order, is_break, vial_id, sensitivity, class, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_antigens ` +
		`WHERE vial_id = ?`

	// run query
	XOLog(sqlstr, vialID)
	q, err := db.Query(sqlstr, vialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsAntigen{}
	for q.Next() {
		ita := IgeTestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ita.ID, &ita.TestID, &ita.AntigenGroupID, &ita.PatientID, &ita.AntigenID, &ita.Name, &ita.Order, &ita.IsBreak, &ita.VialID, &ita.Sensitivity, &ita.Class, &ita.UpdatedBy, &ita.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ita)
	}

	return res, nil
}
