// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// ProcessedAntigen represents a row from 'AllergyNew.processed_antigens'.
type ProcessedAntigen struct {
	ID                 uint           `json:"id"`                   // id
	PracticeID         sql.NullInt64  `json:"practice_id"`          // practice_id
	LocationID         sql.NullInt64  `json:"location_id"`          // location_id
	AntigenID          sql.NullInt64  `json:"antigen_id"`           // antigen_id
	AntigenInventoryID sql.NullInt64  `json:"antigen_inventory_id"` // antigen_inventory_id
	Barcode            sql.NullString `json:"barcode"`              // barcode
	Title              sql.NullString `json:"title"`                // title
	Strength           int            `json:"strength"`             // strength
	MixDate            mysql.NullTime `json:"mix_date"`             // mix_date
	ExpirationDate     mysql.NullTime `json:"expiration_date"`      // expiration_date
	Lot                sql.NullString `json:"lot"`                  // lot
	SupplierID         sql.NullInt64  `json:"supplier_id"`          // supplier_id
	SetID              sql.NullInt64  `json:"set_id"`               // set_id
	IsMix              int8           `json:"is_mix"`               // is_mix
	MixAntigenID       sql.NullInt64  `json:"mix_antigen_id"`       // mix_antigen_id
	MixerID            sql.NullInt64  `json:"mixer_id"`             // mixer_id
	Enabled            int8           `json:"enabled"`              // enabled
	UpdatedBy          sql.NullInt64  `json:"updated_by"`           // updated_by
	Updated            time.Time      `json:"updated"`              // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProcessedAntigen exists in the database.
func (pa *ProcessedAntigen) Exists() bool {
	return pa._exists
}

// Deleted provides information if the ProcessedAntigen has been deleted from the database.
func (pa *ProcessedAntigen) Deleted() bool {
	return pa._deleted
}

// Insert inserts the ProcessedAntigen to the database.
func (pa *ProcessedAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.processed_antigens (` +
		`practice_id, location_id, antigen_id, antigen_inventory_id, barcode, title, strength, mix_date, expiration_date, lot, supplier_id, set_id, is_mix, mix_antigen_id, mixer_id, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pa.PracticeID, pa.LocationID, pa.AntigenID, pa.AntigenInventoryID, pa.Barcode, pa.Title, pa.Strength, pa.MixDate, pa.ExpirationDate, pa.Lot, pa.SupplierID, pa.SetID, pa.IsMix, pa.MixAntigenID, pa.MixerID, pa.Enabled, pa.UpdatedBy, pa.Updated)
	res, err := db.Exec(sqlstr, pa.PracticeID, pa.LocationID, pa.AntigenID, pa.AntigenInventoryID, pa.Barcode, pa.Title, pa.Strength, pa.MixDate, pa.ExpirationDate, pa.Lot, pa.SupplierID, pa.SetID, pa.IsMix, pa.MixAntigenID, pa.MixerID, pa.Enabled, pa.UpdatedBy, pa.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pa.ID = uint(id)
	pa._exists = true

	return nil
}

// Update updates the ProcessedAntigen in the database.
func (pa *ProcessedAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.processed_antigens SET ` +
		`practice_id = ?, location_id = ?, antigen_id = ?, antigen_inventory_id = ?, barcode = ?, title = ?, strength = ?, mix_date = ?, expiration_date = ?, lot = ?, supplier_id = ?, set_id = ?, is_mix = ?, mix_antigen_id = ?, mixer_id = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pa.PracticeID, pa.LocationID, pa.AntigenID, pa.AntigenInventoryID, pa.Barcode, pa.Title, pa.Strength, pa.MixDate, pa.ExpirationDate, pa.Lot, pa.SupplierID, pa.SetID, pa.IsMix, pa.MixAntigenID, pa.MixerID, pa.Enabled, pa.UpdatedBy, pa.Updated, pa.ID)
	_, err = db.Exec(sqlstr, pa.PracticeID, pa.LocationID, pa.AntigenID, pa.AntigenInventoryID, pa.Barcode, pa.Title, pa.Strength, pa.MixDate, pa.ExpirationDate, pa.Lot, pa.SupplierID, pa.SetID, pa.IsMix, pa.MixAntigenID, pa.MixerID, pa.Enabled, pa.UpdatedBy, pa.Updated, pa.ID)
	return err
}

// Save saves the ProcessedAntigen to the database.
func (pa *ProcessedAntigen) Save(db XODB) error {
	if pa.Exists() {
		return pa.Update(db)
	}

	return pa.Insert(db)
}

// Delete deletes the ProcessedAntigen from the database.
func (pa *ProcessedAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pa._exists {
		return nil
	}

	// if deleted, bail
	if pa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.processed_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, pa.ID)
	_, err = db.Exec(sqlstr, pa.ID)
	if err != nil {
		return err
	}

	// set deleted
	pa._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the ProcessedAntigen's AntigenID (antigen_id).
//
// Generated from foreign key 'processed_antigens_antigen'.
func (pa *ProcessedAntigen) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(pa.AntigenID.Int64))
}

// AntigenInventory returns the AntigenInventory associated with the ProcessedAntigen's AntigenInventoryID (antigen_inventory_id).
//
// Generated from foreign key 'processed_antigens_antigen_inventory'.
func (pa *ProcessedAntigen) AntigenInventory(db XODB) (*AntigenInventory, error) {
	return AntigenInventoryByID(db, uint(pa.AntigenInventoryID.Int64))
}

// PracticeLocation returns the PracticeLocation associated with the ProcessedAntigen's LocationID (location_id).
//
// Generated from foreign key 'processed_antigens_location'.
func (pa *ProcessedAntigen) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(pa.LocationID.Int64))
}

// Practice returns the Practice associated with the ProcessedAntigen's PracticeID (practice_id).
//
// Generated from foreign key 'processed_antigens_practice'.
func (pa *ProcessedAntigen) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(pa.PracticeID.Int64))
}

// Supplier returns the Supplier associated with the ProcessedAntigen's SupplierID (supplier_id).
//
// Generated from foreign key 'processed_antigens_supplier'.
func (pa *ProcessedAntigen) Supplier(db XODB) (*Supplier, error) {
	return SupplierByID(db, uint(pa.SupplierID.Int64))
}

// User returns the User associated with the ProcessedAntigen's UpdatedBy (updated_by).
//
// Generated from foreign key 'processed_antigens_updated'.
func (pa *ProcessedAntigen) User(db XODB) (*User, error) {
	return UserByID(db, uint(pa.UpdatedBy.Int64))
}

// ProcessedAntigensByAntigenInventoryID retrieves a row from 'AllergyNew.processed_antigens' as a ProcessedAntigen.
//
// Generated from index 'Antigen_Inventory'.
func ProcessedAntigensByAntigenInventoryID(db XODB, antigenInventoryID sql.NullInt64) ([]*ProcessedAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, antigen_id, antigen_inventory_id, barcode, title, strength, mix_date, expiration_date, lot, supplier_id, set_id, is_mix, mix_antigen_id, mixer_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.processed_antigens ` +
		`WHERE antigen_inventory_id = ?`

	// run query
	XOLog(sqlstr, antigenInventoryID)
	q, err := db.Query(sqlstr, antigenInventoryID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProcessedAntigen{}
	for q.Next() {
		pa := ProcessedAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&pa.ID, &pa.PracticeID, &pa.LocationID, &pa.AntigenID, &pa.AntigenInventoryID, &pa.Barcode, &pa.Title, &pa.Strength, &pa.MixDate, &pa.ExpirationDate, &pa.Lot, &pa.SupplierID, &pa.SetID, &pa.IsMix, &pa.MixAntigenID, &pa.MixerID, &pa.Enabled, &pa.UpdatedBy, &pa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pa)
	}

	return res, nil
}

// ProcessedAntigensByAntigenID retrieves a row from 'AllergyNew.processed_antigens' as a ProcessedAntigen.
//
// Generated from index 'Antigens'.
func ProcessedAntigensByAntigenID(db XODB, antigenID sql.NullInt64) ([]*ProcessedAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, antigen_id, antigen_inventory_id, barcode, title, strength, mix_date, expiration_date, lot, supplier_id, set_id, is_mix, mix_antigen_id, mixer_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.processed_antigens ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProcessedAntigen{}
	for q.Next() {
		pa := ProcessedAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&pa.ID, &pa.PracticeID, &pa.LocationID, &pa.AntigenID, &pa.AntigenInventoryID, &pa.Barcode, &pa.Title, &pa.Strength, &pa.MixDate, &pa.ExpirationDate, &pa.Lot, &pa.SupplierID, &pa.SetID, &pa.IsMix, &pa.MixAntigenID, &pa.MixerID, &pa.Enabled, &pa.UpdatedBy, &pa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pa)
	}

	return res, nil
}

// ProcessedAntigensByPracticeIDBarcode retrieves a row from 'AllergyNew.processed_antigens' as a ProcessedAntigen.
//
// Generated from index 'Barcode_Index'.
func ProcessedAntigensByPracticeIDBarcode(db XODB, practiceID sql.NullInt64, barcode sql.NullString) ([]*ProcessedAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, antigen_id, antigen_inventory_id, barcode, title, strength, mix_date, expiration_date, lot, supplier_id, set_id, is_mix, mix_antigen_id, mixer_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.processed_antigens ` +
		`WHERE practice_id = ? AND barcode = ?`

	// run query
	XOLog(sqlstr, practiceID, barcode)
	q, err := db.Query(sqlstr, practiceID, barcode)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProcessedAntigen{}
	for q.Next() {
		pa := ProcessedAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&pa.ID, &pa.PracticeID, &pa.LocationID, &pa.AntigenID, &pa.AntigenInventoryID, &pa.Barcode, &pa.Title, &pa.Strength, &pa.MixDate, &pa.ExpirationDate, &pa.Lot, &pa.SupplierID, &pa.SetID, &pa.IsMix, &pa.MixAntigenID, &pa.MixerID, &pa.Enabled, &pa.UpdatedBy, &pa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pa)
	}

	return res, nil
}

// ProcessedAntigensByLocationID retrieves a row from 'AllergyNew.processed_antigens' as a ProcessedAntigen.
//
// Generated from index 'Locations'.
func ProcessedAntigensByLocationID(db XODB, locationID sql.NullInt64) ([]*ProcessedAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, antigen_id, antigen_inventory_id, barcode, title, strength, mix_date, expiration_date, lot, supplier_id, set_id, is_mix, mix_antigen_id, mixer_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.processed_antigens ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProcessedAntigen{}
	for q.Next() {
		pa := ProcessedAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&pa.ID, &pa.PracticeID, &pa.LocationID, &pa.AntigenID, &pa.AntigenInventoryID, &pa.Barcode, &pa.Title, &pa.Strength, &pa.MixDate, &pa.ExpirationDate, &pa.Lot, &pa.SupplierID, &pa.SetID, &pa.IsMix, &pa.MixAntigenID, &pa.MixerID, &pa.Enabled, &pa.UpdatedBy, &pa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pa)
	}

	return res, nil
}

// ProcessedAntigensByPracticeID retrieves a row from 'AllergyNew.processed_antigens' as a ProcessedAntigen.
//
// Generated from index 'Practices'.
func ProcessedAntigensByPracticeID(db XODB, practiceID sql.NullInt64) ([]*ProcessedAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, antigen_id, antigen_inventory_id, barcode, title, strength, mix_date, expiration_date, lot, supplier_id, set_id, is_mix, mix_antigen_id, mixer_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.processed_antigens ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProcessedAntigen{}
	for q.Next() {
		pa := ProcessedAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&pa.ID, &pa.PracticeID, &pa.LocationID, &pa.AntigenID, &pa.AntigenInventoryID, &pa.Barcode, &pa.Title, &pa.Strength, &pa.MixDate, &pa.ExpirationDate, &pa.Lot, &pa.SupplierID, &pa.SetID, &pa.IsMix, &pa.MixAntigenID, &pa.MixerID, &pa.Enabled, &pa.UpdatedBy, &pa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pa)
	}

	return res, nil
}

// ProcessedAntigensBySupplierID retrieves a row from 'AllergyNew.processed_antigens' as a ProcessedAntigen.
//
// Generated from index 'Suppliers'.
func ProcessedAntigensBySupplierID(db XODB, supplierID sql.NullInt64) ([]*ProcessedAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, antigen_id, antigen_inventory_id, barcode, title, strength, mix_date, expiration_date, lot, supplier_id, set_id, is_mix, mix_antigen_id, mixer_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.processed_antigens ` +
		`WHERE supplier_id = ?`

	// run query
	XOLog(sqlstr, supplierID)
	q, err := db.Query(sqlstr, supplierID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProcessedAntigen{}
	for q.Next() {
		pa := ProcessedAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&pa.ID, &pa.PracticeID, &pa.LocationID, &pa.AntigenID, &pa.AntigenInventoryID, &pa.Barcode, &pa.Title, &pa.Strength, &pa.MixDate, &pa.ExpirationDate, &pa.Lot, &pa.SupplierID, &pa.SetID, &pa.IsMix, &pa.MixAntigenID, &pa.MixerID, &pa.Enabled, &pa.UpdatedBy, &pa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pa)
	}

	return res, nil
}

// ProcessedAntigenByID retrieves a row from 'AllergyNew.processed_antigens' as a ProcessedAntigen.
//
// Generated from index 'processed_antigens_id_pkey'.
func ProcessedAntigenByID(db XODB, id uint) (*ProcessedAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, antigen_id, antigen_inventory_id, barcode, title, strength, mix_date, expiration_date, lot, supplier_id, set_id, is_mix, mix_antigen_id, mixer_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.processed_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pa := ProcessedAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pa.ID, &pa.PracticeID, &pa.LocationID, &pa.AntigenID, &pa.AntigenInventoryID, &pa.Barcode, &pa.Title, &pa.Strength, &pa.MixDate, &pa.ExpirationDate, &pa.Lot, &pa.SupplierID, &pa.SetID, &pa.IsMix, &pa.MixAntigenID, &pa.MixerID, &pa.Enabled, &pa.UpdatedBy, &pa.Updated)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// ProcessedAntigensByUpdatedBy retrieves a row from 'AllergyNew.processed_antigens' as a ProcessedAntigen.
//
// Generated from index 'processed_antigens_updated'.
func ProcessedAntigensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*ProcessedAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, antigen_id, antigen_inventory_id, barcode, title, strength, mix_date, expiration_date, lot, supplier_id, set_id, is_mix, mix_antigen_id, mixer_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.processed_antigens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProcessedAntigen{}
	for q.Next() {
		pa := ProcessedAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&pa.ID, &pa.PracticeID, &pa.LocationID, &pa.AntigenID, &pa.AntigenInventoryID, &pa.Barcode, &pa.Title, &pa.Strength, &pa.MixDate, &pa.ExpirationDate, &pa.Lot, &pa.SupplierID, &pa.SetID, &pa.IsMix, &pa.MixAntigenID, &pa.MixerID, &pa.Enabled, &pa.UpdatedBy, &pa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pa)
	}

	return res, nil
}
