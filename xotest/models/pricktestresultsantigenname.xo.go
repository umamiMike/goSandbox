// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PrickTestResultsAntigenName represents a row from 'AllergyNew.prick_test_results_antigen_names'.
type PrickTestResultsAntigenName struct {
	ID          uint           `json:"id"`           // id
	ResultsID   sql.NullInt64  `json:"results_id"`   // results_id
	AntigenName sql.NullString `json:"antigen_name"` // antigen_name
	UpdatedBy   sql.NullInt64  `json:"updated_by"`   // updated_by
	Updated     time.Time      `json:"updated"`      // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PrickTestResultsAntigenName exists in the database.
func (ptran *PrickTestResultsAntigenName) Exists() bool {
	return ptran._exists
}

// Deleted provides information if the PrickTestResultsAntigenName has been deleted from the database.
func (ptran *PrickTestResultsAntigenName) Deleted() bool {
	return ptran._deleted
}

// Insert inserts the PrickTestResultsAntigenName to the database.
func (ptran *PrickTestResultsAntigenName) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ptran._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.prick_test_results_antigen_names (` +
		`results_id, antigen_name, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ptran.ResultsID, ptran.AntigenName, ptran.UpdatedBy, ptran.Updated)
	res, err := db.Exec(sqlstr, ptran.ResultsID, ptran.AntigenName, ptran.UpdatedBy, ptran.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ptran.ID = uint(id)
	ptran._exists = true

	return nil
}

// Update updates the PrickTestResultsAntigenName in the database.
func (ptran *PrickTestResultsAntigenName) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ptran._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ptran._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.prick_test_results_antigen_names SET ` +
		`results_id = ?, antigen_name = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ptran.ResultsID, ptran.AntigenName, ptran.UpdatedBy, ptran.Updated, ptran.ID)
	_, err = db.Exec(sqlstr, ptran.ResultsID, ptran.AntigenName, ptran.UpdatedBy, ptran.Updated, ptran.ID)
	return err
}

// Save saves the PrickTestResultsAntigenName to the database.
func (ptran *PrickTestResultsAntigenName) Save(db XODB) error {
	if ptran.Exists() {
		return ptran.Update(db)
	}

	return ptran.Insert(db)
}

// Delete deletes the PrickTestResultsAntigenName from the database.
func (ptran *PrickTestResultsAntigenName) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ptran._exists {
		return nil
	}

	// if deleted, bail
	if ptran._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.prick_test_results_antigen_names WHERE id = ?`

	// run query
	XOLog(sqlstr, ptran.ID)
	_, err = db.Exec(sqlstr, ptran.ID)
	if err != nil {
		return err
	}

	// set deleted
	ptran._deleted = true

	return nil
}

// PrickTestResultsAntigenNamesByResultsID retrieves a row from 'AllergyNew.prick_test_results_antigen_names' as a PrickTestResultsAntigenName.
//
// Generated from index 'Results'.
func PrickTestResultsAntigenNamesByResultsID(db XODB, resultsID sql.NullInt64) ([]*PrickTestResultsAntigenName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, results_id, antigen_name, updated_by, updated ` +
		`FROM AllergyNew.prick_test_results_antigen_names ` +
		`WHERE results_id = ?`

	// run query
	XOLog(sqlstr, resultsID)
	q, err := db.Query(sqlstr, resultsID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestResultsAntigenName{}
	for q.Next() {
		ptran := PrickTestResultsAntigenName{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptran.ID, &ptran.ResultsID, &ptran.AntigenName, &ptran.UpdatedBy, &ptran.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptran)
	}

	return res, nil
}

// PrickTestResultsAntigenNameByID retrieves a row from 'AllergyNew.prick_test_results_antigen_names' as a PrickTestResultsAntigenName.
//
// Generated from index 'prick_test_results_antigen_names_id_pkey'.
func PrickTestResultsAntigenNameByID(db XODB, id uint) (*PrickTestResultsAntigenName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, results_id, antigen_name, updated_by, updated ` +
		`FROM AllergyNew.prick_test_results_antigen_names ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ptran := PrickTestResultsAntigenName{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ptran.ID, &ptran.ResultsID, &ptran.AntigenName, &ptran.UpdatedBy, &ptran.Updated)
	if err != nil {
		return nil, err
	}

	return &ptran, nil
}
