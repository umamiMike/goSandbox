// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// MqTestsAntigen represents a row from 'AllergyNew.mq_tests_antigens'.
type MqTestsAntigen struct {
	ID             uint           `json:"id"`               // id
	TestID         sql.NullInt64  `json:"test_id"`          // test_id
	PatientID      sql.NullInt64  `json:"patient_id"`       // patient_id
	AntigenID      sql.NullInt64  `json:"antigen_id"`       // antigen_id
	Multi          sql.NullString `json:"multi"`            // multi
	MultiFlare     sql.NullString `json:"multi_flare"`      // multi_flare
	Dilution1      sql.NullString `json:"dilution_1"`       // dilution_1
	Dilution1Flare sql.NullString `json:"dilution_1_flare"` // dilution_1_flare
	Dilution2      sql.NullString `json:"dilution_2"`       // dilution_2
	Dilution2Flare sql.NullString `json:"dilution_2_flare"` // dilution_2_flare
	Endpoint       sql.NullInt64  `json:"endpoint"`         // endpoint
	Order          sql.NullInt64  `json:"order"`            // order
	UpdatedBy      sql.NullInt64  `json:"updated_by"`       // updated_by
	Updated        time.Time      `json:"updated"`          // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MqTestsAntigen exists in the database.
func (mta *MqTestsAntigen) Exists() bool {
	return mta._exists
}

// Deleted provides information if the MqTestsAntigen has been deleted from the database.
func (mta *MqTestsAntigen) Deleted() bool {
	return mta._deleted
}

// Insert inserts the MqTestsAntigen to the database.
func (mta *MqTestsAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mta._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.mq_tests_antigens (` +
		`test_id, patient_id, antigen_id, multi, multi_flare, dilution_1, dilution_1_flare, dilution_2, dilution_2_flare, endpoint, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mta.TestID, mta.PatientID, mta.AntigenID, mta.Multi, mta.MultiFlare, mta.Dilution1, mta.Dilution1Flare, mta.Dilution2, mta.Dilution2Flare, mta.Endpoint, mta.Order, mta.UpdatedBy, mta.Updated)
	res, err := db.Exec(sqlstr, mta.TestID, mta.PatientID, mta.AntigenID, mta.Multi, mta.MultiFlare, mta.Dilution1, mta.Dilution1Flare, mta.Dilution2, mta.Dilution2Flare, mta.Endpoint, mta.Order, mta.UpdatedBy, mta.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mta.ID = uint(id)
	mta._exists = true

	return nil
}

// Update updates the MqTestsAntigen in the database.
func (mta *MqTestsAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mta._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mta._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.mq_tests_antigens SET ` +
		`test_id = ?, patient_id = ?, antigen_id = ?, multi = ?, multi_flare = ?, dilution_1 = ?, dilution_1_flare = ?, dilution_2 = ?, dilution_2_flare = ?, endpoint = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, mta.TestID, mta.PatientID, mta.AntigenID, mta.Multi, mta.MultiFlare, mta.Dilution1, mta.Dilution1Flare, mta.Dilution2, mta.Dilution2Flare, mta.Endpoint, mta.Order, mta.UpdatedBy, mta.Updated, mta.ID)
	_, err = db.Exec(sqlstr, mta.TestID, mta.PatientID, mta.AntigenID, mta.Multi, mta.MultiFlare, mta.Dilution1, mta.Dilution1Flare, mta.Dilution2, mta.Dilution2Flare, mta.Endpoint, mta.Order, mta.UpdatedBy, mta.Updated, mta.ID)
	return err
}

// Save saves the MqTestsAntigen to the database.
func (mta *MqTestsAntigen) Save(db XODB) error {
	if mta.Exists() {
		return mta.Update(db)
	}

	return mta.Insert(db)
}

// Delete deletes the MqTestsAntigen from the database.
func (mta *MqTestsAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mta._exists {
		return nil
	}

	// if deleted, bail
	if mta._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.mq_tests_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, mta.ID)
	_, err = db.Exec(sqlstr, mta.ID)
	if err != nil {
		return err
	}

	// set deleted
	mta._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the MqTestsAntigen's AntigenID (antigen_id).
//
// Generated from foreign key 'mq_tests_antigens_antigen'.
func (mta *MqTestsAntigen) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(mta.AntigenID.Int64))
}

// Patient returns the Patient associated with the MqTestsAntigen's PatientID (patient_id).
//
// Generated from foreign key 'mq_tests_antigens_patient'.
func (mta *MqTestsAntigen) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(mta.PatientID.Int64))
}

// MqTest returns the MqTest associated with the MqTestsAntigen's TestID (test_id).
//
// Generated from foreign key 'mq_tests_antigens_tests'.
func (mta *MqTestsAntigen) MqTest(db XODB) (*MqTest, error) {
	return MqTestByID(db, uint(mta.TestID.Int64))
}

// User returns the User associated with the MqTestsAntigen's UpdatedBy (updated_by).
//
// Generated from foreign key 'mq_tests_antigens_updated'.
func (mta *MqTestsAntigen) User(db XODB) (*User, error) {
	return UserByID(db, uint(mta.UpdatedBy.Int64))
}

// MqTestsAntigensByAntigenID retrieves a row from 'AllergyNew.mq_tests_antigens' as a MqTestsAntigen.
//
// Generated from index 'Antigens'.
func MqTestsAntigensByAntigenID(db XODB, antigenID sql.NullInt64) ([]*MqTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, patient_id, antigen_id, multi, multi_flare, dilution_1, dilution_1_flare, dilution_2, dilution_2_flare, endpoint, order, updated_by, updated ` +
		`FROM AllergyNew.mq_tests_antigens ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MqTestsAntigen{}
	for q.Next() {
		mta := MqTestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&mta.ID, &mta.TestID, &mta.PatientID, &mta.AntigenID, &mta.Multi, &mta.MultiFlare, &mta.Dilution1, &mta.Dilution1Flare, &mta.Dilution2, &mta.Dilution2Flare, &mta.Endpoint, &mta.Order, &mta.UpdatedBy, &mta.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &mta)
	}

	return res, nil
}

// MqTestsAntigensByPatientID retrieves a row from 'AllergyNew.mq_tests_antigens' as a MqTestsAntigen.
//
// Generated from index 'Patients'.
func MqTestsAntigensByPatientID(db XODB, patientID sql.NullInt64) ([]*MqTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, patient_id, antigen_id, multi, multi_flare, dilution_1, dilution_1_flare, dilution_2, dilution_2_flare, endpoint, order, updated_by, updated ` +
		`FROM AllergyNew.mq_tests_antigens ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MqTestsAntigen{}
	for q.Next() {
		mta := MqTestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&mta.ID, &mta.TestID, &mta.PatientID, &mta.AntigenID, &mta.Multi, &mta.MultiFlare, &mta.Dilution1, &mta.Dilution1Flare, &mta.Dilution2, &mta.Dilution2Flare, &mta.Endpoint, &mta.Order, &mta.UpdatedBy, &mta.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &mta)
	}

	return res, nil
}

// MqTestsAntigensByTestID retrieves a row from 'AllergyNew.mq_tests_antigens' as a MqTestsAntigen.
//
// Generated from index 'Tests'.
func MqTestsAntigensByTestID(db XODB, testID sql.NullInt64) ([]*MqTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, patient_id, antigen_id, multi, multi_flare, dilution_1, dilution_1_flare, dilution_2, dilution_2_flare, endpoint, order, updated_by, updated ` +
		`FROM AllergyNew.mq_tests_antigens ` +
		`WHERE test_id = ?`

	// run query
	XOLog(sqlstr, testID)
	q, err := db.Query(sqlstr, testID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MqTestsAntigen{}
	for q.Next() {
		mta := MqTestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&mta.ID, &mta.TestID, &mta.PatientID, &mta.AntigenID, &mta.Multi, &mta.MultiFlare, &mta.Dilution1, &mta.Dilution1Flare, &mta.Dilution2, &mta.Dilution2Flare, &mta.Endpoint, &mta.Order, &mta.UpdatedBy, &mta.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &mta)
	}

	return res, nil
}

// MqTestsAntigenByID retrieves a row from 'AllergyNew.mq_tests_antigens' as a MqTestsAntigen.
//
// Generated from index 'mq_tests_antigens_id_pkey'.
func MqTestsAntigenByID(db XODB, id uint) (*MqTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, patient_id, antigen_id, multi, multi_flare, dilution_1, dilution_1_flare, dilution_2, dilution_2_flare, endpoint, order, updated_by, updated ` +
		`FROM AllergyNew.mq_tests_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	mta := MqTestsAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mta.ID, &mta.TestID, &mta.PatientID, &mta.AntigenID, &mta.Multi, &mta.MultiFlare, &mta.Dilution1, &mta.Dilution1Flare, &mta.Dilution2, &mta.Dilution2Flare, &mta.Endpoint, &mta.Order, &mta.UpdatedBy, &mta.Updated)
	if err != nil {
		return nil, err
	}

	return &mta, nil
}

// MqTestsAntigensByUpdatedBy retrieves a row from 'AllergyNew.mq_tests_antigens' as a MqTestsAntigen.
//
// Generated from index 'mq_tests_antigens_updated'.
func MqTestsAntigensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*MqTestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, patient_id, antigen_id, multi, multi_flare, dilution_1, dilution_1_flare, dilution_2, dilution_2_flare, endpoint, order, updated_by, updated ` +
		`FROM AllergyNew.mq_tests_antigens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MqTestsAntigen{}
	for q.Next() {
		mta := MqTestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&mta.ID, &mta.TestID, &mta.PatientID, &mta.AntigenID, &mta.Multi, &mta.MultiFlare, &mta.Dilution1, &mta.Dilution1Flare, &mta.Dilution2, &mta.Dilution2Flare, &mta.Endpoint, &mta.Order, &mta.UpdatedBy, &mta.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &mta)
	}

	return res, nil
}
