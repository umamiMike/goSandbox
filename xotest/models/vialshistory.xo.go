// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialsHistory represents a row from 'AllergyNew.vials_history'.
type VialsHistory struct {
	ID           uint          `json:"id"`             // id
	ParentVialID sql.NullInt64 `json:"parent_vial_id"` // parent_vial_id
	VialID       sql.NullInt64 `json:"vial_id"`        // vial_id
	HistoryType  HistoryType   `json:"history_type"`   // history_type
	IsCurrent    sql.NullInt64 `json:"is_current"`     // is_current
	Active       sql.NullInt64 `json:"active"`         // active
	UpdatedBy    sql.NullInt64 `json:"updated_by"`     // updated_by
	Updated      time.Time     `json:"updated"`        // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialsHistory exists in the database.
func (vh *VialsHistory) Exists() bool {
	return vh._exists
}

// Deleted provides information if the VialsHistory has been deleted from the database.
func (vh *VialsHistory) Deleted() bool {
	return vh._deleted
}

// Insert inserts the VialsHistory to the database.
func (vh *VialsHistory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vh._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vials_history (` +
		`parent_vial_id, vial_id, history_type, is_current, active, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vh.ParentVialID, vh.VialID, vh.HistoryType, vh.IsCurrent, vh.Active, vh.UpdatedBy, vh.Updated)
	res, err := db.Exec(sqlstr, vh.ParentVialID, vh.VialID, vh.HistoryType, vh.IsCurrent, vh.Active, vh.UpdatedBy, vh.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vh.ID = uint(id)
	vh._exists = true

	return nil
}

// Update updates the VialsHistory in the database.
func (vh *VialsHistory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vh._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vh._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vials_history SET ` +
		`parent_vial_id = ?, vial_id = ?, history_type = ?, is_current = ?, active = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vh.ParentVialID, vh.VialID, vh.HistoryType, vh.IsCurrent, vh.Active, vh.UpdatedBy, vh.Updated, vh.ID)
	_, err = db.Exec(sqlstr, vh.ParentVialID, vh.VialID, vh.HistoryType, vh.IsCurrent, vh.Active, vh.UpdatedBy, vh.Updated, vh.ID)
	return err
}

// Save saves the VialsHistory to the database.
func (vh *VialsHistory) Save(db XODB) error {
	if vh.Exists() {
		return vh.Update(db)
	}

	return vh.Insert(db)
}

// Delete deletes the VialsHistory from the database.
func (vh *VialsHistory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vh._exists {
		return nil
	}

	// if deleted, bail
	if vh._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vials_history WHERE id = ?`

	// run query
	XOLog(sqlstr, vh.ID)
	_, err = db.Exec(sqlstr, vh.ID)
	if err != nil {
		return err
	}

	// set deleted
	vh._deleted = true

	return nil
}

// VialByParentVialID returns the Vial associated with the VialsHistory's ParentVialID (parent_vial_id).
//
// Generated from foreign key 'vials_history_parent_vials'.
func (vh *VialsHistory) VialByParentVialID(db XODB) (*Vial, error) {
	return VialByID(db, uint(vh.ParentVialID.Int64))
}

// VialByVialID returns the Vial associated with the VialsHistory's VialID (vial_id).
//
// Generated from foreign key 'vials_history_vials'.
func (vh *VialsHistory) VialByVialID(db XODB) (*Vial, error) {
	return VialByID(db, uint(vh.VialID.Int64))
}

// VialsHistoriesByParentVialID retrieves a row from 'AllergyNew.vials_history' as a VialsHistory.
//
// Generated from index 'Parent_Vial_ID'.
func VialsHistoriesByParentVialID(db XODB, parentVialID sql.NullInt64) ([]*VialsHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_vial_id, vial_id, history_type, is_current, active, updated_by, updated ` +
		`FROM AllergyNew.vials_history ` +
		`WHERE parent_vial_id = ?`

	// run query
	XOLog(sqlstr, parentVialID)
	q, err := db.Query(sqlstr, parentVialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialsHistory{}
	for q.Next() {
		vh := VialsHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&vh.ID, &vh.ParentVialID, &vh.VialID, &vh.HistoryType, &vh.IsCurrent, &vh.Active, &vh.UpdatedBy, &vh.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vh)
	}

	return res, nil
}

// VialsHistoriesByVialID retrieves a row from 'AllergyNew.vials_history' as a VialsHistory.
//
// Generated from index 'Vial_ID'.
func VialsHistoriesByVialID(db XODB, vialID sql.NullInt64) ([]*VialsHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_vial_id, vial_id, history_type, is_current, active, updated_by, updated ` +
		`FROM AllergyNew.vials_history ` +
		`WHERE vial_id = ?`

	// run query
	XOLog(sqlstr, vialID)
	q, err := db.Query(sqlstr, vialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialsHistory{}
	for q.Next() {
		vh := VialsHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&vh.ID, &vh.ParentVialID, &vh.VialID, &vh.HistoryType, &vh.IsCurrent, &vh.Active, &vh.UpdatedBy, &vh.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vh)
	}

	return res, nil
}

// VialsHistoryByID retrieves a row from 'AllergyNew.vials_history' as a VialsHistory.
//
// Generated from index 'vials_history_id_pkey'.
func VialsHistoryByID(db XODB, id uint) (*VialsHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_vial_id, vial_id, history_type, is_current, active, updated_by, updated ` +
		`FROM AllergyNew.vials_history ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vh := VialsHistory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vh.ID, &vh.ParentVialID, &vh.VialID, &vh.HistoryType, &vh.IsCurrent, &vh.Active, &vh.UpdatedBy, &vh.Updated)
	if err != nil {
		return nil, err
	}

	return &vh, nil
}
