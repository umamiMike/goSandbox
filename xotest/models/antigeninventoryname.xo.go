// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// AntigenInventoryName represents a row from 'AllergyNew.antigen_inventory_names'.
type AntigenInventoryName struct {
	ID          uint           `json:"id"`           // id
	InventoryID sql.NullInt64  `json:"inventory_id"` // inventory_id
	Name        sql.NullString `json:"name"`         // name
	UpdatedBy   sql.NullInt64  `json:"updated_by"`   // updated_by
	Updated     time.Time      `json:"updated"`      // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AntigenInventoryName exists in the database.
func (ain *AntigenInventoryName) Exists() bool {
	return ain._exists
}

// Deleted provides information if the AntigenInventoryName has been deleted from the database.
func (ain *AntigenInventoryName) Deleted() bool {
	return ain._deleted
}

// Insert inserts the AntigenInventoryName to the database.
func (ain *AntigenInventoryName) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ain._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.antigen_inventory_names (` +
		`inventory_id, name, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ain.InventoryID, ain.Name, ain.UpdatedBy, ain.Updated)
	res, err := db.Exec(sqlstr, ain.InventoryID, ain.Name, ain.UpdatedBy, ain.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ain.ID = uint(id)
	ain._exists = true

	return nil
}

// Update updates the AntigenInventoryName in the database.
func (ain *AntigenInventoryName) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ain._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ain._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.antigen_inventory_names SET ` +
		`inventory_id = ?, name = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ain.InventoryID, ain.Name, ain.UpdatedBy, ain.Updated, ain.ID)
	_, err = db.Exec(sqlstr, ain.InventoryID, ain.Name, ain.UpdatedBy, ain.Updated, ain.ID)
	return err
}

// Save saves the AntigenInventoryName to the database.
func (ain *AntigenInventoryName) Save(db XODB) error {
	if ain.Exists() {
		return ain.Update(db)
	}

	return ain.Insert(db)
}

// Delete deletes the AntigenInventoryName from the database.
func (ain *AntigenInventoryName) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ain._exists {
		return nil
	}

	// if deleted, bail
	if ain._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.antigen_inventory_names WHERE id = ?`

	// run query
	XOLog(sqlstr, ain.ID)
	_, err = db.Exec(sqlstr, ain.ID)
	if err != nil {
		return err
	}

	// set deleted
	ain._deleted = true

	return nil
}

// AntigenInventory returns the AntigenInventory associated with the AntigenInventoryName's InventoryID (inventory_id).
//
// Generated from foreign key 'antigen_inventory_names_inventory'.
func (ain *AntigenInventoryName) AntigenInventory(db XODB) (*AntigenInventory, error) {
	return AntigenInventoryByID(db, uint(ain.InventoryID.Int64))
}

// User returns the User associated with the AntigenInventoryName's UpdatedBy (updated_by).
//
// Generated from foreign key 'antigen_inventory_names_updated'.
func (ain *AntigenInventoryName) User(db XODB) (*User, error) {
	return UserByID(db, uint(ain.UpdatedBy.Int64))
}

// AntigenInventoryNamesByInventoryID retrieves a row from 'AllergyNew.antigen_inventory_names' as a AntigenInventoryName.
//
// Generated from index 'Inventory_IDs'.
func AntigenInventoryNamesByInventoryID(db XODB, inventoryID sql.NullInt64) ([]*AntigenInventoryName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, inventory_id, name, updated_by, updated ` +
		`FROM AllergyNew.antigen_inventory_names ` +
		`WHERE inventory_id = ?`

	// run query
	XOLog(sqlstr, inventoryID)
	q, err := db.Query(sqlstr, inventoryID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AntigenInventoryName{}
	for q.Next() {
		ain := AntigenInventoryName{
			_exists: true,
		}

		// scan
		err = q.Scan(&ain.ID, &ain.InventoryID, &ain.Name, &ain.UpdatedBy, &ain.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ain)
	}

	return res, nil
}

// AntigenInventoryNameByID retrieves a row from 'AllergyNew.antigen_inventory_names' as a AntigenInventoryName.
//
// Generated from index 'antigen_inventory_names_id_pkey'.
func AntigenInventoryNameByID(db XODB, id uint) (*AntigenInventoryName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, inventory_id, name, updated_by, updated ` +
		`FROM AllergyNew.antigen_inventory_names ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ain := AntigenInventoryName{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ain.ID, &ain.InventoryID, &ain.Name, &ain.UpdatedBy, &ain.Updated)
	if err != nil {
		return nil, err
	}

	return &ain, nil
}

// AntigenInventoryNamesByName retrieves a row from 'AllergyNew.antigen_inventory_names' as a AntigenInventoryName.
//
// Generated from index 'antigen_inventory_names_names'.
func AntigenInventoryNamesByName(db XODB, name sql.NullString) ([]*AntigenInventoryName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, inventory_id, name, updated_by, updated ` +
		`FROM AllergyNew.antigen_inventory_names ` +
		`WHERE name = ?`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AntigenInventoryName{}
	for q.Next() {
		ain := AntigenInventoryName{
			_exists: true,
		}

		// scan
		err = q.Scan(&ain.ID, &ain.InventoryID, &ain.Name, &ain.UpdatedBy, &ain.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ain)
	}

	return res, nil
}

// AntigenInventoryNamesByUpdatedBy retrieves a row from 'AllergyNew.antigen_inventory_names' as a AntigenInventoryName.
//
// Generated from index 'antigen_inventory_names_updated'.
func AntigenInventoryNamesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*AntigenInventoryName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, inventory_id, name, updated_by, updated ` +
		`FROM AllergyNew.antigen_inventory_names ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AntigenInventoryName{}
	for q.Next() {
		ain := AntigenInventoryName{
			_exists: true,
		}

		// scan
		err = q.Scan(&ain.ID, &ain.InventoryID, &ain.Name, &ain.UpdatedBy, &ain.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ain)
	}

	return res, nil
}
