// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// VialOrderHold represents a row from 'AllergyNew.vial_order_holds'.
type VialOrderHold struct {
	ID          int            `json:"id"`            // id
	VialReqID   uint           `json:"vial_req_id"`   // vial_req_id
	UserIDStart uint           `json:"user_id_start"` // user_id_start
	TimeStart   time.Time      `json:"time_start"`    // time_start
	Reason      sql.NullString `json:"reason"`        // reason
	UserIDEnd   sql.NullInt64  `json:"user_id_end"`   // user_id_end
	TimeEnd     mysql.NullTime `json:"time_end"`      // time_end
	Updated     time.Time      `json:"updated"`       // updated
	UpdatedBy   sql.NullInt64  `json:"updated_by"`    // updated_by

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialOrderHold exists in the database.
func (voh *VialOrderHold) Exists() bool {
	return voh._exists
}

// Deleted provides information if the VialOrderHold has been deleted from the database.
func (voh *VialOrderHold) Deleted() bool {
	return voh._deleted
}

// Insert inserts the VialOrderHold to the database.
func (voh *VialOrderHold) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if voh._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_order_holds (` +
		`vial_req_id, user_id_start, time_start, reason, user_id_end, time_end, updated, updated_by` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, voh.VialReqID, voh.UserIDStart, voh.TimeStart, voh.Reason, voh.UserIDEnd, voh.TimeEnd, voh.Updated, voh.UpdatedBy)
	res, err := db.Exec(sqlstr, voh.VialReqID, voh.UserIDStart, voh.TimeStart, voh.Reason, voh.UserIDEnd, voh.TimeEnd, voh.Updated, voh.UpdatedBy)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	voh.ID = int(id)
	voh._exists = true

	return nil
}

// Update updates the VialOrderHold in the database.
func (voh *VialOrderHold) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !voh._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if voh._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_order_holds SET ` +
		`vial_req_id = ?, user_id_start = ?, time_start = ?, reason = ?, user_id_end = ?, time_end = ?, updated = ?, updated_by = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, voh.VialReqID, voh.UserIDStart, voh.TimeStart, voh.Reason, voh.UserIDEnd, voh.TimeEnd, voh.Updated, voh.UpdatedBy, voh.ID)
	_, err = db.Exec(sqlstr, voh.VialReqID, voh.UserIDStart, voh.TimeStart, voh.Reason, voh.UserIDEnd, voh.TimeEnd, voh.Updated, voh.UpdatedBy, voh.ID)
	return err
}

// Save saves the VialOrderHold to the database.
func (voh *VialOrderHold) Save(db XODB) error {
	if voh.Exists() {
		return voh.Update(db)
	}

	return voh.Insert(db)
}

// Delete deletes the VialOrderHold from the database.
func (voh *VialOrderHold) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !voh._exists {
		return nil
	}

	// if deleted, bail
	if voh._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_order_holds WHERE id = ?`

	// run query
	XOLog(sqlstr, voh.ID)
	_, err = db.Exec(sqlstr, voh.ID)
	if err != nil {
		return err
	}

	// set deleted
	voh._deleted = true

	return nil
}

// VialOrderHoldByID retrieves a row from 'AllergyNew.vial_order_holds' as a VialOrderHold.
//
// Generated from index 'vial_order_holds_id_pkey'.
func VialOrderHoldByID(db XODB, id int) (*VialOrderHold, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_req_id, user_id_start, time_start, reason, user_id_end, time_end, updated, updated_by ` +
		`FROM AllergyNew.vial_order_holds ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	voh := VialOrderHold{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&voh.ID, &voh.VialReqID, &voh.UserIDStart, &voh.TimeStart, &voh.Reason, &voh.UserIDEnd, &voh.TimeEnd, &voh.Updated, &voh.UpdatedBy)
	if err != nil {
		return nil, err
	}

	return &voh, nil
}
