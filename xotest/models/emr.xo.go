// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Emr represents a row from 'AllergyNew.emrs'.
type Emr struct {
	ID         uint           `json:"id"`          // id
	Name       sql.NullString `json:"name"`        // name
	ModuleName sql.NullString `json:"module_name"` // module_name
	Order      sql.NullInt64  `json:"order"`       // order
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Emr exists in the database.
func (e *Emr) Exists() bool {
	return e._exists
}

// Deleted provides information if the Emr has been deleted from the database.
func (e *Emr) Deleted() bool {
	return e._deleted
}

// Insert inserts the Emr to the database.
func (e *Emr) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.emrs (` +
		`name, module_name, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, e.Name, e.ModuleName, e.Order, e.UpdatedBy, e.Updated)
	res, err := db.Exec(sqlstr, e.Name, e.ModuleName, e.Order, e.UpdatedBy, e.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	e.ID = uint(id)
	e._exists = true

	return nil
}

// Update updates the Emr in the database.
func (e *Emr) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.emrs SET ` +
		`name = ?, module_name = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, e.Name, e.ModuleName, e.Order, e.UpdatedBy, e.Updated, e.ID)
	_, err = db.Exec(sqlstr, e.Name, e.ModuleName, e.Order, e.UpdatedBy, e.Updated, e.ID)
	return err
}

// Save saves the Emr to the database.
func (e *Emr) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Delete deletes the Emr from the database.
func (e *Emr) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.emrs WHERE id = ?`

	// run query
	XOLog(sqlstr, e.ID)
	_, err = db.Exec(sqlstr, e.ID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// User returns the User associated with the Emr's UpdatedBy (updated_by).
//
// Generated from foreign key 'emrs_updated'.
func (e *Emr) User(db XODB) (*User, error) {
	return UserByID(db, uint(e.UpdatedBy.Int64))
}

// EmrByID retrieves a row from 'AllergyNew.emrs' as a Emr.
//
// Generated from index 'emrs_id_pkey'.
func EmrByID(db XODB, id uint) (*Emr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, module_name, order, updated_by, updated ` +
		`FROM AllergyNew.emrs ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	e := Emr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&e.ID, &e.Name, &e.ModuleName, &e.Order, &e.UpdatedBy, &e.Updated)
	if err != nil {
		return nil, err
	}

	return &e, nil
}

// EmrsByUpdatedBy retrieves a row from 'AllergyNew.emrs' as a Emr.
//
// Generated from index 'emrs_updated'.
func EmrsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*Emr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, module_name, order, updated_by, updated ` +
		`FROM AllergyNew.emrs ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Emr{}
	for q.Next() {
		e := Emr{
			_exists: true,
		}

		// scan
		err = q.Scan(&e.ID, &e.Name, &e.ModuleName, &e.Order, &e.UpdatedBy, &e.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &e)
	}

	return res, nil
}
