// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PhysicianContactsNote represents a row from 'AllergyNew.physician_contacts_notes'.
type PhysicianContactsNote struct {
	ID                 uint           `json:"id"`                   // id
	PhysicianContactID uint           `json:"physician_contact_id"` // physician_contact_id
	Note               sql.NullString `json:"note"`                 // note
	UpdatedBy          sql.NullInt64  `json:"updated_by"`           // updated_by
	Updated            time.Time      `json:"updated"`              // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PhysicianContactsNote exists in the database.
func (pcn *PhysicianContactsNote) Exists() bool {
	return pcn._exists
}

// Deleted provides information if the PhysicianContactsNote has been deleted from the database.
func (pcn *PhysicianContactsNote) Deleted() bool {
	return pcn._deleted
}

// Insert inserts the PhysicianContactsNote to the database.
func (pcn *PhysicianContactsNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pcn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.physician_contacts_notes (` +
		`physician_contact_id, note, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pcn.PhysicianContactID, pcn.Note, pcn.UpdatedBy, pcn.Updated)
	res, err := db.Exec(sqlstr, pcn.PhysicianContactID, pcn.Note, pcn.UpdatedBy, pcn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pcn.ID = uint(id)
	pcn._exists = true

	return nil
}

// Update updates the PhysicianContactsNote in the database.
func (pcn *PhysicianContactsNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pcn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pcn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.physician_contacts_notes SET ` +
		`physician_contact_id = ?, note = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pcn.PhysicianContactID, pcn.Note, pcn.UpdatedBy, pcn.Updated, pcn.ID)
	_, err = db.Exec(sqlstr, pcn.PhysicianContactID, pcn.Note, pcn.UpdatedBy, pcn.Updated, pcn.ID)
	return err
}

// Save saves the PhysicianContactsNote to the database.
func (pcn *PhysicianContactsNote) Save(db XODB) error {
	if pcn.Exists() {
		return pcn.Update(db)
	}

	return pcn.Insert(db)
}

// Delete deletes the PhysicianContactsNote from the database.
func (pcn *PhysicianContactsNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pcn._exists {
		return nil
	}

	// if deleted, bail
	if pcn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.physician_contacts_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, pcn.ID)
	_, err = db.Exec(sqlstr, pcn.ID)
	if err != nil {
		return err
	}

	// set deleted
	pcn._deleted = true

	return nil
}

// PhysicianContactsNotesByPhysicianContactID retrieves a row from 'AllergyNew.physician_contacts_notes' as a PhysicianContactsNote.
//
// Generated from index 'Contact ID'.
func PhysicianContactsNotesByPhysicianContactID(db XODB, physicianContactID uint) ([]*PhysicianContactsNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, physician_contact_id, note, updated_by, updated ` +
		`FROM AllergyNew.physician_contacts_notes ` +
		`WHERE physician_contact_id = ?`

	// run query
	XOLog(sqlstr, physicianContactID)
	q, err := db.Query(sqlstr, physicianContactID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PhysicianContactsNote{}
	for q.Next() {
		pcn := PhysicianContactsNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&pcn.ID, &pcn.PhysicianContactID, &pcn.Note, &pcn.UpdatedBy, &pcn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pcn)
	}

	return res, nil
}

// PhysicianContactsNoteByID retrieves a row from 'AllergyNew.physician_contacts_notes' as a PhysicianContactsNote.
//
// Generated from index 'physician_contacts_notes_id_pkey'.
func PhysicianContactsNoteByID(db XODB, id uint) (*PhysicianContactsNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, physician_contact_id, note, updated_by, updated ` +
		`FROM AllergyNew.physician_contacts_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pcn := PhysicianContactsNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pcn.ID, &pcn.PhysicianContactID, &pcn.Note, &pcn.UpdatedBy, &pcn.Updated)
	if err != nil {
		return nil, err
	}

	return &pcn, nil
}
