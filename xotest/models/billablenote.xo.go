// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// BillableNote represents a row from 'AllergyNew.billable_notes'.
type BillableNote struct {
	ID         uint           `json:"id"`          // id
	PracticeID uint           `json:"practice_id"` // practice_id
	PatientID  uint           `json:"patient_id"`  // patient_id
	EventID    uint           `json:"event_id"`    // event_id
	Note       sql.NullString `json:"note"`        // note
	DateAdded  mysql.NullTime `json:"date_added"`  // date_added
	AddedBy    sql.NullInt64  `json:"added_by"`    // added_by
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BillableNote exists in the database.
func (bn *BillableNote) Exists() bool {
	return bn._exists
}

// Deleted provides information if the BillableNote has been deleted from the database.
func (bn *BillableNote) Deleted() bool {
	return bn._deleted
}

// Insert inserts the BillableNote to the database.
func (bn *BillableNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if bn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.billable_notes (` +
		`practice_id, patient_id, event_id, note, date_added, added_by, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, bn.PracticeID, bn.PatientID, bn.EventID, bn.Note, bn.DateAdded, bn.AddedBy, bn.UpdatedBy, bn.Updated)
	res, err := db.Exec(sqlstr, bn.PracticeID, bn.PatientID, bn.EventID, bn.Note, bn.DateAdded, bn.AddedBy, bn.UpdatedBy, bn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bn.ID = uint(id)
	bn._exists = true

	return nil
}

// Update updates the BillableNote in the database.
func (bn *BillableNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if bn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.billable_notes SET ` +
		`practice_id = ?, patient_id = ?, event_id = ?, note = ?, date_added = ?, added_by = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, bn.PracticeID, bn.PatientID, bn.EventID, bn.Note, bn.DateAdded, bn.AddedBy, bn.UpdatedBy, bn.Updated, bn.ID)
	_, err = db.Exec(sqlstr, bn.PracticeID, bn.PatientID, bn.EventID, bn.Note, bn.DateAdded, bn.AddedBy, bn.UpdatedBy, bn.Updated, bn.ID)
	return err
}

// Save saves the BillableNote to the database.
func (bn *BillableNote) Save(db XODB) error {
	if bn.Exists() {
		return bn.Update(db)
	}

	return bn.Insert(db)
}

// Delete deletes the BillableNote from the database.
func (bn *BillableNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bn._exists {
		return nil
	}

	// if deleted, bail
	if bn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.billable_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, bn.ID)
	_, err = db.Exec(sqlstr, bn.ID)
	if err != nil {
		return err
	}

	// set deleted
	bn._deleted = true

	return nil
}

// BillableNoteByID retrieves a row from 'AllergyNew.billable_notes' as a BillableNote.
//
// Generated from index 'billable_notes_id_pkey'.
func BillableNoteByID(db XODB, id uint) (*BillableNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, event_id, note, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.billable_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	bn := BillableNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&bn.ID, &bn.PracticeID, &bn.PatientID, &bn.EventID, &bn.Note, &bn.DateAdded, &bn.AddedBy, &bn.UpdatedBy, &bn.Updated)
	if err != nil {
		return nil, err
	}

	return &bn, nil
}
