// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// SnotTest represents a row from 'AllergyNew.snot_tests'.
type SnotTest struct {
	ID           uint           `json:"id"`            // id
	PracticeID   sql.NullInt64  `json:"practice_id"`   // practice_id
	PatientID    sql.NullInt64  `json:"patient_id"`    // patient_id
	UserID       sql.NullInt64  `json:"user_id"`       // user_id
	PatientTaken sql.NullInt64  `json:"patient_taken"` // patient_taken
	DateTaken    mysql.NullTime `json:"date_taken"`    // date_taken
	Snot1        sql.NullInt64  `json:"snot1"`         // snot1
	Snot2        sql.NullInt64  `json:"snot2"`         // snot2
	Snot3        sql.NullInt64  `json:"snot3"`         // snot3
	Snot4        sql.NullInt64  `json:"snot4"`         // snot4
	Snot5        sql.NullInt64  `json:"snot5"`         // snot5
	Snot6        sql.NullInt64  `json:"snot6"`         // snot6
	Snot7        sql.NullInt64  `json:"snot7"`         // snot7
	Snot8        sql.NullInt64  `json:"snot8"`         // snot8
	Snot9        sql.NullInt64  `json:"snot9"`         // snot9
	Snot10       sql.NullInt64  `json:"snot10"`        // snot10
	Snot11       sql.NullInt64  `json:"snot11"`        // snot11
	Snot12       sql.NullInt64  `json:"snot12"`        // snot12
	Snot13       sql.NullInt64  `json:"snot13"`        // snot13
	Snot14       sql.NullInt64  `json:"snot14"`        // snot14
	Snot15       sql.NullInt64  `json:"snot15"`        // snot15
	Snot16       sql.NullInt64  `json:"snot16"`        // snot16
	Snot17       sql.NullInt64  `json:"snot17"`        // snot17
	Snot18       sql.NullInt64  `json:"snot18"`        // snot18
	Snot19       sql.NullInt64  `json:"snot19"`        // snot19
	Snot20       sql.NullInt64  `json:"snot20"`        // snot20
	Snot21       sql.NullInt64  `json:"snot21"`        // snot21
	Snot22       sql.NullInt64  `json:"snot22"`        // snot22
	Important1   sql.NullInt64  `json:"important1"`    // important1
	Important2   sql.NullInt64  `json:"important2"`    // important2
	Important3   sql.NullInt64  `json:"important3"`    // important3
	Important4   sql.NullInt64  `json:"important4"`    // important4
	Important5   sql.NullInt64  `json:"important5"`    // important5
	UpdatedBy    sql.NullInt64  `json:"updated_by"`    // updated_by
	Updated      time.Time      `json:"updated"`       // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SnotTest exists in the database.
func (st *SnotTest) Exists() bool {
	return st._exists
}

// Deleted provides information if the SnotTest has been deleted from the database.
func (st *SnotTest) Deleted() bool {
	return st._deleted
}

// Insert inserts the SnotTest to the database.
func (st *SnotTest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if st._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.snot_tests (` +
		`practice_id, patient_id, user_id, patient_taken, date_taken, snot1, snot2, snot3, snot4, snot5, snot6, snot7, snot8, snot9, snot10, snot11, snot12, snot13, snot14, snot15, snot16, snot17, snot18, snot19, snot20, snot21, snot22, important1, important2, important3, important4, important5, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, st.PracticeID, st.PatientID, st.UserID, st.PatientTaken, st.DateTaken, st.Snot1, st.Snot2, st.Snot3, st.Snot4, st.Snot5, st.Snot6, st.Snot7, st.Snot8, st.Snot9, st.Snot10, st.Snot11, st.Snot12, st.Snot13, st.Snot14, st.Snot15, st.Snot16, st.Snot17, st.Snot18, st.Snot19, st.Snot20, st.Snot21, st.Snot22, st.Important1, st.Important2, st.Important3, st.Important4, st.Important5, st.UpdatedBy, st.Updated)
	res, err := db.Exec(sqlstr, st.PracticeID, st.PatientID, st.UserID, st.PatientTaken, st.DateTaken, st.Snot1, st.Snot2, st.Snot3, st.Snot4, st.Snot5, st.Snot6, st.Snot7, st.Snot8, st.Snot9, st.Snot10, st.Snot11, st.Snot12, st.Snot13, st.Snot14, st.Snot15, st.Snot16, st.Snot17, st.Snot18, st.Snot19, st.Snot20, st.Snot21, st.Snot22, st.Important1, st.Important2, st.Important3, st.Important4, st.Important5, st.UpdatedBy, st.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	st.ID = uint(id)
	st._exists = true

	return nil
}

// Update updates the SnotTest in the database.
func (st *SnotTest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !st._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if st._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.snot_tests SET ` +
		`practice_id = ?, patient_id = ?, user_id = ?, patient_taken = ?, date_taken = ?, snot1 = ?, snot2 = ?, snot3 = ?, snot4 = ?, snot5 = ?, snot6 = ?, snot7 = ?, snot8 = ?, snot9 = ?, snot10 = ?, snot11 = ?, snot12 = ?, snot13 = ?, snot14 = ?, snot15 = ?, snot16 = ?, snot17 = ?, snot18 = ?, snot19 = ?, snot20 = ?, snot21 = ?, snot22 = ?, important1 = ?, important2 = ?, important3 = ?, important4 = ?, important5 = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, st.PracticeID, st.PatientID, st.UserID, st.PatientTaken, st.DateTaken, st.Snot1, st.Snot2, st.Snot3, st.Snot4, st.Snot5, st.Snot6, st.Snot7, st.Snot8, st.Snot9, st.Snot10, st.Snot11, st.Snot12, st.Snot13, st.Snot14, st.Snot15, st.Snot16, st.Snot17, st.Snot18, st.Snot19, st.Snot20, st.Snot21, st.Snot22, st.Important1, st.Important2, st.Important3, st.Important4, st.Important5, st.UpdatedBy, st.Updated, st.ID)
	_, err = db.Exec(sqlstr, st.PracticeID, st.PatientID, st.UserID, st.PatientTaken, st.DateTaken, st.Snot1, st.Snot2, st.Snot3, st.Snot4, st.Snot5, st.Snot6, st.Snot7, st.Snot8, st.Snot9, st.Snot10, st.Snot11, st.Snot12, st.Snot13, st.Snot14, st.Snot15, st.Snot16, st.Snot17, st.Snot18, st.Snot19, st.Snot20, st.Snot21, st.Snot22, st.Important1, st.Important2, st.Important3, st.Important4, st.Important5, st.UpdatedBy, st.Updated, st.ID)
	return err
}

// Save saves the SnotTest to the database.
func (st *SnotTest) Save(db XODB) error {
	if st.Exists() {
		return st.Update(db)
	}

	return st.Insert(db)
}

// Delete deletes the SnotTest from the database.
func (st *SnotTest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !st._exists {
		return nil
	}

	// if deleted, bail
	if st._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.snot_tests WHERE id = ?`

	// run query
	XOLog(sqlstr, st.ID)
	_, err = db.Exec(sqlstr, st.ID)
	if err != nil {
		return err
	}

	// set deleted
	st._deleted = true

	return nil
}

// Patient returns the Patient associated with the SnotTest's PatientID (patient_id).
//
// Generated from foreign key 'snot_tests_patient'.
func (st *SnotTest) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(st.PatientID.Int64))
}

// Practice returns the Practice associated with the SnotTest's PracticeID (practice_id).
//
// Generated from foreign key 'snot_tests_practice'.
func (st *SnotTest) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(st.PracticeID.Int64))
}

// UserByUpdatedBy returns the User associated with the SnotTest's UpdatedBy (updated_by).
//
// Generated from foreign key 'snot_tests_updated'.
func (st *SnotTest) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(st.UpdatedBy.Int64))
}

// UserByUserID returns the User associated with the SnotTest's UserID (user_id).
//
// Generated from foreign key 'snot_tests_user'.
func (st *SnotTest) UserByUserID(db XODB) (*User, error) {
	return UserByID(db, uint(st.UserID.Int64))
}

// SnotTestsByPatientID retrieves a row from 'AllergyNew.snot_tests' as a SnotTest.
//
// Generated from index 'Patients'.
func SnotTestsByPatientID(db XODB, patientID sql.NullInt64) ([]*SnotTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, user_id, patient_taken, date_taken, snot1, snot2, snot3, snot4, snot5, snot6, snot7, snot8, snot9, snot10, snot11, snot12, snot13, snot14, snot15, snot16, snot17, snot18, snot19, snot20, snot21, snot22, important1, important2, important3, important4, important5, updated_by, updated ` +
		`FROM AllergyNew.snot_tests ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SnotTest{}
	for q.Next() {
		st := SnotTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&st.ID, &st.PracticeID, &st.PatientID, &st.UserID, &st.PatientTaken, &st.DateTaken, &st.Snot1, &st.Snot2, &st.Snot3, &st.Snot4, &st.Snot5, &st.Snot6, &st.Snot7, &st.Snot8, &st.Snot9, &st.Snot10, &st.Snot11, &st.Snot12, &st.Snot13, &st.Snot14, &st.Snot15, &st.Snot16, &st.Snot17, &st.Snot18, &st.Snot19, &st.Snot20, &st.Snot21, &st.Snot22, &st.Important1, &st.Important2, &st.Important3, &st.Important4, &st.Important5, &st.UpdatedBy, &st.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &st)
	}

	return res, nil
}

// SnotTestsByUserID retrieves a row from 'AllergyNew.snot_tests' as a SnotTest.
//
// Generated from index 'Users'.
func SnotTestsByUserID(db XODB, userID sql.NullInt64) ([]*SnotTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, user_id, patient_taken, date_taken, snot1, snot2, snot3, snot4, snot5, snot6, snot7, snot8, snot9, snot10, snot11, snot12, snot13, snot14, snot15, snot16, snot17, snot18, snot19, snot20, snot21, snot22, important1, important2, important3, important4, important5, updated_by, updated ` +
		`FROM AllergyNew.snot_tests ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SnotTest{}
	for q.Next() {
		st := SnotTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&st.ID, &st.PracticeID, &st.PatientID, &st.UserID, &st.PatientTaken, &st.DateTaken, &st.Snot1, &st.Snot2, &st.Snot3, &st.Snot4, &st.Snot5, &st.Snot6, &st.Snot7, &st.Snot8, &st.Snot9, &st.Snot10, &st.Snot11, &st.Snot12, &st.Snot13, &st.Snot14, &st.Snot15, &st.Snot16, &st.Snot17, &st.Snot18, &st.Snot19, &st.Snot20, &st.Snot21, &st.Snot22, &st.Important1, &st.Important2, &st.Important3, &st.Important4, &st.Important5, &st.UpdatedBy, &st.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &st)
	}

	return res, nil
}

// SnotTestByID retrieves a row from 'AllergyNew.snot_tests' as a SnotTest.
//
// Generated from index 'snot_tests_id_pkey'.
func SnotTestByID(db XODB, id uint) (*SnotTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, user_id, patient_taken, date_taken, snot1, snot2, snot3, snot4, snot5, snot6, snot7, snot8, snot9, snot10, snot11, snot12, snot13, snot14, snot15, snot16, snot17, snot18, snot19, snot20, snot21, snot22, important1, important2, important3, important4, important5, updated_by, updated ` +
		`FROM AllergyNew.snot_tests ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	st := SnotTest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&st.ID, &st.PracticeID, &st.PatientID, &st.UserID, &st.PatientTaken, &st.DateTaken, &st.Snot1, &st.Snot2, &st.Snot3, &st.Snot4, &st.Snot5, &st.Snot6, &st.Snot7, &st.Snot8, &st.Snot9, &st.Snot10, &st.Snot11, &st.Snot12, &st.Snot13, &st.Snot14, &st.Snot15, &st.Snot16, &st.Snot17, &st.Snot18, &st.Snot19, &st.Snot20, &st.Snot21, &st.Snot22, &st.Important1, &st.Important2, &st.Important3, &st.Important4, &st.Important5, &st.UpdatedBy, &st.Updated)
	if err != nil {
		return nil, err
	}

	return &st, nil
}

// SnotTestsByPracticeID retrieves a row from 'AllergyNew.snot_tests' as a SnotTest.
//
// Generated from index 'snot_tests_practice'.
func SnotTestsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*SnotTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, user_id, patient_taken, date_taken, snot1, snot2, snot3, snot4, snot5, snot6, snot7, snot8, snot9, snot10, snot11, snot12, snot13, snot14, snot15, snot16, snot17, snot18, snot19, snot20, snot21, snot22, important1, important2, important3, important4, important5, updated_by, updated ` +
		`FROM AllergyNew.snot_tests ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SnotTest{}
	for q.Next() {
		st := SnotTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&st.ID, &st.PracticeID, &st.PatientID, &st.UserID, &st.PatientTaken, &st.DateTaken, &st.Snot1, &st.Snot2, &st.Snot3, &st.Snot4, &st.Snot5, &st.Snot6, &st.Snot7, &st.Snot8, &st.Snot9, &st.Snot10, &st.Snot11, &st.Snot12, &st.Snot13, &st.Snot14, &st.Snot15, &st.Snot16, &st.Snot17, &st.Snot18, &st.Snot19, &st.Snot20, &st.Snot21, &st.Snot22, &st.Important1, &st.Important2, &st.Important3, &st.Important4, &st.Important5, &st.UpdatedBy, &st.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &st)
	}

	return res, nil
}

// SnotTestsByUpdatedBy retrieves a row from 'AllergyNew.snot_tests' as a SnotTest.
//
// Generated from index 'snot_tests_updated'.
func SnotTestsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*SnotTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, user_id, patient_taken, date_taken, snot1, snot2, snot3, snot4, snot5, snot6, snot7, snot8, snot9, snot10, snot11, snot12, snot13, snot14, snot15, snot16, snot17, snot18, snot19, snot20, snot21, snot22, important1, important2, important3, important4, important5, updated_by, updated ` +
		`FROM AllergyNew.snot_tests ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SnotTest{}
	for q.Next() {
		st := SnotTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&st.ID, &st.PracticeID, &st.PatientID, &st.UserID, &st.PatientTaken, &st.DateTaken, &st.Snot1, &st.Snot2, &st.Snot3, &st.Snot4, &st.Snot5, &st.Snot6, &st.Snot7, &st.Snot8, &st.Snot9, &st.Snot10, &st.Snot11, &st.Snot12, &st.Snot13, &st.Snot14, &st.Snot15, &st.Snot16, &st.Snot17, &st.Snot18, &st.Snot19, &st.Snot20, &st.Snot21, &st.Snot22, &st.Important1, &st.Important2, &st.Important3, &st.Important4, &st.Important5, &st.UpdatedBy, &st.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &st)
	}

	return res, nil
}
