// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// GwAPIError represents a row from 'AllergyNew.gw_api_errors'.
type GwAPIError struct {
	ID         uint           `json:"id"`          // id
	UserID     sql.NullInt64  `json:"user_id"`     // user_id
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	PatientID  sql.NullInt64  `json:"patient_id"`  // patient_id
	URL        sql.NullString `json:"url"`         // url
	Data       sql.NullString `json:"data"`        // data
	Response   sql.NullString `json:"response"`    // response
	Notes      sql.NullString `json:"notes"`       // notes
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GwAPIError exists in the database.
func (gae *GwAPIError) Exists() bool {
	return gae._exists
}

// Deleted provides information if the GwAPIError has been deleted from the database.
func (gae *GwAPIError) Deleted() bool {
	return gae._deleted
}

// Insert inserts the GwAPIError to the database.
func (gae *GwAPIError) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gae._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.gw_api_errors (` +
		`user_id, practice_id, patient_id, url, data, response, notes, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gae.UserID, gae.PracticeID, gae.PatientID, gae.URL, gae.Data, gae.Response, gae.Notes, gae.UpdatedBy, gae.Updated)
	res, err := db.Exec(sqlstr, gae.UserID, gae.PracticeID, gae.PatientID, gae.URL, gae.Data, gae.Response, gae.Notes, gae.UpdatedBy, gae.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gae.ID = uint(id)
	gae._exists = true

	return nil
}

// Update updates the GwAPIError in the database.
func (gae *GwAPIError) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gae._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gae._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.gw_api_errors SET ` +
		`user_id = ?, practice_id = ?, patient_id = ?, url = ?, data = ?, response = ?, notes = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, gae.UserID, gae.PracticeID, gae.PatientID, gae.URL, gae.Data, gae.Response, gae.Notes, gae.UpdatedBy, gae.Updated, gae.ID)
	_, err = db.Exec(sqlstr, gae.UserID, gae.PracticeID, gae.PatientID, gae.URL, gae.Data, gae.Response, gae.Notes, gae.UpdatedBy, gae.Updated, gae.ID)
	return err
}

// Save saves the GwAPIError to the database.
func (gae *GwAPIError) Save(db XODB) error {
	if gae.Exists() {
		return gae.Update(db)
	}

	return gae.Insert(db)
}

// Delete deletes the GwAPIError from the database.
func (gae *GwAPIError) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gae._exists {
		return nil
	}

	// if deleted, bail
	if gae._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.gw_api_errors WHERE id = ?`

	// run query
	XOLog(sqlstr, gae.ID)
	_, err = db.Exec(sqlstr, gae.ID)
	if err != nil {
		return err
	}

	// set deleted
	gae._deleted = true

	return nil
}

// GwAPIErrorsByPatientID retrieves a row from 'AllergyNew.gw_api_errors' as a GwAPIError.
//
// Generated from index 'Patients'.
func GwAPIErrorsByPatientID(db XODB, patientID sql.NullInt64) ([]*GwAPIError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, practice_id, patient_id, url, data, response, notes, updated_by, updated ` +
		`FROM AllergyNew.gw_api_errors ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GwAPIError{}
	for q.Next() {
		gae := GwAPIError{
			_exists: true,
		}

		// scan
		err = q.Scan(&gae.ID, &gae.UserID, &gae.PracticeID, &gae.PatientID, &gae.URL, &gae.Data, &gae.Response, &gae.Notes, &gae.UpdatedBy, &gae.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &gae)
	}

	return res, nil
}

// GwAPIErrorsByPracticeID retrieves a row from 'AllergyNew.gw_api_errors' as a GwAPIError.
//
// Generated from index 'Practices'.
func GwAPIErrorsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*GwAPIError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, practice_id, patient_id, url, data, response, notes, updated_by, updated ` +
		`FROM AllergyNew.gw_api_errors ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GwAPIError{}
	for q.Next() {
		gae := GwAPIError{
			_exists: true,
		}

		// scan
		err = q.Scan(&gae.ID, &gae.UserID, &gae.PracticeID, &gae.PatientID, &gae.URL, &gae.Data, &gae.Response, &gae.Notes, &gae.UpdatedBy, &gae.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &gae)
	}

	return res, nil
}

// GwAPIErrorsByUserID retrieves a row from 'AllergyNew.gw_api_errors' as a GwAPIError.
//
// Generated from index 'Users'.
func GwAPIErrorsByUserID(db XODB, userID sql.NullInt64) ([]*GwAPIError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, practice_id, patient_id, url, data, response, notes, updated_by, updated ` +
		`FROM AllergyNew.gw_api_errors ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GwAPIError{}
	for q.Next() {
		gae := GwAPIError{
			_exists: true,
		}

		// scan
		err = q.Scan(&gae.ID, &gae.UserID, &gae.PracticeID, &gae.PatientID, &gae.URL, &gae.Data, &gae.Response, &gae.Notes, &gae.UpdatedBy, &gae.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &gae)
	}

	return res, nil
}

// GwAPIErrorByID retrieves a row from 'AllergyNew.gw_api_errors' as a GwAPIError.
//
// Generated from index 'gw_api_errors_id_pkey'.
func GwAPIErrorByID(db XODB, id uint) (*GwAPIError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, practice_id, patient_id, url, data, response, notes, updated_by, updated ` +
		`FROM AllergyNew.gw_api_errors ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	gae := GwAPIError{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&gae.ID, &gae.UserID, &gae.PracticeID, &gae.PatientID, &gae.URL, &gae.Data, &gae.Response, &gae.Notes, &gae.UpdatedBy, &gae.Updated)
	if err != nil {
		return nil, err
	}

	return &gae, nil
}
