// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PatientVisitsSystemicReactionsSymptom represents a row from 'AllergyNew.patient_visits_systemic_reactions_symptoms'.
type PatientVisitsSystemicReactionsSymptom struct {
	ID         uint          `json:"id"`          // id
	ReactionID sql.NullInt64 `json:"reaction_id"` // reaction_id
	SymptomID  sql.NullInt64 `json:"symptom_id"`  // symptom_id
	UpdatedBy  sql.NullInt64 `json:"updated_by"`  // updated_by
	Updated    time.Time     `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientVisitsSystemicReactionsSymptom exists in the database.
func (pvsrs *PatientVisitsSystemicReactionsSymptom) Exists() bool {
	return pvsrs._exists
}

// Deleted provides information if the PatientVisitsSystemicReactionsSymptom has been deleted from the database.
func (pvsrs *PatientVisitsSystemicReactionsSymptom) Deleted() bool {
	return pvsrs._deleted
}

// Insert inserts the PatientVisitsSystemicReactionsSymptom to the database.
func (pvsrs *PatientVisitsSystemicReactionsSymptom) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pvsrs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_visits_systemic_reactions_symptoms (` +
		`reaction_id, symptom_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pvsrs.ReactionID, pvsrs.SymptomID, pvsrs.UpdatedBy, pvsrs.Updated)
	res, err := db.Exec(sqlstr, pvsrs.ReactionID, pvsrs.SymptomID, pvsrs.UpdatedBy, pvsrs.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pvsrs.ID = uint(id)
	pvsrs._exists = true

	return nil
}

// Update updates the PatientVisitsSystemicReactionsSymptom in the database.
func (pvsrs *PatientVisitsSystemicReactionsSymptom) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvsrs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pvsrs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_visits_systemic_reactions_symptoms SET ` +
		`reaction_id = ?, symptom_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pvsrs.ReactionID, pvsrs.SymptomID, pvsrs.UpdatedBy, pvsrs.Updated, pvsrs.ID)
	_, err = db.Exec(sqlstr, pvsrs.ReactionID, pvsrs.SymptomID, pvsrs.UpdatedBy, pvsrs.Updated, pvsrs.ID)
	return err
}

// Save saves the PatientVisitsSystemicReactionsSymptom to the database.
func (pvsrs *PatientVisitsSystemicReactionsSymptom) Save(db XODB) error {
	if pvsrs.Exists() {
		return pvsrs.Update(db)
	}

	return pvsrs.Insert(db)
}

// Delete deletes the PatientVisitsSystemicReactionsSymptom from the database.
func (pvsrs *PatientVisitsSystemicReactionsSymptom) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvsrs._exists {
		return nil
	}

	// if deleted, bail
	if pvsrs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_visits_systemic_reactions_symptoms WHERE id = ?`

	// run query
	XOLog(sqlstr, pvsrs.ID)
	_, err = db.Exec(sqlstr, pvsrs.ID)
	if err != nil {
		return err
	}

	// set deleted
	pvsrs._deleted = true

	return nil
}

// PatientVisitsSystemicReaction returns the PatientVisitsSystemicReaction associated with the PatientVisitsSystemicReactionsSymptom's ReactionID (reaction_id).
//
// Generated from foreign key 'patient_visits_systemic_reactions_symptoms_reaction'.
func (pvsrs *PatientVisitsSystemicReactionsSymptom) PatientVisitsSystemicReaction(db XODB) (*PatientVisitsSystemicReaction, error) {
	return PatientVisitsSystemicReactionByID(db, uint(pvsrs.ReactionID.Int64))
}

// PatientSystemicReactionsSymptom returns the PatientSystemicReactionsSymptom associated with the PatientVisitsSystemicReactionsSymptom's SymptomID (symptom_id).
//
// Generated from foreign key 'patient_visits_systemic_reactions_symptoms_symptom'.
func (pvsrs *PatientVisitsSystemicReactionsSymptom) PatientSystemicReactionsSymptom(db XODB) (*PatientSystemicReactionsSymptom, error) {
	return PatientSystemicReactionsSymptomByID(db, uint(pvsrs.SymptomID.Int64))
}

// PatientVisitsSystemicReactionsSymptomsByReactionID retrieves a row from 'AllergyNew.patient_visits_systemic_reactions_symptoms' as a PatientVisitsSystemicReactionsSymptom.
//
// Generated from index 'Reactions'.
func PatientVisitsSystemicReactionsSymptomsByReactionID(db XODB, reactionID sql.NullInt64) ([]*PatientVisitsSystemicReactionsSymptom, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, reaction_id, symptom_id, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_systemic_reactions_symptoms ` +
		`WHERE reaction_id = ?`

	// run query
	XOLog(sqlstr, reactionID)
	q, err := db.Query(sqlstr, reactionID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsSystemicReactionsSymptom{}
	for q.Next() {
		pvsrs := PatientVisitsSystemicReactionsSymptom{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvsrs.ID, &pvsrs.ReactionID, &pvsrs.SymptomID, &pvsrs.UpdatedBy, &pvsrs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvsrs)
	}

	return res, nil
}

// PatientVisitsSystemicReactionsSymptomByID retrieves a row from 'AllergyNew.patient_visits_systemic_reactions_symptoms' as a PatientVisitsSystemicReactionsSymptom.
//
// Generated from index 'patient_visits_systemic_reactions_symptoms_id_pkey'.
func PatientVisitsSystemicReactionsSymptomByID(db XODB, id uint) (*PatientVisitsSystemicReactionsSymptom, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, reaction_id, symptom_id, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_systemic_reactions_symptoms ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pvsrs := PatientVisitsSystemicReactionsSymptom{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pvsrs.ID, &pvsrs.ReactionID, &pvsrs.SymptomID, &pvsrs.UpdatedBy, &pvsrs.Updated)
	if err != nil {
		return nil, err
	}

	return &pvsrs, nil
}

// PatientVisitsSystemicReactionsSymptomsBySymptomID retrieves a row from 'AllergyNew.patient_visits_systemic_reactions_symptoms' as a PatientVisitsSystemicReactionsSymptom.
//
// Generated from index 'patient_visits_systemic_reactions_symptoms_symptom'.
func PatientVisitsSystemicReactionsSymptomsBySymptomID(db XODB, symptomID sql.NullInt64) ([]*PatientVisitsSystemicReactionsSymptom, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, reaction_id, symptom_id, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_systemic_reactions_symptoms ` +
		`WHERE symptom_id = ?`

	// run query
	XOLog(sqlstr, symptomID)
	q, err := db.Query(sqlstr, symptomID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsSystemicReactionsSymptom{}
	for q.Next() {
		pvsrs := PatientVisitsSystemicReactionsSymptom{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvsrs.ID, &pvsrs.ReactionID, &pvsrs.SymptomID, &pvsrs.UpdatedBy, &pvsrs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvsrs)
	}

	return res, nil
}
