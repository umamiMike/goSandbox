// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PracticeModule represents a row from 'AllergyNew.practice_modules'.
type PracticeModule struct {
	ID         uint           `json:"id"`          // id
	PracticeID int            `json:"practice_id"` // practice_id
	ModuleID   int            `json:"module_id"`   // module_id
	Name       sql.NullString `json:"name"`        // name
	Bgcolor    sql.NullString `json:"bgcolor"`     // bgcolor
	Priority   sql.NullInt64  `json:"priority"`    // priority
	Enabled    sql.NullInt64  `json:"enabled"`     // enabled
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PracticeModule exists in the database.
func (pm *PracticeModule) Exists() bool {
	return pm._exists
}

// Deleted provides information if the PracticeModule has been deleted from the database.
func (pm *PracticeModule) Deleted() bool {
	return pm._deleted
}

// Insert inserts the PracticeModule to the database.
func (pm *PracticeModule) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practice_modules (` +
		`practice_id, module_id, name, bgcolor, priority, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pm.PracticeID, pm.ModuleID, pm.Name, pm.Bgcolor, pm.Priority, pm.Enabled, pm.UpdatedBy, pm.Updated)
	res, err := db.Exec(sqlstr, pm.PracticeID, pm.ModuleID, pm.Name, pm.Bgcolor, pm.Priority, pm.Enabled, pm.UpdatedBy, pm.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pm.ID = uint(id)
	pm._exists = true

	return nil
}

// Update updates the PracticeModule in the database.
func (pm *PracticeModule) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practice_modules SET ` +
		`practice_id = ?, module_id = ?, name = ?, bgcolor = ?, priority = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pm.PracticeID, pm.ModuleID, pm.Name, pm.Bgcolor, pm.Priority, pm.Enabled, pm.UpdatedBy, pm.Updated, pm.ID)
	_, err = db.Exec(sqlstr, pm.PracticeID, pm.ModuleID, pm.Name, pm.Bgcolor, pm.Priority, pm.Enabled, pm.UpdatedBy, pm.Updated, pm.ID)
	return err
}

// Save saves the PracticeModule to the database.
func (pm *PracticeModule) Save(db XODB) error {
	if pm.Exists() {
		return pm.Update(db)
	}

	return pm.Insert(db)
}

// Delete deletes the PracticeModule from the database.
func (pm *PracticeModule) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return nil
	}

	// if deleted, bail
	if pm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practice_modules WHERE id = ?`

	// run query
	XOLog(sqlstr, pm.ID)
	_, err = db.Exec(sqlstr, pm.ID)
	if err != nil {
		return err
	}

	// set deleted
	pm._deleted = true

	return nil
}

// PracticeModulesByPracticeIDModuleID retrieves a row from 'AllergyNew.practice_modules' as a PracticeModule.
//
// Generated from index 'practice_module'.
func PracticeModulesByPracticeIDModuleID(db XODB, practiceID int, moduleID int) ([]*PracticeModule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, module_id, name, bgcolor, priority, enabled, updated_by, updated ` +
		`FROM AllergyNew.practice_modules ` +
		`WHERE practice_id = ? AND module_id = ?`

	// run query
	XOLog(sqlstr, practiceID, moduleID)
	q, err := db.Query(sqlstr, practiceID, moduleID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticeModule{}
	for q.Next() {
		pm := PracticeModule{
			_exists: true,
		}

		// scan
		err = q.Scan(&pm.ID, &pm.PracticeID, &pm.ModuleID, &pm.Name, &pm.Bgcolor, &pm.Priority, &pm.Enabled, &pm.UpdatedBy, &pm.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pm)
	}

	return res, nil
}

// PracticeModuleByID retrieves a row from 'AllergyNew.practice_modules' as a PracticeModule.
//
// Generated from index 'practice_modules_id_pkey'.
func PracticeModuleByID(db XODB, id uint) (*PracticeModule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, module_id, name, bgcolor, priority, enabled, updated_by, updated ` +
		`FROM AllergyNew.practice_modules ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pm := PracticeModule{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pm.ID, &pm.PracticeID, &pm.ModuleID, &pm.Name, &pm.Bgcolor, &pm.Priority, &pm.Enabled, &pm.UpdatedBy, &pm.Updated)
	if err != nil {
		return nil, err
	}

	return &pm, nil
}
