// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// FormulaAntigen represents a row from 'AllergyNew.formula_antigens'.
type FormulaAntigen struct {
	ID              uint           `json:"id"`               // id
	FormulaID       sql.NullInt64  `json:"formula_id"`       // formula_id
	VialID          sql.NullInt64  `json:"vial_id"`          // vial_id
	AntigenID       sql.NullInt64  `json:"antigen_id"`       // antigen_id
	DateAdded       mysql.NullTime `json:"date_added"`       // date_added
	ListOrder       sql.NullInt64  `json:"list_order"`       // list_order
	AntigenDose     float32        `json:"antigen_dose"`     // antigen_dose
	AntigenStrength sql.NullInt64  `json:"antigen_strength"` // antigen_strength
	OriginalAntigen int8           `json:"original_antigen"` // original_antigen
	Active          int8           `json:"active"`           // active
	UpdatedBy       sql.NullInt64  `json:"updated_by"`       // updated_by
	Updated         time.Time      `json:"updated"`          // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FormulaAntigen exists in the database.
func (fa *FormulaAntigen) Exists() bool {
	return fa._exists
}

// Deleted provides information if the FormulaAntigen has been deleted from the database.
func (fa *FormulaAntigen) Deleted() bool {
	return fa._deleted
}

// Insert inserts the FormulaAntigen to the database.
func (fa *FormulaAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.formula_antigens (` +
		`formula_id, vial_id, antigen_id, date_added, list_order, antigen_dose, antigen_strength, original_antigen, active, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fa.FormulaID, fa.VialID, fa.AntigenID, fa.DateAdded, fa.ListOrder, fa.AntigenDose, fa.AntigenStrength, fa.OriginalAntigen, fa.Active, fa.UpdatedBy, fa.Updated)
	res, err := db.Exec(sqlstr, fa.FormulaID, fa.VialID, fa.AntigenID, fa.DateAdded, fa.ListOrder, fa.AntigenDose, fa.AntigenStrength, fa.OriginalAntigen, fa.Active, fa.UpdatedBy, fa.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fa.ID = uint(id)
	fa._exists = true

	return nil
}

// Update updates the FormulaAntigen in the database.
func (fa *FormulaAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.formula_antigens SET ` +
		`formula_id = ?, vial_id = ?, antigen_id = ?, date_added = ?, list_order = ?, antigen_dose = ?, antigen_strength = ?, original_antigen = ?, active = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, fa.FormulaID, fa.VialID, fa.AntigenID, fa.DateAdded, fa.ListOrder, fa.AntigenDose, fa.AntigenStrength, fa.OriginalAntigen, fa.Active, fa.UpdatedBy, fa.Updated, fa.ID)
	_, err = db.Exec(sqlstr, fa.FormulaID, fa.VialID, fa.AntigenID, fa.DateAdded, fa.ListOrder, fa.AntigenDose, fa.AntigenStrength, fa.OriginalAntigen, fa.Active, fa.UpdatedBy, fa.Updated, fa.ID)
	return err
}

// Save saves the FormulaAntigen to the database.
func (fa *FormulaAntigen) Save(db XODB) error {
	if fa.Exists() {
		return fa.Update(db)
	}

	return fa.Insert(db)
}

// Delete deletes the FormulaAntigen from the database.
func (fa *FormulaAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fa._exists {
		return nil
	}

	// if deleted, bail
	if fa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.formula_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, fa.ID)
	_, err = db.Exec(sqlstr, fa.ID)
	if err != nil {
		return err
	}

	// set deleted
	fa._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the FormulaAntigen's AntigenID (antigen_id).
//
// Generated from foreign key 'formula_antigens_antigen'.
func (fa *FormulaAntigen) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(fa.AntigenID.Int64))
}

// Formula returns the Formula associated with the FormulaAntigen's FormulaID (formula_id).
//
// Generated from foreign key 'formula_antigens_formula'.
func (fa *FormulaAntigen) Formula(db XODB) (*Formula, error) {
	return FormulaByID(db, uint(fa.FormulaID.Int64))
}

// User returns the User associated with the FormulaAntigen's UpdatedBy (updated_by).
//
// Generated from foreign key 'formula_antigens_updated'.
func (fa *FormulaAntigen) User(db XODB) (*User, error) {
	return UserByID(db, uint(fa.UpdatedBy.Int64))
}

// FormulaVial returns the FormulaVial associated with the FormulaAntigen's VialID (vial_id).
//
// Generated from foreign key 'formula_antigens_vial'.
func (fa *FormulaAntigen) FormulaVial(db XODB) (*FormulaVial, error) {
	return FormulaVialByID(db, uint(fa.VialID.Int64))
}

// FormulaAntigensByAntigenID retrieves a row from 'AllergyNew.formula_antigens' as a FormulaAntigen.
//
// Generated from index 'Antigens'.
func FormulaAntigensByAntigenID(db XODB, antigenID sql.NullInt64) ([]*FormulaAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, vial_id, antigen_id, date_added, list_order, antigen_dose, antigen_strength, original_antigen, active, updated_by, updated ` +
		`FROM AllergyNew.formula_antigens ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaAntigen{}
	for q.Next() {
		fa := FormulaAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&fa.ID, &fa.FormulaID, &fa.VialID, &fa.AntigenID, &fa.DateAdded, &fa.ListOrder, &fa.AntigenDose, &fa.AntigenStrength, &fa.OriginalAntigen, &fa.Active, &fa.UpdatedBy, &fa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fa)
	}

	return res, nil
}

// FormulaAntigensByFormulaID retrieves a row from 'AllergyNew.formula_antigens' as a FormulaAntigen.
//
// Generated from index 'Formulas'.
func FormulaAntigensByFormulaID(db XODB, formulaID sql.NullInt64) ([]*FormulaAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, vial_id, antigen_id, date_added, list_order, antigen_dose, antigen_strength, original_antigen, active, updated_by, updated ` +
		`FROM AllergyNew.formula_antigens ` +
		`WHERE formula_id = ?`

	// run query
	XOLog(sqlstr, formulaID)
	q, err := db.Query(sqlstr, formulaID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaAntigen{}
	for q.Next() {
		fa := FormulaAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&fa.ID, &fa.FormulaID, &fa.VialID, &fa.AntigenID, &fa.DateAdded, &fa.ListOrder, &fa.AntigenDose, &fa.AntigenStrength, &fa.OriginalAntigen, &fa.Active, &fa.UpdatedBy, &fa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fa)
	}

	return res, nil
}

// FormulaAntigensByVialID retrieves a row from 'AllergyNew.formula_antigens' as a FormulaAntigen.
//
// Generated from index 'Vials'.
func FormulaAntigensByVialID(db XODB, vialID sql.NullInt64) ([]*FormulaAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, vial_id, antigen_id, date_added, list_order, antigen_dose, antigen_strength, original_antigen, active, updated_by, updated ` +
		`FROM AllergyNew.formula_antigens ` +
		`WHERE vial_id = ?`

	// run query
	XOLog(sqlstr, vialID)
	q, err := db.Query(sqlstr, vialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaAntigen{}
	for q.Next() {
		fa := FormulaAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&fa.ID, &fa.FormulaID, &fa.VialID, &fa.AntigenID, &fa.DateAdded, &fa.ListOrder, &fa.AntigenDose, &fa.AntigenStrength, &fa.OriginalAntigen, &fa.Active, &fa.UpdatedBy, &fa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fa)
	}

	return res, nil
}

// FormulaAntigenByID retrieves a row from 'AllergyNew.formula_antigens' as a FormulaAntigen.
//
// Generated from index 'formula_antigens_id_pkey'.
func FormulaAntigenByID(db XODB, id uint) (*FormulaAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, vial_id, antigen_id, date_added, list_order, antigen_dose, antigen_strength, original_antigen, active, updated_by, updated ` +
		`FROM AllergyNew.formula_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fa := FormulaAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fa.ID, &fa.FormulaID, &fa.VialID, &fa.AntigenID, &fa.DateAdded, &fa.ListOrder, &fa.AntigenDose, &fa.AntigenStrength, &fa.OriginalAntigen, &fa.Active, &fa.UpdatedBy, &fa.Updated)
	if err != nil {
		return nil, err
	}

	return &fa, nil
}

// FormulaAntigensByUpdatedBy retrieves a row from 'AllergyNew.formula_antigens' as a FormulaAntigen.
//
// Generated from index 'formula_antigens_updated'.
func FormulaAntigensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*FormulaAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, vial_id, antigen_id, date_added, list_order, antigen_dose, antigen_strength, original_antigen, active, updated_by, updated ` +
		`FROM AllergyNew.formula_antigens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaAntigen{}
	for q.Next() {
		fa := FormulaAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&fa.ID, &fa.FormulaID, &fa.VialID, &fa.AntigenID, &fa.DateAdded, &fa.ListOrder, &fa.AntigenDose, &fa.AntigenStrength, &fa.OriginalAntigen, &fa.Active, &fa.UpdatedBy, &fa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fa)
	}

	return res, nil
}
