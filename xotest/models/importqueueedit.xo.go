// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// ImportQueueEdit represents a row from 'AllergyNew.import_queue_edits'.
type ImportQueueEdit struct {
	ID         int           `json:"id"`          // id
	PracticeID int           `json:"practice_id"` // practice_id
	PatientID  sql.NullInt64 `json:"patient_id"`  // patient_id
	RecordType string        `json:"record_type"` // record_type
	EditType   string        `json:"edit_type"`   // edit_type
	EditID     int           `json:"edit_id"`     // edit_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ImportQueueEdit exists in the database.
func (iqe *ImportQueueEdit) Exists() bool {
	return iqe._exists
}

// Deleted provides information if the ImportQueueEdit has been deleted from the database.
func (iqe *ImportQueueEdit) Deleted() bool {
	return iqe._deleted
}

// Insert inserts the ImportQueueEdit to the database.
func (iqe *ImportQueueEdit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if iqe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.import_queue_edits (` +
		`practice_id, patient_id, record_type, edit_type, edit_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, iqe.PracticeID, iqe.PatientID, iqe.RecordType, iqe.EditType, iqe.EditID)
	res, err := db.Exec(sqlstr, iqe.PracticeID, iqe.PatientID, iqe.RecordType, iqe.EditType, iqe.EditID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	iqe.ID = int(id)
	iqe._exists = true

	return nil
}

// Update updates the ImportQueueEdit in the database.
func (iqe *ImportQueueEdit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqe._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if iqe._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.import_queue_edits SET ` +
		`practice_id = ?, patient_id = ?, record_type = ?, edit_type = ?, edit_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, iqe.PracticeID, iqe.PatientID, iqe.RecordType, iqe.EditType, iqe.EditID, iqe.ID)
	_, err = db.Exec(sqlstr, iqe.PracticeID, iqe.PatientID, iqe.RecordType, iqe.EditType, iqe.EditID, iqe.ID)
	return err
}

// Save saves the ImportQueueEdit to the database.
func (iqe *ImportQueueEdit) Save(db XODB) error {
	if iqe.Exists() {
		return iqe.Update(db)
	}

	return iqe.Insert(db)
}

// Delete deletes the ImportQueueEdit from the database.
func (iqe *ImportQueueEdit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqe._exists {
		return nil
	}

	// if deleted, bail
	if iqe._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.import_queue_edits WHERE id = ?`

	// run query
	XOLog(sqlstr, iqe.ID)
	_, err = db.Exec(sqlstr, iqe.ID)
	if err != nil {
		return err
	}

	// set deleted
	iqe._deleted = true

	return nil
}

// ImportQueueEditsByEditID retrieves a row from 'AllergyNew.import_queue_edits' as a ImportQueueEdit.
//
// Generated from index 'EditIDs'.
func ImportQueueEditsByEditID(db XODB, editID int) ([]*ImportQueueEdit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, record_type, edit_type, edit_id ` +
		`FROM AllergyNew.import_queue_edits ` +
		`WHERE edit_id = ?`

	// run query
	XOLog(sqlstr, editID)
	q, err := db.Query(sqlstr, editID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ImportQueueEdit{}
	for q.Next() {
		iqe := ImportQueueEdit{
			_exists: true,
		}

		// scan
		err = q.Scan(&iqe.ID, &iqe.PracticeID, &iqe.PatientID, &iqe.RecordType, &iqe.EditType, &iqe.EditID)
		if err != nil {
			return nil, err
		}

		res = append(res, &iqe)
	}

	return res, nil
}

// ImportQueueEditsByEditType retrieves a row from 'AllergyNew.import_queue_edits' as a ImportQueueEdit.
//
// Generated from index 'EditTypes'.
func ImportQueueEditsByEditType(db XODB, editType string) ([]*ImportQueueEdit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, record_type, edit_type, edit_id ` +
		`FROM AllergyNew.import_queue_edits ` +
		`WHERE edit_type = ?`

	// run query
	XOLog(sqlstr, editType)
	q, err := db.Query(sqlstr, editType)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ImportQueueEdit{}
	for q.Next() {
		iqe := ImportQueueEdit{
			_exists: true,
		}

		// scan
		err = q.Scan(&iqe.ID, &iqe.PracticeID, &iqe.PatientID, &iqe.RecordType, &iqe.EditType, &iqe.EditID)
		if err != nil {
			return nil, err
		}

		res = append(res, &iqe)
	}

	return res, nil
}

// ImportQueueEditByID retrieves a row from 'AllergyNew.import_queue_edits' as a ImportQueueEdit.
//
// Generated from index 'import_queue_edits_id_pkey'.
func ImportQueueEditByID(db XODB, id int) (*ImportQueueEdit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, record_type, edit_type, edit_id ` +
		`FROM AllergyNew.import_queue_edits ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	iqe := ImportQueueEdit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&iqe.ID, &iqe.PracticeID, &iqe.PatientID, &iqe.RecordType, &iqe.EditType, &iqe.EditID)
	if err != nil {
		return nil, err
	}

	return &iqe, nil
}
