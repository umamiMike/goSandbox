// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// OrdersNote represents a row from 'AllergyNew.orders_notes'.
type OrdersNote struct {
	ID        uint           `json:"id"`         // id
	OrderID   sql.NullInt64  `json:"order_id"`   // order_id
	UserID    sql.NullInt64  `json:"user_id"`    // user_id
	Note      sql.NullString `json:"note"`       // note
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrdersNote exists in the database.
func (on *OrdersNote) Exists() bool {
	return on._exists
}

// Deleted provides information if the OrdersNote has been deleted from the database.
func (on *OrdersNote) Deleted() bool {
	return on._deleted
}

// Insert inserts the OrdersNote to the database.
func (on *OrdersNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if on._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.orders_notes (` +
		`order_id, user_id, note, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, on.OrderID, on.UserID, on.Note, on.UpdatedBy, on.Updated)
	res, err := db.Exec(sqlstr, on.OrderID, on.UserID, on.Note, on.UpdatedBy, on.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	on.ID = uint(id)
	on._exists = true

	return nil
}

// Update updates the OrdersNote in the database.
func (on *OrdersNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !on._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if on._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.orders_notes SET ` +
		`order_id = ?, user_id = ?, note = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, on.OrderID, on.UserID, on.Note, on.UpdatedBy, on.Updated, on.ID)
	_, err = db.Exec(sqlstr, on.OrderID, on.UserID, on.Note, on.UpdatedBy, on.Updated, on.ID)
	return err
}

// Save saves the OrdersNote to the database.
func (on *OrdersNote) Save(db XODB) error {
	if on.Exists() {
		return on.Update(db)
	}

	return on.Insert(db)
}

// Delete deletes the OrdersNote from the database.
func (on *OrdersNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !on._exists {
		return nil
	}

	// if deleted, bail
	if on._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.orders_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, on.ID)
	_, err = db.Exec(sqlstr, on.ID)
	if err != nil {
		return err
	}

	// set deleted
	on._deleted = true

	return nil
}

// Order returns the Order associated with the OrdersNote's OrderID (order_id).
//
// Generated from foreign key 'orders_notes_order'.
func (on *OrdersNote) Order(db XODB) (*Order, error) {
	return OrderByID(db, uint(on.OrderID.Int64))
}

// UserByUpdatedBy returns the User associated with the OrdersNote's UpdatedBy (updated_by).
//
// Generated from foreign key 'orders_notes_updated'.
func (on *OrdersNote) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(on.UpdatedBy.Int64))
}

// UserByUserID returns the User associated with the OrdersNote's UserID (user_id).
//
// Generated from foreign key 'orders_notes_user'.
func (on *OrdersNote) UserByUserID(db XODB) (*User, error) {
	return UserByID(db, uint(on.UserID.Int64))
}

// OrdersNotesByOrderID retrieves a row from 'AllergyNew.orders_notes' as a OrdersNote.
//
// Generated from index 'Orders'.
func OrdersNotesByOrderID(db XODB, orderID sql.NullInt64) ([]*OrdersNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, order_id, user_id, note, updated_by, updated ` +
		`FROM AllergyNew.orders_notes ` +
		`WHERE order_id = ?`

	// run query
	XOLog(sqlstr, orderID)
	q, err := db.Query(sqlstr, orderID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OrdersNote{}
	for q.Next() {
		on := OrdersNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&on.ID, &on.OrderID, &on.UserID, &on.Note, &on.UpdatedBy, &on.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &on)
	}

	return res, nil
}

// OrdersNotesByUserID retrieves a row from 'AllergyNew.orders_notes' as a OrdersNote.
//
// Generated from index 'Users'.
func OrdersNotesByUserID(db XODB, userID sql.NullInt64) ([]*OrdersNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, order_id, user_id, note, updated_by, updated ` +
		`FROM AllergyNew.orders_notes ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OrdersNote{}
	for q.Next() {
		on := OrdersNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&on.ID, &on.OrderID, &on.UserID, &on.Note, &on.UpdatedBy, &on.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &on)
	}

	return res, nil
}

// OrdersNoteByID retrieves a row from 'AllergyNew.orders_notes' as a OrdersNote.
//
// Generated from index 'orders_notes_id_pkey'.
func OrdersNoteByID(db XODB, id uint) (*OrdersNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, order_id, user_id, note, updated_by, updated ` +
		`FROM AllergyNew.orders_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	on := OrdersNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&on.ID, &on.OrderID, &on.UserID, &on.Note, &on.UpdatedBy, &on.Updated)
	if err != nil {
		return nil, err
	}

	return &on, nil
}

// OrdersNotesByUpdatedBy retrieves a row from 'AllergyNew.orders_notes' as a OrdersNote.
//
// Generated from index 'orders_notes_updated'.
func OrdersNotesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*OrdersNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, order_id, user_id, note, updated_by, updated ` +
		`FROM AllergyNew.orders_notes ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OrdersNote{}
	for q.Next() {
		on := OrdersNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&on.ID, &on.OrderID, &on.UserID, &on.Note, &on.UpdatedBy, &on.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &on)
	}

	return res, nil
}
