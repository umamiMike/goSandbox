// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// InventoryMixAntigen represents a row from 'AllergyNew.inventory_mix_antigens'.
type InventoryMixAntigen struct {
	ID                 uint          `json:"id"`                   // id
	ProcessedAntigenID sql.NullInt64 `json:"processed_antigen_id"` // processed_antigen_id
	InventoryAntigenID sql.NullInt64 `json:"inventory_antigen_id"` // inventory_antigen_id
	Active             int8          `json:"active"`               // active

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the InventoryMixAntigen exists in the database.
func (ima *InventoryMixAntigen) Exists() bool {
	return ima._exists
}

// Deleted provides information if the InventoryMixAntigen has been deleted from the database.
func (ima *InventoryMixAntigen) Deleted() bool {
	return ima._deleted
}

// Insert inserts the InventoryMixAntigen to the database.
func (ima *InventoryMixAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ima._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.inventory_mix_antigens (` +
		`processed_antigen_id, inventory_antigen_id, active` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ima.ProcessedAntigenID, ima.InventoryAntigenID, ima.Active)
	res, err := db.Exec(sqlstr, ima.ProcessedAntigenID, ima.InventoryAntigenID, ima.Active)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ima.ID = uint(id)
	ima._exists = true

	return nil
}

// Update updates the InventoryMixAntigen in the database.
func (ima *InventoryMixAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ima._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ima._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.inventory_mix_antigens SET ` +
		`processed_antigen_id = ?, inventory_antigen_id = ?, active = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ima.ProcessedAntigenID, ima.InventoryAntigenID, ima.Active, ima.ID)
	_, err = db.Exec(sqlstr, ima.ProcessedAntigenID, ima.InventoryAntigenID, ima.Active, ima.ID)
	return err
}

// Save saves the InventoryMixAntigen to the database.
func (ima *InventoryMixAntigen) Save(db XODB) error {
	if ima.Exists() {
		return ima.Update(db)
	}

	return ima.Insert(db)
}

// Delete deletes the InventoryMixAntigen from the database.
func (ima *InventoryMixAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ima._exists {
		return nil
	}

	// if deleted, bail
	if ima._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.inventory_mix_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, ima.ID)
	_, err = db.Exec(sqlstr, ima.ID)
	if err != nil {
		return err
	}

	// set deleted
	ima._deleted = true

	return nil
}

// InventoryMixAntigensByInventoryAntigenID retrieves a row from 'AllergyNew.inventory_mix_antigens' as a InventoryMixAntigen.
//
// Generated from index 'Inventory'.
func InventoryMixAntigensByInventoryAntigenID(db XODB, inventoryAntigenID sql.NullInt64) ([]*InventoryMixAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, processed_antigen_id, inventory_antigen_id, active ` +
		`FROM AllergyNew.inventory_mix_antigens ` +
		`WHERE inventory_antigen_id = ?`

	// run query
	XOLog(sqlstr, inventoryAntigenID)
	q, err := db.Query(sqlstr, inventoryAntigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InventoryMixAntigen{}
	for q.Next() {
		ima := InventoryMixAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ima.ID, &ima.ProcessedAntigenID, &ima.InventoryAntigenID, &ima.Active)
		if err != nil {
			return nil, err
		}

		res = append(res, &ima)
	}

	return res, nil
}

// InventoryMixAntigensByProcessedAntigenID retrieves a row from 'AllergyNew.inventory_mix_antigens' as a InventoryMixAntigen.
//
// Generated from index 'Processed'.
func InventoryMixAntigensByProcessedAntigenID(db XODB, processedAntigenID sql.NullInt64) ([]*InventoryMixAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, processed_antigen_id, inventory_antigen_id, active ` +
		`FROM AllergyNew.inventory_mix_antigens ` +
		`WHERE processed_antigen_id = ?`

	// run query
	XOLog(sqlstr, processedAntigenID)
	q, err := db.Query(sqlstr, processedAntigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*InventoryMixAntigen{}
	for q.Next() {
		ima := InventoryMixAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ima.ID, &ima.ProcessedAntigenID, &ima.InventoryAntigenID, &ima.Active)
		if err != nil {
			return nil, err
		}

		res = append(res, &ima)
	}

	return res, nil
}

// InventoryMixAntigenByID retrieves a row from 'AllergyNew.inventory_mix_antigens' as a InventoryMixAntigen.
//
// Generated from index 'inventory_mix_antigens_id_pkey'.
func InventoryMixAntigenByID(db XODB, id uint) (*InventoryMixAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, processed_antigen_id, inventory_antigen_id, active ` +
		`FROM AllergyNew.inventory_mix_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ima := InventoryMixAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ima.ID, &ima.ProcessedAntigenID, &ima.InventoryAntigenID, &ima.Active)
	if err != nil {
		return nil, err
	}

	return &ima, nil
}
