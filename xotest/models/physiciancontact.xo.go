// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PhysicianContact represents a row from 'AllergyNew.physician_contacts'.
type PhysicianContact struct {
	ID                  uint           `json:"id"`                   // id
	ParentPracticeID    uint           `json:"parent_practice_id"`   // parent_practice_id
	PracticeName        sql.NullString `json:"practice_name"`        // practice_name
	PhysicianFirstname  sql.NullString `json:"physician_firstname"`  // physician_firstname
	PhysicianLastname   sql.NullString `json:"physician_lastname"`   // physician_lastname
	PhysicianCredential sql.NullString `json:"physician_credential"` // physician_credential
	Address1            sql.NullString `json:"address1"`             // address1
	Address2            sql.NullString `json:"address2"`             // address2
	City                sql.NullString `json:"city"`                 // city
	State               sql.NullString `json:"state"`                // state
	Zip                 sql.NullString `json:"zip"`                  // zip
	Phone               sql.NullString `json:"phone"`                // phone
	Fax                 sql.NullString `json:"fax"`                  // fax
	Enabled             int8           `json:"enabled"`              // enabled
	UpdatedBy           sql.NullInt64  `json:"updated_by"`           // updated_by
	Updated             time.Time      `json:"updated"`              // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PhysicianContact exists in the database.
func (pc *PhysicianContact) Exists() bool {
	return pc._exists
}

// Deleted provides information if the PhysicianContact has been deleted from the database.
func (pc *PhysicianContact) Deleted() bool {
	return pc._deleted
}

// Insert inserts the PhysicianContact to the database.
func (pc *PhysicianContact) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.physician_contacts (` +
		`parent_practice_id, practice_name, physician_firstname, physician_lastname, physician_credential, address1, address2, city, state, zip, phone, fax, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pc.ParentPracticeID, pc.PracticeName, pc.PhysicianFirstname, pc.PhysicianLastname, pc.PhysicianCredential, pc.Address1, pc.Address2, pc.City, pc.State, pc.Zip, pc.Phone, pc.Fax, pc.Enabled, pc.UpdatedBy, pc.Updated)
	res, err := db.Exec(sqlstr, pc.ParentPracticeID, pc.PracticeName, pc.PhysicianFirstname, pc.PhysicianLastname, pc.PhysicianCredential, pc.Address1, pc.Address2, pc.City, pc.State, pc.Zip, pc.Phone, pc.Fax, pc.Enabled, pc.UpdatedBy, pc.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pc.ID = uint(id)
	pc._exists = true

	return nil
}

// Update updates the PhysicianContact in the database.
func (pc *PhysicianContact) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.physician_contacts SET ` +
		`parent_practice_id = ?, practice_name = ?, physician_firstname = ?, physician_lastname = ?, physician_credential = ?, address1 = ?, address2 = ?, city = ?, state = ?, zip = ?, phone = ?, fax = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pc.ParentPracticeID, pc.PracticeName, pc.PhysicianFirstname, pc.PhysicianLastname, pc.PhysicianCredential, pc.Address1, pc.Address2, pc.City, pc.State, pc.Zip, pc.Phone, pc.Fax, pc.Enabled, pc.UpdatedBy, pc.Updated, pc.ID)
	_, err = db.Exec(sqlstr, pc.ParentPracticeID, pc.PracticeName, pc.PhysicianFirstname, pc.PhysicianLastname, pc.PhysicianCredential, pc.Address1, pc.Address2, pc.City, pc.State, pc.Zip, pc.Phone, pc.Fax, pc.Enabled, pc.UpdatedBy, pc.Updated, pc.ID)
	return err
}

// Save saves the PhysicianContact to the database.
func (pc *PhysicianContact) Save(db XODB) error {
	if pc.Exists() {
		return pc.Update(db)
	}

	return pc.Insert(db)
}

// Delete deletes the PhysicianContact from the database.
func (pc *PhysicianContact) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return nil
	}

	// if deleted, bail
	if pc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.physician_contacts WHERE id = ?`

	// run query
	XOLog(sqlstr, pc.ID)
	_, err = db.Exec(sqlstr, pc.ID)
	if err != nil {
		return err
	}

	// set deleted
	pc._deleted = true

	return nil
}

// PhysicianContactsByParentPracticeID retrieves a row from 'AllergyNew.physician_contacts' as a PhysicianContact.
//
// Generated from index 'Parent_Practice_id'.
func PhysicianContactsByParentPracticeID(db XODB, parentPracticeID uint) ([]*PhysicianContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_practice_id, practice_name, physician_firstname, physician_lastname, physician_credential, address1, address2, city, state, zip, phone, fax, enabled, updated_by, updated ` +
		`FROM AllergyNew.physician_contacts ` +
		`WHERE parent_practice_id = ?`

	// run query
	XOLog(sqlstr, parentPracticeID)
	q, err := db.Query(sqlstr, parentPracticeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PhysicianContact{}
	for q.Next() {
		pc := PhysicianContact{
			_exists: true,
		}

		// scan
		err = q.Scan(&pc.ID, &pc.ParentPracticeID, &pc.PracticeName, &pc.PhysicianFirstname, &pc.PhysicianLastname, &pc.PhysicianCredential, &pc.Address1, &pc.Address2, &pc.City, &pc.State, &pc.Zip, &pc.Phone, &pc.Fax, &pc.Enabled, &pc.UpdatedBy, &pc.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PhysicianContactByID retrieves a row from 'AllergyNew.physician_contacts' as a PhysicianContact.
//
// Generated from index 'physician_contacts_id_pkey'.
func PhysicianContactByID(db XODB, id uint) (*PhysicianContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_practice_id, practice_name, physician_firstname, physician_lastname, physician_credential, address1, address2, city, state, zip, phone, fax, enabled, updated_by, updated ` +
		`FROM AllergyNew.physician_contacts ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pc := PhysicianContact{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pc.ID, &pc.ParentPracticeID, &pc.PracticeName, &pc.PhysicianFirstname, &pc.PhysicianLastname, &pc.PhysicianCredential, &pc.Address1, &pc.Address2, &pc.City, &pc.State, &pc.Zip, &pc.Phone, &pc.Fax, &pc.Enabled, &pc.UpdatedBy, &pc.Updated)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}
