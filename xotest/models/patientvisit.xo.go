// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PatientVisit represents a row from 'AllergyNew.patient_visits'.
type PatientVisit struct {
	ID                  uint           `json:"id"`                   // id
	PatientID           sql.NullInt64  `json:"patient_id"`           // patient_id
	PracticeID          sql.NullInt64  `json:"practice_id"`          // practice_id
	LocationID          sql.NullInt64  `json:"location_id"`          // location_id
	VitalsID            sql.NullInt64  `json:"vitals_id"`            // vitals_id
	Date                mysql.NullTime `json:"date"`                 // date
	Notes               sql.NullString `json:"notes"`                // notes
	PrickTest           int8           `json:"prick_test"`           // prick_test
	IntraTest           int8           `json:"intra_test"`           // intra_test
	VialTests           int16          `json:"vial_tests"`           // vial_tests
	AsthmaticSymptoms   sql.NullInt64  `json:"asthmatic_symptoms"`   // asthmatic_symptoms
	Shots               sql.NullInt64  `json:"shots"`                // shots
	Status              Status         `json:"status"`               // status
	Signed              sql.NullInt64  `json:"signed"`               // signed
	SignedDate          mysql.NullTime `json:"signed_date"`          // signed_date
	SignedBy            sql.NullInt64  `json:"signed_by"`            // signed_by
	WaitingStarttime    mysql.NullTime `json:"waiting_starttime"`    // waiting_starttime
	DateCompleted       mysql.NullTime `json:"date_completed"`       // date_completed
	Archived            int8           `json:"archived"`             // archived
	BillableEventID     sql.NullInt64  `json:"billable_event_id"`    // billable_event_id
	VisitNumberID       sql.NullInt64  `json:"visit_number_id"`      // visit_number_id
	SupervisingProvider sql.NullInt64  `json:"supervising_provider"` // supervising_provider
	CptCode             sql.NullString `json:"cpt_code"`             // cpt_code
	UpdatedBy           sql.NullInt64  `json:"updated_by"`           // updated_by
	Updated             time.Time      `json:"updated"`              // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientVisit exists in the database.
func (pv *PatientVisit) Exists() bool {
	return pv._exists
}

// Deleted provides information if the PatientVisit has been deleted from the database.
func (pv *PatientVisit) Deleted() bool {
	return pv._deleted
}

// Insert inserts the PatientVisit to the database.
func (pv *PatientVisit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pv._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_visits (` +
		`patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pv.PatientID, pv.PracticeID, pv.LocationID, pv.VitalsID, pv.Date, pv.Notes, pv.PrickTest, pv.IntraTest, pv.VialTests, pv.AsthmaticSymptoms, pv.Shots, pv.Status, pv.Signed, pv.SignedDate, pv.SignedBy, pv.WaitingStarttime, pv.DateCompleted, pv.Archived, pv.BillableEventID, pv.VisitNumberID, pv.SupervisingProvider, pv.CptCode, pv.UpdatedBy, pv.Updated)
	res, err := db.Exec(sqlstr, pv.PatientID, pv.PracticeID, pv.LocationID, pv.VitalsID, pv.Date, pv.Notes, pv.PrickTest, pv.IntraTest, pv.VialTests, pv.AsthmaticSymptoms, pv.Shots, pv.Status, pv.Signed, pv.SignedDate, pv.SignedBy, pv.WaitingStarttime, pv.DateCompleted, pv.Archived, pv.BillableEventID, pv.VisitNumberID, pv.SupervisingProvider, pv.CptCode, pv.UpdatedBy, pv.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pv.ID = uint(id)
	pv._exists = true

	return nil
}

// Update updates the PatientVisit in the database.
func (pv *PatientVisit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pv._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pv._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_visits SET ` +
		`patient_id = ?, practice_id = ?, location_id = ?, vitals_id = ?, date = ?, notes = ?, prick_test = ?, intra_test = ?, vial_tests = ?, asthmatic_symptoms = ?, shots = ?, status = ?, signed = ?, signed_date = ?, signed_by = ?, waiting_starttime = ?, date_completed = ?, archived = ?, billable_event_id = ?, visit_number_id = ?, supervising_provider = ?, cpt_code = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pv.PatientID, pv.PracticeID, pv.LocationID, pv.VitalsID, pv.Date, pv.Notes, pv.PrickTest, pv.IntraTest, pv.VialTests, pv.AsthmaticSymptoms, pv.Shots, pv.Status, pv.Signed, pv.SignedDate, pv.SignedBy, pv.WaitingStarttime, pv.DateCompleted, pv.Archived, pv.BillableEventID, pv.VisitNumberID, pv.SupervisingProvider, pv.CptCode, pv.UpdatedBy, pv.Updated, pv.ID)
	_, err = db.Exec(sqlstr, pv.PatientID, pv.PracticeID, pv.LocationID, pv.VitalsID, pv.Date, pv.Notes, pv.PrickTest, pv.IntraTest, pv.VialTests, pv.AsthmaticSymptoms, pv.Shots, pv.Status, pv.Signed, pv.SignedDate, pv.SignedBy, pv.WaitingStarttime, pv.DateCompleted, pv.Archived, pv.BillableEventID, pv.VisitNumberID, pv.SupervisingProvider, pv.CptCode, pv.UpdatedBy, pv.Updated, pv.ID)
	return err
}

// Save saves the PatientVisit to the database.
func (pv *PatientVisit) Save(db XODB) error {
	if pv.Exists() {
		return pv.Update(db)
	}

	return pv.Insert(db)
}

// Delete deletes the PatientVisit from the database.
func (pv *PatientVisit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pv._exists {
		return nil
	}

	// if deleted, bail
	if pv._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_visits WHERE id = ?`

	// run query
	XOLog(sqlstr, pv.ID)
	_, err = db.Exec(sqlstr, pv.ID)
	if err != nil {
		return err
	}

	// set deleted
	pv._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the PatientVisit's LocationID (location_id).
//
// Generated from foreign key 'patient_visits_location'.
func (pv *PatientVisit) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(pv.LocationID.Int64))
}

// Patient returns the Patient associated with the PatientVisit's PatientID (patient_id).
//
// Generated from foreign key 'patient_visits_patient'.
func (pv *PatientVisit) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(pv.PatientID.Int64))
}

// Practice returns the Practice associated with the PatientVisit's PracticeID (practice_id).
//
// Generated from foreign key 'patient_visits_practice'.
func (pv *PatientVisit) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(pv.PracticeID.Int64))
}

// User returns the User associated with the PatientVisit's UpdatedBy (updated_by).
//
// Generated from foreign key 'patient_visits_updated'.
func (pv *PatientVisit) User(db XODB) (*User, error) {
	return UserByID(db, uint(pv.UpdatedBy.Int64))
}

// PatientVisitsByLocationID retrieves a row from 'AllergyNew.patient_visits' as a PatientVisit.
//
// Generated from index 'Locations'.
func PatientVisitsByLocationID(db XODB, locationID sql.NullInt64) ([]*PatientVisit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated ` +
		`FROM AllergyNew.patient_visits ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisit{}
	for q.Next() {
		pv := PatientVisit{
			_exists: true,
		}

		// scan
		err = q.Scan(&pv.ID, &pv.PatientID, &pv.PracticeID, &pv.LocationID, &pv.VitalsID, &pv.Date, &pv.Notes, &pv.PrickTest, &pv.IntraTest, &pv.VialTests, &pv.AsthmaticSymptoms, &pv.Shots, &pv.Status, &pv.Signed, &pv.SignedDate, &pv.SignedBy, &pv.WaitingStarttime, &pv.DateCompleted, &pv.Archived, &pv.BillableEventID, &pv.VisitNumberID, &pv.SupervisingProvider, &pv.CptCode, &pv.UpdatedBy, &pv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pv)
	}

	return res, nil
}

// PatientVisitsByPatientID retrieves a row from 'AllergyNew.patient_visits' as a PatientVisit.
//
// Generated from index 'Patients'.
func PatientVisitsByPatientID(db XODB, patientID sql.NullInt64) ([]*PatientVisit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated ` +
		`FROM AllergyNew.patient_visits ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisit{}
	for q.Next() {
		pv := PatientVisit{
			_exists: true,
		}

		// scan
		err = q.Scan(&pv.ID, &pv.PatientID, &pv.PracticeID, &pv.LocationID, &pv.VitalsID, &pv.Date, &pv.Notes, &pv.PrickTest, &pv.IntraTest, &pv.VialTests, &pv.AsthmaticSymptoms, &pv.Shots, &pv.Status, &pv.Signed, &pv.SignedDate, &pv.SignedBy, &pv.WaitingStarttime, &pv.DateCompleted, &pv.Archived, &pv.BillableEventID, &pv.VisitNumberID, &pv.SupervisingProvider, &pv.CptCode, &pv.UpdatedBy, &pv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pv)
	}

	return res, nil
}

// PatientVisitsByPracticeID retrieves a row from 'AllergyNew.patient_visits' as a PatientVisit.
//
// Generated from index 'Practices'.
func PatientVisitsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*PatientVisit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated ` +
		`FROM AllergyNew.patient_visits ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisit{}
	for q.Next() {
		pv := PatientVisit{
			_exists: true,
		}

		// scan
		err = q.Scan(&pv.ID, &pv.PatientID, &pv.PracticeID, &pv.LocationID, &pv.VitalsID, &pv.Date, &pv.Notes, &pv.PrickTest, &pv.IntraTest, &pv.VialTests, &pv.AsthmaticSymptoms, &pv.Shots, &pv.Status, &pv.Signed, &pv.SignedDate, &pv.SignedBy, &pv.WaitingStarttime, &pv.DateCompleted, &pv.Archived, &pv.BillableEventID, &pv.VisitNumberID, &pv.SupervisingProvider, &pv.CptCode, &pv.UpdatedBy, &pv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pv)
	}

	return res, nil
}

// PatientVisitsByDateCompleted retrieves a row from 'AllergyNew.patient_visits' as a PatientVisit.
//
// Generated from index 'patient_visit_completedate'.
func PatientVisitsByDateCompleted(db XODB, dateCompleted mysql.NullTime) ([]*PatientVisit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated ` +
		`FROM AllergyNew.patient_visits ` +
		`WHERE date_completed = ?`

	// run query
	XOLog(sqlstr, dateCompleted)
	q, err := db.Query(sqlstr, dateCompleted)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisit{}
	for q.Next() {
		pv := PatientVisit{
			_exists: true,
		}

		// scan
		err = q.Scan(&pv.ID, &pv.PatientID, &pv.PracticeID, &pv.LocationID, &pv.VitalsID, &pv.Date, &pv.Notes, &pv.PrickTest, &pv.IntraTest, &pv.VialTests, &pv.AsthmaticSymptoms, &pv.Shots, &pv.Status, &pv.Signed, &pv.SignedDate, &pv.SignedBy, &pv.WaitingStarttime, &pv.DateCompleted, &pv.Archived, &pv.BillableEventID, &pv.VisitNumberID, &pv.SupervisingProvider, &pv.CptCode, &pv.UpdatedBy, &pv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pv)
	}

	return res, nil
}

// PatientVisitsByStatus retrieves a row from 'AllergyNew.patient_visits' as a PatientVisit.
//
// Generated from index 'patient_visit_status'.
func PatientVisitsByStatus(db XODB, status Status) ([]*PatientVisit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated ` +
		`FROM AllergyNew.patient_visits ` +
		`WHERE status = ?`

	// run query
	XOLog(sqlstr, status)
	q, err := db.Query(sqlstr, status)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisit{}
	for q.Next() {
		pv := PatientVisit{
			_exists: true,
		}

		// scan
		err = q.Scan(&pv.ID, &pv.PatientID, &pv.PracticeID, &pv.LocationID, &pv.VitalsID, &pv.Date, &pv.Notes, &pv.PrickTest, &pv.IntraTest, &pv.VialTests, &pv.AsthmaticSymptoms, &pv.Shots, &pv.Status, &pv.Signed, &pv.SignedDate, &pv.SignedBy, &pv.WaitingStarttime, &pv.DateCompleted, &pv.Archived, &pv.BillableEventID, &pv.VisitNumberID, &pv.SupervisingProvider, &pv.CptCode, &pv.UpdatedBy, &pv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pv)
	}

	return res, nil
}

// PatientVisitsByDate retrieves a row from 'AllergyNew.patient_visits' as a PatientVisit.
//
// Generated from index 'patient_visits_dates'.
func PatientVisitsByDate(db XODB, date mysql.NullTime) ([]*PatientVisit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated ` +
		`FROM AllergyNew.patient_visits ` +
		`WHERE date = ?`

	// run query
	XOLog(sqlstr, date)
	q, err := db.Query(sqlstr, date)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisit{}
	for q.Next() {
		pv := PatientVisit{
			_exists: true,
		}

		// scan
		err = q.Scan(&pv.ID, &pv.PatientID, &pv.PracticeID, &pv.LocationID, &pv.VitalsID, &pv.Date, &pv.Notes, &pv.PrickTest, &pv.IntraTest, &pv.VialTests, &pv.AsthmaticSymptoms, &pv.Shots, &pv.Status, &pv.Signed, &pv.SignedDate, &pv.SignedBy, &pv.WaitingStarttime, &pv.DateCompleted, &pv.Archived, &pv.BillableEventID, &pv.VisitNumberID, &pv.SupervisingProvider, &pv.CptCode, &pv.UpdatedBy, &pv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pv)
	}

	return res, nil
}

// PatientVisitByID retrieves a row from 'AllergyNew.patient_visits' as a PatientVisit.
//
// Generated from index 'patient_visits_id_pkey'.
func PatientVisitByID(db XODB, id uint) (*PatientVisit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated ` +
		`FROM AllergyNew.patient_visits ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pv := PatientVisit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pv.ID, &pv.PatientID, &pv.PracticeID, &pv.LocationID, &pv.VitalsID, &pv.Date, &pv.Notes, &pv.PrickTest, &pv.IntraTest, &pv.VialTests, &pv.AsthmaticSymptoms, &pv.Shots, &pv.Status, &pv.Signed, &pv.SignedDate, &pv.SignedBy, &pv.WaitingStarttime, &pv.DateCompleted, &pv.Archived, &pv.BillableEventID, &pv.VisitNumberID, &pv.SupervisingProvider, &pv.CptCode, &pv.UpdatedBy, &pv.Updated)
	if err != nil {
		return nil, err
	}

	return &pv, nil
}

// PatientVisitsByStatus retrieves a row from 'AllergyNew.patient_visits' as a PatientVisit.
//
// Generated from index 'patient_visits_status'.
func PatientVisitsByStatus(db XODB, status Status) ([]*PatientVisit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated ` +
		`FROM AllergyNew.patient_visits ` +
		`WHERE status = ?`

	// run query
	XOLog(sqlstr, status)
	q, err := db.Query(sqlstr, status)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisit{}
	for q.Next() {
		pv := PatientVisit{
			_exists: true,
		}

		// scan
		err = q.Scan(&pv.ID, &pv.PatientID, &pv.PracticeID, &pv.LocationID, &pv.VitalsID, &pv.Date, &pv.Notes, &pv.PrickTest, &pv.IntraTest, &pv.VialTests, &pv.AsthmaticSymptoms, &pv.Shots, &pv.Status, &pv.Signed, &pv.SignedDate, &pv.SignedBy, &pv.WaitingStarttime, &pv.DateCompleted, &pv.Archived, &pv.BillableEventID, &pv.VisitNumberID, &pv.SupervisingProvider, &pv.CptCode, &pv.UpdatedBy, &pv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pv)
	}

	return res, nil
}

// PatientVisitsByUpdatedBy retrieves a row from 'AllergyNew.patient_visits' as a PatientVisit.
//
// Generated from index 'patient_visits_updated'.
func PatientVisitsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PatientVisit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, vitals_id, date, notes, prick_test, intra_test, vial_tests, asthmatic_symptoms, shots, status, signed, signed_date, signed_by, waiting_starttime, date_completed, archived, billable_event_id, visit_number_id, supervising_provider, cpt_code, updated_by, updated ` +
		`FROM AllergyNew.patient_visits ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisit{}
	for q.Next() {
		pv := PatientVisit{
			_exists: true,
		}

		// scan
		err = q.Scan(&pv.ID, &pv.PatientID, &pv.PracticeID, &pv.LocationID, &pv.VitalsID, &pv.Date, &pv.Notes, &pv.PrickTest, &pv.IntraTest, &pv.VialTests, &pv.AsthmaticSymptoms, &pv.Shots, &pv.Status, &pv.Signed, &pv.SignedDate, &pv.SignedBy, &pv.WaitingStarttime, &pv.DateCompleted, &pv.Archived, &pv.BillableEventID, &pv.VisitNumberID, &pv.SupervisingProvider, &pv.CptCode, &pv.UpdatedBy, &pv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pv)
	}

	return res, nil
}
