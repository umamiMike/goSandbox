// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// EmrInformation represents a row from 'AllergyNew.emr_information'.
type EmrInformation struct {
	ID            uint           `json:"id"`             // id
	PracticeID    sql.NullInt64  `json:"practice_id"`    // practice_id
	PracticeLogin sql.NullString `json:"practice_login"` // practice_login
	EmrID         sql.NullInt64  `json:"emr_id"`         // emr_id
	Field         sql.NullString `json:"field"`          // field
	Value         sql.NullString `json:"value"`          // value
	UpdatedBy     sql.NullInt64  `json:"updated_by"`     // updated_by
	Updated       time.Time      `json:"updated"`        // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EmrInformation exists in the database.
func (ei *EmrInformation) Exists() bool {
	return ei._exists
}

// Deleted provides information if the EmrInformation has been deleted from the database.
func (ei *EmrInformation) Deleted() bool {
	return ei._deleted
}

// Insert inserts the EmrInformation to the database.
func (ei *EmrInformation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ei._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.emr_information (` +
		`practice_id, practice_login, emr_id, field, value, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ei.PracticeID, ei.PracticeLogin, ei.EmrID, ei.Field, ei.Value, ei.UpdatedBy, ei.Updated)
	res, err := db.Exec(sqlstr, ei.PracticeID, ei.PracticeLogin, ei.EmrID, ei.Field, ei.Value, ei.UpdatedBy, ei.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ei.ID = uint(id)
	ei._exists = true

	return nil
}

// Update updates the EmrInformation in the database.
func (ei *EmrInformation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ei._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ei._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.emr_information SET ` +
		`practice_id = ?, practice_login = ?, emr_id = ?, field = ?, value = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ei.PracticeID, ei.PracticeLogin, ei.EmrID, ei.Field, ei.Value, ei.UpdatedBy, ei.Updated, ei.ID)
	_, err = db.Exec(sqlstr, ei.PracticeID, ei.PracticeLogin, ei.EmrID, ei.Field, ei.Value, ei.UpdatedBy, ei.Updated, ei.ID)
	return err
}

// Save saves the EmrInformation to the database.
func (ei *EmrInformation) Save(db XODB) error {
	if ei.Exists() {
		return ei.Update(db)
	}

	return ei.Insert(db)
}

// Delete deletes the EmrInformation from the database.
func (ei *EmrInformation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ei._exists {
		return nil
	}

	// if deleted, bail
	if ei._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.emr_information WHERE id = ?`

	// run query
	XOLog(sqlstr, ei.ID)
	_, err = db.Exec(sqlstr, ei.ID)
	if err != nil {
		return err
	}

	// set deleted
	ei._deleted = true

	return nil
}

// EmrInformationsByEmrID retrieves a row from 'AllergyNew.emr_information' as a EmrInformation.
//
// Generated from index 'EMR ID'.
func EmrInformationsByEmrID(db XODB, emrID sql.NullInt64) ([]*EmrInformation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, practice_login, emr_id, field, value, updated_by, updated ` +
		`FROM AllergyNew.emr_information ` +
		`WHERE emr_id = ?`

	// run query
	XOLog(sqlstr, emrID)
	q, err := db.Query(sqlstr, emrID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EmrInformation{}
	for q.Next() {
		ei := EmrInformation{
			_exists: true,
		}

		// scan
		err = q.Scan(&ei.ID, &ei.PracticeID, &ei.PracticeLogin, &ei.EmrID, &ei.Field, &ei.Value, &ei.UpdatedBy, &ei.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ei)
	}

	return res, nil
}

// EmrInformationsByPracticeID retrieves a row from 'AllergyNew.emr_information' as a EmrInformation.
//
// Generated from index 'Practices'.
func EmrInformationsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*EmrInformation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, practice_login, emr_id, field, value, updated_by, updated ` +
		`FROM AllergyNew.emr_information ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EmrInformation{}
	for q.Next() {
		ei := EmrInformation{
			_exists: true,
		}

		// scan
		err = q.Scan(&ei.ID, &ei.PracticeID, &ei.PracticeLogin, &ei.EmrID, &ei.Field, &ei.Value, &ei.UpdatedBy, &ei.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ei)
	}

	return res, nil
}

// EmrInformationByID retrieves a row from 'AllergyNew.emr_information' as a EmrInformation.
//
// Generated from index 'emr_information_id_pkey'.
func EmrInformationByID(db XODB, id uint) (*EmrInformation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, practice_login, emr_id, field, value, updated_by, updated ` +
		`FROM AllergyNew.emr_information ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ei := EmrInformation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ei.ID, &ei.PracticeID, &ei.PracticeLogin, &ei.EmrID, &ei.Field, &ei.Value, &ei.UpdatedBy, &ei.Updated)
	if err != nil {
		return nil, err
	}

	return &ei, nil
}
