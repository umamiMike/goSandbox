// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// BackupDownloadsError represents a row from 'AllergyNew.backup_downloads_errors'.
type BackupDownloadsError struct {
	ID         uint           `json:"id"`          // id
	BackupID   sql.NullInt64  `json:"backup_id"`   // backup_id
	Details    sql.NullString `json:"details"`     // details
	CreateDate mysql.NullTime `json:"create_date"` // create_date
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BackupDownloadsError exists in the database.
func (bde *BackupDownloadsError) Exists() bool {
	return bde._exists
}

// Deleted provides information if the BackupDownloadsError has been deleted from the database.
func (bde *BackupDownloadsError) Deleted() bool {
	return bde._deleted
}

// Insert inserts the BackupDownloadsError to the database.
func (bde *BackupDownloadsError) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if bde._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.backup_downloads_errors (` +
		`backup_id, details, create_date, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, bde.BackupID, bde.Details, bde.CreateDate, bde.UpdatedBy, bde.Updated)
	res, err := db.Exec(sqlstr, bde.BackupID, bde.Details, bde.CreateDate, bde.UpdatedBy, bde.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bde.ID = uint(id)
	bde._exists = true

	return nil
}

// Update updates the BackupDownloadsError in the database.
func (bde *BackupDownloadsError) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bde._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if bde._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.backup_downloads_errors SET ` +
		`backup_id = ?, details = ?, create_date = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, bde.BackupID, bde.Details, bde.CreateDate, bde.UpdatedBy, bde.Updated, bde.ID)
	_, err = db.Exec(sqlstr, bde.BackupID, bde.Details, bde.CreateDate, bde.UpdatedBy, bde.Updated, bde.ID)
	return err
}

// Save saves the BackupDownloadsError to the database.
func (bde *BackupDownloadsError) Save(db XODB) error {
	if bde.Exists() {
		return bde.Update(db)
	}

	return bde.Insert(db)
}

// Delete deletes the BackupDownloadsError from the database.
func (bde *BackupDownloadsError) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bde._exists {
		return nil
	}

	// if deleted, bail
	if bde._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.backup_downloads_errors WHERE id = ?`

	// run query
	XOLog(sqlstr, bde.ID)
	_, err = db.Exec(sqlstr, bde.ID)
	if err != nil {
		return err
	}

	// set deleted
	bde._deleted = true

	return nil
}

// BackupDownload returns the BackupDownload associated with the BackupDownloadsError's BackupID (backup_id).
//
// Generated from foreign key 'backup_downloads_errors_backup'.
func (bde *BackupDownloadsError) BackupDownload(db XODB) (*BackupDownload, error) {
	return BackupDownloadByID(db, uint(bde.BackupID.Int64))
}

// User returns the User associated with the BackupDownloadsError's UpdatedBy (updated_by).
//
// Generated from foreign key 'backup_downloads_errors_updated'.
func (bde *BackupDownloadsError) User(db XODB) (*User, error) {
	return UserByID(db, uint(bde.UpdatedBy.Int64))
}

// BackupDownloadsErrorsByBackupID retrieves a row from 'AllergyNew.backup_downloads_errors' as a BackupDownloadsError.
//
// Generated from index 'Backups'.
func BackupDownloadsErrorsByBackupID(db XODB, backupID sql.NullInt64) ([]*BackupDownloadsError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, backup_id, details, create_date, updated_by, updated ` +
		`FROM AllergyNew.backup_downloads_errors ` +
		`WHERE backup_id = ?`

	// run query
	XOLog(sqlstr, backupID)
	q, err := db.Query(sqlstr, backupID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BackupDownloadsError{}
	for q.Next() {
		bde := BackupDownloadsError{
			_exists: true,
		}

		// scan
		err = q.Scan(&bde.ID, &bde.BackupID, &bde.Details, &bde.CreateDate, &bde.UpdatedBy, &bde.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &bde)
	}

	return res, nil
}

// BackupDownloadsErrorByID retrieves a row from 'AllergyNew.backup_downloads_errors' as a BackupDownloadsError.
//
// Generated from index 'backup_downloads_errors_id_pkey'.
func BackupDownloadsErrorByID(db XODB, id uint) (*BackupDownloadsError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, backup_id, details, create_date, updated_by, updated ` +
		`FROM AllergyNew.backup_downloads_errors ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	bde := BackupDownloadsError{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&bde.ID, &bde.BackupID, &bde.Details, &bde.CreateDate, &bde.UpdatedBy, &bde.Updated)
	if err != nil {
		return nil, err
	}

	return &bde, nil
}

// BackupDownloadsErrorsByUpdatedBy retrieves a row from 'AllergyNew.backup_downloads_errors' as a BackupDownloadsError.
//
// Generated from index 'backup_downloads_errors_updated'.
func BackupDownloadsErrorsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*BackupDownloadsError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, backup_id, details, create_date, updated_by, updated ` +
		`FROM AllergyNew.backup_downloads_errors ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BackupDownloadsError{}
	for q.Next() {
		bde := BackupDownloadsError{
			_exists: true,
		}

		// scan
		err = q.Scan(&bde.ID, &bde.BackupID, &bde.Details, &bde.CreateDate, &bde.UpdatedBy, &bde.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &bde)
	}

	return res, nil
}
