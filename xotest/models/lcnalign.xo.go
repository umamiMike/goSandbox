// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// LcnAlign is the 'lcn_align' enum type from schema 'AllergyNew'.
type LcnAlign uint16

const (
	// LcnAlignNone is the 'none' LcnAlign.
	LcnAlignNone = LcnAlign(1)

	// LcnAlignLeft is the 'left' LcnAlign.
	LcnAlignLeft = LcnAlign(2)

	// LcnAlignRight is the 'right' LcnAlign.
	LcnAlignRight = LcnAlign(3)

	// LcnAlignCenter is the 'center' LcnAlign.
	LcnAlignCenter = LcnAlign(4)
)

// String returns the string value of the LcnAlign.
func (la LcnAlign) String() string {
	var enumVal string

	switch la {
	case LcnAlignNone:
		enumVal = "none"

	case LcnAlignLeft:
		enumVal = "left"

	case LcnAlignRight:
		enumVal = "right"

	case LcnAlignCenter:
		enumVal = "center"
	}

	return enumVal
}

// MarshalText marshals LcnAlign into text.
func (la LcnAlign) MarshalText() ([]byte, error) {
	return []byte(la.String()), nil
}

// UnmarshalText unmarshals LcnAlign from text.
func (la *LcnAlign) UnmarshalText(text []byte) error {
	switch string(text) {
	case "none":
		*la = LcnAlignNone

	case "left":
		*la = LcnAlignLeft

	case "right":
		*la = LcnAlignRight

	case "center":
		*la = LcnAlignCenter

	default:
		return errors.New("invalid LcnAlign")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for LcnAlign.
func (la LcnAlign) Value() (driver.Value, error) {
	return la.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for LcnAlign.
func (la *LcnAlign) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid LcnAlign")
	}

	return la.UnmarshalText(buf)
}
