// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Practice represents a row from 'AllergyNew.practices'.
type Practice struct {
	ID           uint           `json:"id"`            // id
	Name         sql.NullString `json:"name"`          // name
	Login        sql.NullString `json:"login"`         // login
	Phone        sql.NullString `json:"phone"`         // phone
	Address      sql.NullString `json:"address"`       // address
	Address2     sql.NullString `json:"address2"`      // address2
	City         sql.NullString `json:"city"`          // city
	State        sql.NullString `json:"state"`         // state
	Zip          sql.NullString `json:"zip"`           // zip
	Contact      sql.NullString `json:"contact"`       // contact
	ContactPhone sql.NullString `json:"contact_phone"` // contact_phone
	Category     Category       `json:"category"`      // category
	Notes        sql.NullString `json:"notes"`         // notes
	Type         Type           `json:"type"`          // type
	Enabled      int8           `json:"enabled"`       // enabled
	UpdatedBy    sql.NullInt64  `json:"updated_by"`    // updated_by
	Updated      time.Time      `json:"updated"`       // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Practice exists in the database.
func (p *Practice) Exists() bool {
	return p._exists
}

// Deleted provides information if the Practice has been deleted from the database.
func (p *Practice) Deleted() bool {
	return p._deleted
}

// Insert inserts the Practice to the database.
func (p *Practice) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practices (` +
		`name, login, phone, address, address2, city, state, zip, contact, contact_phone, category, notes, type, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.Name, p.Login, p.Phone, p.Address, p.Address2, p.City, p.State, p.Zip, p.Contact, p.ContactPhone, p.Category, p.Notes, p.Type, p.Enabled, p.UpdatedBy, p.Updated)
	res, err := db.Exec(sqlstr, p.Name, p.Login, p.Phone, p.Address, p.Address2, p.City, p.State, p.Zip, p.Contact, p.ContactPhone, p.Category, p.Notes, p.Type, p.Enabled, p.UpdatedBy, p.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = uint(id)
	p._exists = true

	return nil
}

// Update updates the Practice in the database.
func (p *Practice) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practices SET ` +
		`name = ?, login = ?, phone = ?, address = ?, address2 = ?, city = ?, state = ?, zip = ?, contact = ?, contact_phone = ?, category = ?, notes = ?, type = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, p.Name, p.Login, p.Phone, p.Address, p.Address2, p.City, p.State, p.Zip, p.Contact, p.ContactPhone, p.Category, p.Notes, p.Type, p.Enabled, p.UpdatedBy, p.Updated, p.ID)
	_, err = db.Exec(sqlstr, p.Name, p.Login, p.Phone, p.Address, p.Address2, p.City, p.State, p.Zip, p.Contact, p.ContactPhone, p.Category, p.Notes, p.Type, p.Enabled, p.UpdatedBy, p.Updated, p.ID)
	return err
}

// Save saves the Practice to the database.
func (p *Practice) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Practice from the database.
func (p *Practice) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practices WHERE id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// User returns the User associated with the Practice's UpdatedBy (updated_by).
//
// Generated from foreign key 'practices_updated'.
func (p *Practice) User(db XODB) (*User, error) {
	return UserByID(db, uint(p.UpdatedBy.Int64))
}

// PracticesByLogin retrieves a row from 'AllergyNew.practices' as a Practice.
//
// Generated from index 'Logins'.
func PracticesByLogin(db XODB, login sql.NullString) ([]*Practice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, login, phone, address, address2, city, state, zip, contact, contact_phone, category, notes, type, enabled, updated_by, updated ` +
		`FROM AllergyNew.practices ` +
		`WHERE login = ?`

	// run query
	XOLog(sqlstr, login)
	q, err := db.Query(sqlstr, login)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Practice{}
	for q.Next() {
		p := Practice{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.Name, &p.Login, &p.Phone, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Contact, &p.ContactPhone, &p.Category, &p.Notes, &p.Type, &p.Enabled, &p.UpdatedBy, &p.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PracticeByID retrieves a row from 'AllergyNew.practices' as a Practice.
//
// Generated from index 'practices_id_pkey'.
func PracticeByID(db XODB, id uint) (*Practice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, login, phone, address, address2, city, state, zip, contact, contact_phone, category, notes, type, enabled, updated_by, updated ` +
		`FROM AllergyNew.practices ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Practice{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Name, &p.Login, &p.Phone, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Contact, &p.ContactPhone, &p.Category, &p.Notes, &p.Type, &p.Enabled, &p.UpdatedBy, &p.Updated)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PracticesByUpdatedBy retrieves a row from 'AllergyNew.practices' as a Practice.
//
// Generated from index 'practices_updated'.
func PracticesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*Practice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, login, phone, address, address2, city, state, zip, contact, contact_phone, category, notes, type, enabled, updated_by, updated ` +
		`FROM AllergyNew.practices ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Practice{}
	for q.Next() {
		p := Practice{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.Name, &p.Login, &p.Phone, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Contact, &p.ContactPhone, &p.Category, &p.Notes, &p.Type, &p.Enabled, &p.UpdatedBy, &p.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}
