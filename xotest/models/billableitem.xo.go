// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// BillableItem represents a row from 'AllergyNew.billable_items'.
type BillableItem struct {
	ID            uint          `json:"id"`             // id
	PracticeID    uint          `json:"practice_id"`    // practice_id
	PatientID     uint          `json:"patient_id"`     // patient_id
	EventID       uint          `json:"event_id"`       // event_id
	ProcedureCode string        `json:"procedure_code"` // procedure_code
	Units         uint          `json:"units"`          // units
	Status        Status        `json:"status"`         // status
	UpdatedBy     sql.NullInt64 `json:"updated_by"`     // updated_by
	Updated       time.Time     `json:"updated"`        // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BillableItem exists in the database.
func (bi *BillableItem) Exists() bool {
	return bi._exists
}

// Deleted provides information if the BillableItem has been deleted from the database.
func (bi *BillableItem) Deleted() bool {
	return bi._deleted
}

// Insert inserts the BillableItem to the database.
func (bi *BillableItem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if bi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.billable_items (` +
		`practice_id, patient_id, event_id, procedure_code, units, status, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, bi.PracticeID, bi.PatientID, bi.EventID, bi.ProcedureCode, bi.Units, bi.Status, bi.UpdatedBy, bi.Updated)
	res, err := db.Exec(sqlstr, bi.PracticeID, bi.PatientID, bi.EventID, bi.ProcedureCode, bi.Units, bi.Status, bi.UpdatedBy, bi.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bi.ID = uint(id)
	bi._exists = true

	return nil
}

// Update updates the BillableItem in the database.
func (bi *BillableItem) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if bi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.billable_items SET ` +
		`practice_id = ?, patient_id = ?, event_id = ?, procedure_code = ?, units = ?, status = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, bi.PracticeID, bi.PatientID, bi.EventID, bi.ProcedureCode, bi.Units, bi.Status, bi.UpdatedBy, bi.Updated, bi.ID)
	_, err = db.Exec(sqlstr, bi.PracticeID, bi.PatientID, bi.EventID, bi.ProcedureCode, bi.Units, bi.Status, bi.UpdatedBy, bi.Updated, bi.ID)
	return err
}

// Save saves the BillableItem to the database.
func (bi *BillableItem) Save(db XODB) error {
	if bi.Exists() {
		return bi.Update(db)
	}

	return bi.Insert(db)
}

// Delete deletes the BillableItem from the database.
func (bi *BillableItem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bi._exists {
		return nil
	}

	// if deleted, bail
	if bi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.billable_items WHERE id = ?`

	// run query
	XOLog(sqlstr, bi.ID)
	_, err = db.Exec(sqlstr, bi.ID)
	if err != nil {
		return err
	}

	// set deleted
	bi._deleted = true

	return nil
}

// BillableItemByID retrieves a row from 'AllergyNew.billable_items' as a BillableItem.
//
// Generated from index 'billable_items_id_pkey'.
func BillableItemByID(db XODB, id uint) (*BillableItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, event_id, procedure_code, units, status, updated_by, updated ` +
		`FROM AllergyNew.billable_items ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	bi := BillableItem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&bi.ID, &bi.PracticeID, &bi.PatientID, &bi.EventID, &bi.ProcedureCode, &bi.Units, &bi.Status, &bi.UpdatedBy, &bi.Updated)
	if err != nil {
		return nil, err
	}

	return &bi, nil
}
