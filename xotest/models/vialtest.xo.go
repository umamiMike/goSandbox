// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// VialTest represents a row from 'AllergyNew.vial_tests'.
type VialTest struct {
	ID         uint           `json:"id"`          // id
	VialID     sql.NullInt64  `json:"vial_id"`     // vial_id
	TestDate   mysql.NullTime `json:"test_date"`   // test_date
	VisitID    sql.NullInt64  `json:"visit_id"`    // visit_id
	LocationID sql.NullInt64  `json:"location_id"` // location_id
	TesterID   sql.NullInt64  `json:"tester_id"`   // tester_id
	ReviewerID sql.NullInt64  `json:"reviewer_id"` // reviewer_id
	WhealSize  sql.NullString `json:"wheal_size"`  // wheal_size
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialTest exists in the database.
func (vt *VialTest) Exists() bool {
	return vt._exists
}

// Deleted provides information if the VialTest has been deleted from the database.
func (vt *VialTest) Deleted() bool {
	return vt._deleted
}

// Insert inserts the VialTest to the database.
func (vt *VialTest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_tests (` +
		`vial_id, test_date, visit_id, location_id, tester_id, reviewer_id, wheal_size, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vt.VialID, vt.TestDate, vt.VisitID, vt.LocationID, vt.TesterID, vt.ReviewerID, vt.WhealSize, vt.UpdatedBy, vt.Updated)
	res, err := db.Exec(sqlstr, vt.VialID, vt.TestDate, vt.VisitID, vt.LocationID, vt.TesterID, vt.ReviewerID, vt.WhealSize, vt.UpdatedBy, vt.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vt.ID = uint(id)
	vt._exists = true

	return nil
}

// Update updates the VialTest in the database.
func (vt *VialTest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_tests SET ` +
		`vial_id = ?, test_date = ?, visit_id = ?, location_id = ?, tester_id = ?, reviewer_id = ?, wheal_size = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vt.VialID, vt.TestDate, vt.VisitID, vt.LocationID, vt.TesterID, vt.ReviewerID, vt.WhealSize, vt.UpdatedBy, vt.Updated, vt.ID)
	_, err = db.Exec(sqlstr, vt.VialID, vt.TestDate, vt.VisitID, vt.LocationID, vt.TesterID, vt.ReviewerID, vt.WhealSize, vt.UpdatedBy, vt.Updated, vt.ID)
	return err
}

// Save saves the VialTest to the database.
func (vt *VialTest) Save(db XODB) error {
	if vt.Exists() {
		return vt.Update(db)
	}

	return vt.Insert(db)
}

// Delete deletes the VialTest from the database.
func (vt *VialTest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vt._exists {
		return nil
	}

	// if deleted, bail
	if vt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_tests WHERE id = ?`

	// run query
	XOLog(sqlstr, vt.ID)
	_, err = db.Exec(sqlstr, vt.ID)
	if err != nil {
		return err
	}

	// set deleted
	vt._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the VialTest's LocationID (location_id).
//
// Generated from foreign key 'vial_tests_location'.
func (vt *VialTest) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(vt.LocationID.Int64))
}

// UserByReviewerID returns the User associated with the VialTest's ReviewerID (reviewer_id).
//
// Generated from foreign key 'vial_tests_reviewer'.
func (vt *VialTest) UserByReviewerID(db XODB) (*User, error) {
	return UserByID(db, uint(vt.ReviewerID.Int64))
}

// UserByTesterID returns the User associated with the VialTest's TesterID (tester_id).
//
// Generated from foreign key 'vial_tests_tester'.
func (vt *VialTest) UserByTesterID(db XODB) (*User, error) {
	return UserByID(db, uint(vt.TesterID.Int64))
}

// UserByUpdatedBy returns the User associated with the VialTest's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_tests_updated'.
func (vt *VialTest) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(vt.UpdatedBy.Int64))
}

// VialTestByID retrieves a row from 'AllergyNew.vial_tests' as a VialTest.
//
// Generated from index 'vial_tests_id_pkey'.
func VialTestByID(db XODB, id uint) (*VialTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, test_date, visit_id, location_id, tester_id, reviewer_id, wheal_size, updated_by, updated ` +
		`FROM AllergyNew.vial_tests ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vt := VialTest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vt.ID, &vt.VialID, &vt.TestDate, &vt.VisitID, &vt.LocationID, &vt.TesterID, &vt.ReviewerID, &vt.WhealSize, &vt.UpdatedBy, &vt.Updated)
	if err != nil {
		return nil, err
	}

	return &vt, nil
}

// VialTestsByLocationID retrieves a row from 'AllergyNew.vial_tests' as a VialTest.
//
// Generated from index 'vial_tests_location'.
func VialTestsByLocationID(db XODB, locationID sql.NullInt64) ([]*VialTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, test_date, visit_id, location_id, tester_id, reviewer_id, wheal_size, updated_by, updated ` +
		`FROM AllergyNew.vial_tests ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialTest{}
	for q.Next() {
		vt := VialTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vt.ID, &vt.VialID, &vt.TestDate, &vt.VisitID, &vt.LocationID, &vt.TesterID, &vt.ReviewerID, &vt.WhealSize, &vt.UpdatedBy, &vt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vt)
	}

	return res, nil
}

// VialTestsByReviewerID retrieves a row from 'AllergyNew.vial_tests' as a VialTest.
//
// Generated from index 'vial_tests_reviewer'.
func VialTestsByReviewerID(db XODB, reviewerID sql.NullInt64) ([]*VialTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, test_date, visit_id, location_id, tester_id, reviewer_id, wheal_size, updated_by, updated ` +
		`FROM AllergyNew.vial_tests ` +
		`WHERE reviewer_id = ?`

	// run query
	XOLog(sqlstr, reviewerID)
	q, err := db.Query(sqlstr, reviewerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialTest{}
	for q.Next() {
		vt := VialTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vt.ID, &vt.VialID, &vt.TestDate, &vt.VisitID, &vt.LocationID, &vt.TesterID, &vt.ReviewerID, &vt.WhealSize, &vt.UpdatedBy, &vt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vt)
	}

	return res, nil
}

// VialTestsByTesterID retrieves a row from 'AllergyNew.vial_tests' as a VialTest.
//
// Generated from index 'vial_tests_tester'.
func VialTestsByTesterID(db XODB, testerID sql.NullInt64) ([]*VialTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, test_date, visit_id, location_id, tester_id, reviewer_id, wheal_size, updated_by, updated ` +
		`FROM AllergyNew.vial_tests ` +
		`WHERE tester_id = ?`

	// run query
	XOLog(sqlstr, testerID)
	q, err := db.Query(sqlstr, testerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialTest{}
	for q.Next() {
		vt := VialTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vt.ID, &vt.VialID, &vt.TestDate, &vt.VisitID, &vt.LocationID, &vt.TesterID, &vt.ReviewerID, &vt.WhealSize, &vt.UpdatedBy, &vt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vt)
	}

	return res, nil
}

// VialTestsByUpdatedBy retrieves a row from 'AllergyNew.vial_tests' as a VialTest.
//
// Generated from index 'vial_tests_updated'.
func VialTestsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, test_date, visit_id, location_id, tester_id, reviewer_id, wheal_size, updated_by, updated ` +
		`FROM AllergyNew.vial_tests ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialTest{}
	for q.Next() {
		vt := VialTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vt.ID, &vt.VialID, &vt.TestDate, &vt.VisitID, &vt.LocationID, &vt.TesterID, &vt.ReviewerID, &vt.WhealSize, &vt.UpdatedBy, &vt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vt)
	}

	return res, nil
}

// VialTestsByVisitID retrieves a row from 'AllergyNew.vial_tests' as a VialTest.
//
// Generated from index 'visit_id'.
func VialTestsByVisitID(db XODB, visitID sql.NullInt64) ([]*VialTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, test_date, visit_id, location_id, tester_id, reviewer_id, wheal_size, updated_by, updated ` +
		`FROM AllergyNew.vial_tests ` +
		`WHERE visit_id = ?`

	// run query
	XOLog(sqlstr, visitID)
	q, err := db.Query(sqlstr, visitID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialTest{}
	for q.Next() {
		vt := VialTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vt.ID, &vt.VialID, &vt.TestDate, &vt.VisitID, &vt.LocationID, &vt.TesterID, &vt.ReviewerID, &vt.WhealSize, &vt.UpdatedBy, &vt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vt)
	}

	return res, nil
}
