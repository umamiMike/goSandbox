// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialRelocationCategory represents a row from 'AllergyNew.vial_relocation_categories'.
type VialRelocationCategory struct {
	ID         uint           `json:"id"`          // id
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	Code       Code           `json:"code"`        // code
	Category   sql.NullString `json:"category"`    // category
	Order      int            `json:"order"`       // order
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialRelocationCategory exists in the database.
func (vrc *VialRelocationCategory) Exists() bool {
	return vrc._exists
}

// Deleted provides information if the VialRelocationCategory has been deleted from the database.
func (vrc *VialRelocationCategory) Deleted() bool {
	return vrc._deleted
}

// Insert inserts the VialRelocationCategory to the database.
func (vrc *VialRelocationCategory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vrc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_relocation_categories (` +
		`practice_id, code, category, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vrc.PracticeID, vrc.Code, vrc.Category, vrc.Order, vrc.UpdatedBy, vrc.Updated)
	res, err := db.Exec(sqlstr, vrc.PracticeID, vrc.Code, vrc.Category, vrc.Order, vrc.UpdatedBy, vrc.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vrc.ID = uint(id)
	vrc._exists = true

	return nil
}

// Update updates the VialRelocationCategory in the database.
func (vrc *VialRelocationCategory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vrc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_relocation_categories SET ` +
		`practice_id = ?, code = ?, category = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vrc.PracticeID, vrc.Code, vrc.Category, vrc.Order, vrc.UpdatedBy, vrc.Updated, vrc.ID)
	_, err = db.Exec(sqlstr, vrc.PracticeID, vrc.Code, vrc.Category, vrc.Order, vrc.UpdatedBy, vrc.Updated, vrc.ID)
	return err
}

// Save saves the VialRelocationCategory to the database.
func (vrc *VialRelocationCategory) Save(db XODB) error {
	if vrc.Exists() {
		return vrc.Update(db)
	}

	return vrc.Insert(db)
}

// Delete deletes the VialRelocationCategory from the database.
func (vrc *VialRelocationCategory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrc._exists {
		return nil
	}

	// if deleted, bail
	if vrc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_relocation_categories WHERE id = ?`

	// run query
	XOLog(sqlstr, vrc.ID)
	_, err = db.Exec(sqlstr, vrc.ID)
	if err != nil {
		return err
	}

	// set deleted
	vrc._deleted = true

	return nil
}

// User returns the User associated with the VialRelocationCategory's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_relocation_categories_updated'.
func (vrc *VialRelocationCategory) User(db XODB) (*User, error) {
	return UserByID(db, uint(vrc.UpdatedBy.Int64))
}

// VialRelocationCategoriesByPracticeID retrieves a row from 'AllergyNew.vial_relocation_categories' as a VialRelocationCategory.
//
// Generated from index 'Practices'.
func VialRelocationCategoriesByPracticeID(db XODB, practiceID sql.NullInt64) ([]*VialRelocationCategory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, code, category, order, updated_by, updated ` +
		`FROM AllergyNew.vial_relocation_categories ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRelocationCategory{}
	for q.Next() {
		vrc := VialRelocationCategory{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrc.ID, &vrc.PracticeID, &vrc.Code, &vrc.Category, &vrc.Order, &vrc.UpdatedBy, &vrc.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrc)
	}

	return res, nil
}

// VialRelocationCategoryByID retrieves a row from 'AllergyNew.vial_relocation_categories' as a VialRelocationCategory.
//
// Generated from index 'vial_relocation_categories_id_pkey'.
func VialRelocationCategoryByID(db XODB, id uint) (*VialRelocationCategory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, code, category, order, updated_by, updated ` +
		`FROM AllergyNew.vial_relocation_categories ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vrc := VialRelocationCategory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vrc.ID, &vrc.PracticeID, &vrc.Code, &vrc.Category, &vrc.Order, &vrc.UpdatedBy, &vrc.Updated)
	if err != nil {
		return nil, err
	}

	return &vrc, nil
}

// VialRelocationCategoriesByUpdatedBy retrieves a row from 'AllergyNew.vial_relocation_categories' as a VialRelocationCategory.
//
// Generated from index 'vial_relocation_categories_updated'.
func VialRelocationCategoriesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialRelocationCategory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, code, category, order, updated_by, updated ` +
		`FROM AllergyNew.vial_relocation_categories ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRelocationCategory{}
	for q.Next() {
		vrc := VialRelocationCategory{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrc.ID, &vrc.PracticeID, &vrc.Code, &vrc.Category, &vrc.Order, &vrc.UpdatedBy, &vrc.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrc)
	}

	return res, nil
}
