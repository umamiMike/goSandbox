// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// ImportQueueError represents a row from 'AllergyNew.import_queue_errors'.
type ImportQueueError struct {
	ID       int    `json:"id"`       // id
	Filename string `json:"filename"` // filename
	Message  string `json:"message"`  // message

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ImportQueueError exists in the database.
func (iqe *ImportQueueError) Exists() bool {
	return iqe._exists
}

// Deleted provides information if the ImportQueueError has been deleted from the database.
func (iqe *ImportQueueError) Deleted() bool {
	return iqe._deleted
}

// Insert inserts the ImportQueueError to the database.
func (iqe *ImportQueueError) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if iqe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.import_queue_errors (` +
		`filename, message` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, iqe.Filename, iqe.Message)
	res, err := db.Exec(sqlstr, iqe.Filename, iqe.Message)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	iqe.ID = int(id)
	iqe._exists = true

	return nil
}

// Update updates the ImportQueueError in the database.
func (iqe *ImportQueueError) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqe._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if iqe._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.import_queue_errors SET ` +
		`filename = ?, message = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, iqe.Filename, iqe.Message, iqe.ID)
	_, err = db.Exec(sqlstr, iqe.Filename, iqe.Message, iqe.ID)
	return err
}

// Save saves the ImportQueueError to the database.
func (iqe *ImportQueueError) Save(db XODB) error {
	if iqe.Exists() {
		return iqe.Update(db)
	}

	return iqe.Insert(db)
}

// Delete deletes the ImportQueueError from the database.
func (iqe *ImportQueueError) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqe._exists {
		return nil
	}

	// if deleted, bail
	if iqe._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.import_queue_errors WHERE id = ?`

	// run query
	XOLog(sqlstr, iqe.ID)
	_, err = db.Exec(sqlstr, iqe.ID)
	if err != nil {
		return err
	}

	// set deleted
	iqe._deleted = true

	return nil
}

// Importqueueerror represents a row from 'AllergyNew.importQueueErrors'.
type Importqueueerror struct {
	ID      string `json:"id"`      // id
	Message string `json:"message"` // message
}

// ImportQueueErrorsByFilename retrieves a row from 'AllergyNew.import_queue_errors' as a ImportQueueError.
//
// Generated from index 'Filenames'.
func ImportQueueErrorsByFilename(db XODB, filename string) ([]*ImportQueueError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, filename, message ` +
		`FROM AllergyNew.import_queue_errors ` +
		`WHERE filename = ?`

	// run query
	XOLog(sqlstr, filename)
	q, err := db.Query(sqlstr, filename)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ImportQueueError{}
	for q.Next() {
		iqe := ImportQueueError{
			_exists: true,
		}

		// scan
		err = q.Scan(&iqe.ID, &iqe.Filename, &iqe.Message)
		if err != nil {
			return nil, err
		}

		res = append(res, &iqe)
	}

	return res, nil
}

// ImportQueueErrorByID retrieves a row from 'AllergyNew.import_queue_errors' as a ImportQueueError.
//
// Generated from index 'import_queue_errors_id_pkey'.
func ImportQueueErrorByID(db XODB, id int) (*ImportQueueError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, filename, message ` +
		`FROM AllergyNew.import_queue_errors ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	iqe := ImportQueueError{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&iqe.ID, &iqe.Filename, &iqe.Message)
	if err != nil {
		return nil, err
	}

	return &iqe, nil
}

// ImportqueueerrorsByID retrieves a row from 'AllergyNew.importQueueErrors' as a Importqueueerror.
//
// Generated from index 'Filenames'.
func ImportqueueerrorsByID(db XODB, id string) ([]*Importqueueerror, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, message ` +
		`FROM AllergyNew.importQueueErrors ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	q, err := db.Query(sqlstr, id)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Importqueueerror{}
	for q.Next() {
		i := Importqueueerror{}

		// scan
		err = q.Scan(&i.ID, &i.Message)
		if err != nil {
			return nil, err
		}

		res = append(res, &i)
	}

	return res, nil
}
