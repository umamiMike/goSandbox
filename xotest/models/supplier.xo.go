// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Supplier represents a row from 'AllergyNew.suppliers'.
type Supplier struct {
	ID        uint           `json:"id"`         // id
	Name      sql.NullString `json:"name"`       // name
	Phone     sql.NullString `json:"phone"`      // phone
	Contact   sql.NullString `json:"contact"`    // contact
	Email     sql.NullString `json:"email"`      // email
	Enabled   int8           `json:"enabled"`    // enabled
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Supplier exists in the database.
func (s *Supplier) Exists() bool {
	return s._exists
}

// Deleted provides information if the Supplier has been deleted from the database.
func (s *Supplier) Deleted() bool {
	return s._deleted
}

// Insert inserts the Supplier to the database.
func (s *Supplier) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.suppliers (` +
		`name, phone, contact, email, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.Name, s.Phone, s.Contact, s.Email, s.Enabled, s.UpdatedBy, s.Updated)
	res, err := db.Exec(sqlstr, s.Name, s.Phone, s.Contact, s.Email, s.Enabled, s.UpdatedBy, s.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = uint(id)
	s._exists = true

	return nil
}

// Update updates the Supplier in the database.
func (s *Supplier) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.suppliers SET ` +
		`name = ?, phone = ?, contact = ?, email = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, s.Name, s.Phone, s.Contact, s.Email, s.Enabled, s.UpdatedBy, s.Updated, s.ID)
	_, err = db.Exec(sqlstr, s.Name, s.Phone, s.Contact, s.Email, s.Enabled, s.UpdatedBy, s.Updated, s.ID)
	return err
}

// Save saves the Supplier to the database.
func (s *Supplier) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Supplier from the database.
func (s *Supplier) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.suppliers WHERE id = ?`

	// run query
	XOLog(sqlstr, s.ID)
	_, err = db.Exec(sqlstr, s.ID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// User returns the User associated with the Supplier's UpdatedBy (updated_by).
//
// Generated from foreign key 'suppliers_updated'.
func (s *Supplier) User(db XODB) (*User, error) {
	return UserByID(db, uint(s.UpdatedBy.Int64))
}

// SupplierByID retrieves a row from 'AllergyNew.suppliers' as a Supplier.
//
// Generated from index 'suppliers_id_pkey'.
func SupplierByID(db XODB, id uint) (*Supplier, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, phone, contact, email, enabled, updated_by, updated ` +
		`FROM AllergyNew.suppliers ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	s := Supplier{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.ID, &s.Name, &s.Phone, &s.Contact, &s.Email, &s.Enabled, &s.UpdatedBy, &s.Updated)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// SuppliersByUpdatedBy retrieves a row from 'AllergyNew.suppliers' as a Supplier.
//
// Generated from index 'suppliers_updated'.
func SuppliersByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*Supplier, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, phone, contact, email, enabled, updated_by, updated ` +
		`FROM AllergyNew.suppliers ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Supplier{}
	for q.Next() {
		s := Supplier{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.ID, &s.Name, &s.Phone, &s.Contact, &s.Email, &s.Enabled, &s.UpdatedBy, &s.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}
