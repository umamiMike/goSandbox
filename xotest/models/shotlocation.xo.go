// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// ShotLocation is the 'shot_location' enum type from schema 'AllergyNew'.
type ShotLocation uint16

const (
	// ShotLocationInhouse is the 'inhouse' ShotLocation.
	ShotLocationInhouse = ShotLocation(1)

	// ShotLocationPartner is the 'partner' ShotLocation.
	ShotLocationPartner = ShotLocation(2)

	// ShotLocationOther is the 'other' ShotLocation.
	ShotLocationOther = ShotLocation(3)
)

// String returns the string value of the ShotLocation.
func (sl ShotLocation) String() string {
	var enumVal string

	switch sl {
	case ShotLocationInhouse:
		enumVal = "inhouse"

	case ShotLocationPartner:
		enumVal = "partner"

	case ShotLocationOther:
		enumVal = "other"
	}

	return enumVal
}

// MarshalText marshals ShotLocation into text.
func (sl ShotLocation) MarshalText() ([]byte, error) {
	return []byte(sl.String()), nil
}

// UnmarshalText unmarshals ShotLocation from text.
func (sl *ShotLocation) UnmarshalText(text []byte) error {
	switch string(text) {
	case "inhouse":
		*sl = ShotLocationInhouse

	case "partner":
		*sl = ShotLocationPartner

	case "other":
		*sl = ShotLocationOther

	default:
		return errors.New("invalid ShotLocation")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for ShotLocation.
func (sl ShotLocation) Value() (driver.Value, error) {
	return sl.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for ShotLocation.
func (sl *ShotLocation) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid ShotLocation")
	}

	return sl.UnmarshalText(buf)
}
