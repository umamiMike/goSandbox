// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// ImportQueueImport represents a row from 'AllergyNew.import_queue_imports'.
type ImportQueueImport struct {
	ID         int       `json:"id"`          // id
	PracticeID int       `json:"practice_id"` // practice_id
	Starttime  time.Time `json:"starttime"`   // starttime
	Current    string    `json:"current"`     // current
	Written    int       `json:"written"`     // written
	Complete   bool      `json:"complete"`    // complete
	Endtime    time.Time `json:"endtime"`     // endtime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ImportQueueImport exists in the database.
func (iqi *ImportQueueImport) Exists() bool {
	return iqi._exists
}

// Deleted provides information if the ImportQueueImport has been deleted from the database.
func (iqi *ImportQueueImport) Deleted() bool {
	return iqi._deleted
}

// Insert inserts the ImportQueueImport to the database.
func (iqi *ImportQueueImport) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if iqi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.import_queue_imports (` +
		`practice_id, starttime, current, written, complete, endtime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, iqi.PracticeID, iqi.Starttime, iqi.Current, iqi.Written, iqi.Complete, iqi.Endtime)
	res, err := db.Exec(sqlstr, iqi.PracticeID, iqi.Starttime, iqi.Current, iqi.Written, iqi.Complete, iqi.Endtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	iqi.ID = int(id)
	iqi._exists = true

	return nil
}

// Update updates the ImportQueueImport in the database.
func (iqi *ImportQueueImport) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if iqi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.import_queue_imports SET ` +
		`practice_id = ?, starttime = ?, current = ?, written = ?, complete = ?, endtime = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, iqi.PracticeID, iqi.Starttime, iqi.Current, iqi.Written, iqi.Complete, iqi.Endtime, iqi.ID)
	_, err = db.Exec(sqlstr, iqi.PracticeID, iqi.Starttime, iqi.Current, iqi.Written, iqi.Complete, iqi.Endtime, iqi.ID)
	return err
}

// Save saves the ImportQueueImport to the database.
func (iqi *ImportQueueImport) Save(db XODB) error {
	if iqi.Exists() {
		return iqi.Update(db)
	}

	return iqi.Insert(db)
}

// Delete deletes the ImportQueueImport from the database.
func (iqi *ImportQueueImport) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqi._exists {
		return nil
	}

	// if deleted, bail
	if iqi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.import_queue_imports WHERE id = ?`

	// run query
	XOLog(sqlstr, iqi.ID)
	_, err = db.Exec(sqlstr, iqi.ID)
	if err != nil {
		return err
	}

	// set deleted
	iqi._deleted = true

	return nil
}

// ImportQueueImportsByPracticeID retrieves a row from 'AllergyNew.import_queue_imports' as a ImportQueueImport.
//
// Generated from index 'XMLImportPractices'.
func ImportQueueImportsByPracticeID(db XODB, practiceID int) ([]*ImportQueueImport, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, starttime, current, written, complete, endtime ` +
		`FROM AllergyNew.import_queue_imports ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ImportQueueImport{}
	for q.Next() {
		iqi := ImportQueueImport{
			_exists: true,
		}

		// scan
		err = q.Scan(&iqi.ID, &iqi.PracticeID, &iqi.Starttime, &iqi.Current, &iqi.Written, &iqi.Complete, &iqi.Endtime)
		if err != nil {
			return nil, err
		}

		res = append(res, &iqi)
	}

	return res, nil
}

// ImportQueueImportByID retrieves a row from 'AllergyNew.import_queue_imports' as a ImportQueueImport.
//
// Generated from index 'import_queue_imports_id_pkey'.
func ImportQueueImportByID(db XODB, id int) (*ImportQueueImport, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, starttime, current, written, complete, endtime ` +
		`FROM AllergyNew.import_queue_imports ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	iqi := ImportQueueImport{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&iqi.ID, &iqi.PracticeID, &iqi.Starttime, &iqi.Current, &iqi.Written, &iqi.Complete, &iqi.Endtime)
	if err != nil {
		return nil, err
	}

	return &iqi, nil
}
