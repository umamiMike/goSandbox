// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// DocAlign is the 'doc_align' enum type from schema 'AllergyNew'.
type DocAlign uint16

const (
	// DocAlignNone is the 'none' DocAlign.
	DocAlignNone = DocAlign(1)

	// DocAlignLeft is the 'left' DocAlign.
	DocAlignLeft = DocAlign(2)

	// DocAlignRight is the 'right' DocAlign.
	DocAlignRight = DocAlign(3)

	// DocAlignCenter is the 'center' DocAlign.
	DocAlignCenter = DocAlign(4)
)

// String returns the string value of the DocAlign.
func (da DocAlign) String() string {
	var enumVal string

	switch da {
	case DocAlignNone:
		enumVal = "none"

	case DocAlignLeft:
		enumVal = "left"

	case DocAlignRight:
		enumVal = "right"

	case DocAlignCenter:
		enumVal = "center"
	}

	return enumVal
}

// MarshalText marshals DocAlign into text.
func (da DocAlign) MarshalText() ([]byte, error) {
	return []byte(da.String()), nil
}

// UnmarshalText unmarshals DocAlign from text.
func (da *DocAlign) UnmarshalText(text []byte) error {
	switch string(text) {
	case "none":
		*da = DocAlignNone

	case "left":
		*da = DocAlignLeft

	case "right":
		*da = DocAlignRight

	case "center":
		*da = DocAlignCenter

	default:
		return errors.New("invalid DocAlign")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for DocAlign.
func (da DocAlign) Value() (driver.Value, error) {
	return da.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for DocAlign.
func (da *DocAlign) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid DocAlign")
	}

	return da.UnmarshalText(buf)
}
