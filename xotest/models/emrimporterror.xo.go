// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// EmrImportError represents a row from 'AllergyNew.emr_import_errors'.
type EmrImportError struct {
	ID               uint           `json:"id"`                // id
	ErrorNote        sql.NullString `json:"error_note"`        // error_note
	DocumentType     string         `json:"document_type"`     // document_type
	EventType        string         `json:"event_type"`        // event_type
	PatientFirstname sql.NullString `json:"patient_firstname"` // patient_firstname
	PatientLastname  sql.NullString `json:"patient_lastname"`  // patient_lastname
	PatientDob       mysql.NullTime `json:"patient_dob"`       // patient_dob
	UpdatedBy        sql.NullInt64  `json:"updated_by"`        // updated_by
	Updated          time.Time      `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EmrImportError exists in the database.
func (eie *EmrImportError) Exists() bool {
	return eie._exists
}

// Deleted provides information if the EmrImportError has been deleted from the database.
func (eie *EmrImportError) Deleted() bool {
	return eie._deleted
}

// Insert inserts the EmrImportError to the database.
func (eie *EmrImportError) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if eie._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.emr_import_errors (` +
		`error_note, document_type, event_type, patient_firstname, patient_lastname, patient_dob, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, eie.ErrorNote, eie.DocumentType, eie.EventType, eie.PatientFirstname, eie.PatientLastname, eie.PatientDob, eie.UpdatedBy, eie.Updated)
	res, err := db.Exec(sqlstr, eie.ErrorNote, eie.DocumentType, eie.EventType, eie.PatientFirstname, eie.PatientLastname, eie.PatientDob, eie.UpdatedBy, eie.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	eie.ID = uint(id)
	eie._exists = true

	return nil
}

// Update updates the EmrImportError in the database.
func (eie *EmrImportError) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eie._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if eie._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.emr_import_errors SET ` +
		`error_note = ?, document_type = ?, event_type = ?, patient_firstname = ?, patient_lastname = ?, patient_dob = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, eie.ErrorNote, eie.DocumentType, eie.EventType, eie.PatientFirstname, eie.PatientLastname, eie.PatientDob, eie.UpdatedBy, eie.Updated, eie.ID)
	_, err = db.Exec(sqlstr, eie.ErrorNote, eie.DocumentType, eie.EventType, eie.PatientFirstname, eie.PatientLastname, eie.PatientDob, eie.UpdatedBy, eie.Updated, eie.ID)
	return err
}

// Save saves the EmrImportError to the database.
func (eie *EmrImportError) Save(db XODB) error {
	if eie.Exists() {
		return eie.Update(db)
	}

	return eie.Insert(db)
}

// Delete deletes the EmrImportError from the database.
func (eie *EmrImportError) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eie._exists {
		return nil
	}

	// if deleted, bail
	if eie._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.emr_import_errors WHERE id = ?`

	// run query
	XOLog(sqlstr, eie.ID)
	_, err = db.Exec(sqlstr, eie.ID)
	if err != nil {
		return err
	}

	// set deleted
	eie._deleted = true

	return nil
}

// EmrImportErrorByID retrieves a row from 'AllergyNew.emr_import_errors' as a EmrImportError.
//
// Generated from index 'emr_import_errors_id_pkey'.
func EmrImportErrorByID(db XODB, id uint) (*EmrImportError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, error_note, document_type, event_type, patient_firstname, patient_lastname, patient_dob, updated_by, updated ` +
		`FROM AllergyNew.emr_import_errors ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	eie := EmrImportError{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&eie.ID, &eie.ErrorNote, &eie.DocumentType, &eie.EventType, &eie.PatientFirstname, &eie.PatientLastname, &eie.PatientDob, &eie.UpdatedBy, &eie.Updated)
	if err != nil {
		return nil, err
	}

	return &eie, nil
}
