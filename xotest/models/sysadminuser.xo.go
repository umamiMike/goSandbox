// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// SysadminUser represents a row from 'AllergyNew.sysadmin_users'.
type SysadminUser struct {
	ID        uint           `json:"id"`         // id
	UserID    sql.NullString `json:"user_id"`    // user_id
	UserPass  sql.NullString `json:"user_pass"`  // user_pass
	Notes     sql.NullString `json:"notes"`      // notes
	Enabled   int8           `json:"enabled"`    // enabled
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SysadminUser exists in the database.
func (su *SysadminUser) Exists() bool {
	return su._exists
}

// Deleted provides information if the SysadminUser has been deleted from the database.
func (su *SysadminUser) Deleted() bool {
	return su._deleted
}

// Insert inserts the SysadminUser to the database.
func (su *SysadminUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if su._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.sysadmin_users (` +
		`user_id, user_pass, notes, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, su.UserID, su.UserPass, su.Notes, su.Enabled, su.UpdatedBy, su.Updated)
	res, err := db.Exec(sqlstr, su.UserID, su.UserPass, su.Notes, su.Enabled, su.UpdatedBy, su.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	su.ID = uint(id)
	su._exists = true

	return nil
}

// Update updates the SysadminUser in the database.
func (su *SysadminUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !su._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if su._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.sysadmin_users SET ` +
		`user_id = ?, user_pass = ?, notes = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, su.UserID, su.UserPass, su.Notes, su.Enabled, su.UpdatedBy, su.Updated, su.ID)
	_, err = db.Exec(sqlstr, su.UserID, su.UserPass, su.Notes, su.Enabled, su.UpdatedBy, su.Updated, su.ID)
	return err
}

// Save saves the SysadminUser to the database.
func (su *SysadminUser) Save(db XODB) error {
	if su.Exists() {
		return su.Update(db)
	}

	return su.Insert(db)
}

// Delete deletes the SysadminUser from the database.
func (su *SysadminUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !su._exists {
		return nil
	}

	// if deleted, bail
	if su._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.sysadmin_users WHERE id = ?`

	// run query
	XOLog(sqlstr, su.ID)
	_, err = db.Exec(sqlstr, su.ID)
	if err != nil {
		return err
	}

	// set deleted
	su._deleted = true

	return nil
}

// User returns the User associated with the SysadminUser's UpdatedBy (updated_by).
//
// Generated from foreign key 'sysadmin_users_updated'.
func (su *SysadminUser) User(db XODB) (*User, error) {
	return UserByID(db, uint(su.UpdatedBy.Int64))
}

// SysadminUserByID retrieves a row from 'AllergyNew.sysadmin_users' as a SysadminUser.
//
// Generated from index 'sysadmin_users_id_pkey'.
func SysadminUserByID(db XODB, id uint) (*SysadminUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, user_pass, notes, enabled, updated_by, updated ` +
		`FROM AllergyNew.sysadmin_users ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	su := SysadminUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&su.ID, &su.UserID, &su.UserPass, &su.Notes, &su.Enabled, &su.UpdatedBy, &su.Updated)
	if err != nil {
		return nil, err
	}

	return &su, nil
}

// SysadminUsersByUpdatedBy retrieves a row from 'AllergyNew.sysadmin_users' as a SysadminUser.
//
// Generated from index 'sysadmin_users_updated'.
func SysadminUsersByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*SysadminUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, user_pass, notes, enabled, updated_by, updated ` +
		`FROM AllergyNew.sysadmin_users ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SysadminUser{}
	for q.Next() {
		su := SysadminUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&su.ID, &su.UserID, &su.UserPass, &su.Notes, &su.Enabled, &su.UpdatedBy, &su.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &su)
	}

	return res, nil
}
