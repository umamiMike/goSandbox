// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// OrdersProvider represents a row from 'AllergyNew.orders_providers'.
type OrdersProvider struct {
	ID        uint           `json:"id"`         // id
	Provider  sql.NullString `json:"provider"`   // provider
	Location  sql.NullString `json:"location"`   // location
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrdersProvider exists in the database.
func (op *OrdersProvider) Exists() bool {
	return op._exists
}

// Deleted provides information if the OrdersProvider has been deleted from the database.
func (op *OrdersProvider) Deleted() bool {
	return op._deleted
}

// Insert inserts the OrdersProvider to the database.
func (op *OrdersProvider) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if op._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.orders_providers (` +
		`provider, location, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, op.Provider, op.Location, op.UpdatedBy, op.Updated)
	res, err := db.Exec(sqlstr, op.Provider, op.Location, op.UpdatedBy, op.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	op.ID = uint(id)
	op._exists = true

	return nil
}

// Update updates the OrdersProvider in the database.
func (op *OrdersProvider) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !op._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if op._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.orders_providers SET ` +
		`provider = ?, location = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, op.Provider, op.Location, op.UpdatedBy, op.Updated, op.ID)
	_, err = db.Exec(sqlstr, op.Provider, op.Location, op.UpdatedBy, op.Updated, op.ID)
	return err
}

// Save saves the OrdersProvider to the database.
func (op *OrdersProvider) Save(db XODB) error {
	if op.Exists() {
		return op.Update(db)
	}

	return op.Insert(db)
}

// Delete deletes the OrdersProvider from the database.
func (op *OrdersProvider) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !op._exists {
		return nil
	}

	// if deleted, bail
	if op._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.orders_providers WHERE id = ?`

	// run query
	XOLog(sqlstr, op.ID)
	_, err = db.Exec(sqlstr, op.ID)
	if err != nil {
		return err
	}

	// set deleted
	op._deleted = true

	return nil
}

// OrdersProvidersByProvider retrieves a row from 'AllergyNew.orders_providers' as a OrdersProvider.
//
// Generated from index 'Providers'.
func OrdersProvidersByProvider(db XODB, provider sql.NullString) ([]*OrdersProvider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, provider, location, updated_by, updated ` +
		`FROM AllergyNew.orders_providers ` +
		`WHERE provider = ?`

	// run query
	XOLog(sqlstr, provider)
	q, err := db.Query(sqlstr, provider)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OrdersProvider{}
	for q.Next() {
		op := OrdersProvider{
			_exists: true,
		}

		// scan
		err = q.Scan(&op.ID, &op.Provider, &op.Location, &op.UpdatedBy, &op.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &op)
	}

	return res, nil
}

// OrdersProviderByID retrieves a row from 'AllergyNew.orders_providers' as a OrdersProvider.
//
// Generated from index 'orders_providers_id_pkey'.
func OrdersProviderByID(db XODB, id uint) (*OrdersProvider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, provider, location, updated_by, updated ` +
		`FROM AllergyNew.orders_providers ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	op := OrdersProvider{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&op.ID, &op.Provider, &op.Location, &op.UpdatedBy, &op.Updated)
	if err != nil {
		return nil, err
	}

	return &op, nil
}
