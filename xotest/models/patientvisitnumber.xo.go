// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PatientVisitNumber represents a row from 'AllergyNew.patient_visit_numbers'.
type PatientVisitNumber struct {
	ID              int           `json:"id"`                // id
	PatientID       uint          `json:"patient_id"`        // patient_id
	VisitNumber     string        `json:"visit_number"`      // visit_number
	VisitDate       time.Time     `json:"visit_date"`        // visit_date
	VisitNumberUsed sql.NullInt64 `json:"visit_number_used"` // visit_number_used
	UpdatedBy       sql.NullInt64 `json:"updated_by"`        // updated_by
	Updated         time.Time     `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientVisitNumber exists in the database.
func (pvn *PatientVisitNumber) Exists() bool {
	return pvn._exists
}

// Deleted provides information if the PatientVisitNumber has been deleted from the database.
func (pvn *PatientVisitNumber) Deleted() bool {
	return pvn._deleted
}

// Insert inserts the PatientVisitNumber to the database.
func (pvn *PatientVisitNumber) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pvn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_visit_numbers (` +
		`patient_id, visit_number, visit_date, visit_number_used, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pvn.PatientID, pvn.VisitNumber, pvn.VisitDate, pvn.VisitNumberUsed, pvn.UpdatedBy, pvn.Updated)
	res, err := db.Exec(sqlstr, pvn.PatientID, pvn.VisitNumber, pvn.VisitDate, pvn.VisitNumberUsed, pvn.UpdatedBy, pvn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pvn.ID = int(id)
	pvn._exists = true

	return nil
}

// Update updates the PatientVisitNumber in the database.
func (pvn *PatientVisitNumber) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pvn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_visit_numbers SET ` +
		`patient_id = ?, visit_number = ?, visit_date = ?, visit_number_used = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pvn.PatientID, pvn.VisitNumber, pvn.VisitDate, pvn.VisitNumberUsed, pvn.UpdatedBy, pvn.Updated, pvn.ID)
	_, err = db.Exec(sqlstr, pvn.PatientID, pvn.VisitNumber, pvn.VisitDate, pvn.VisitNumberUsed, pvn.UpdatedBy, pvn.Updated, pvn.ID)
	return err
}

// Save saves the PatientVisitNumber to the database.
func (pvn *PatientVisitNumber) Save(db XODB) error {
	if pvn.Exists() {
		return pvn.Update(db)
	}

	return pvn.Insert(db)
}

// Delete deletes the PatientVisitNumber from the database.
func (pvn *PatientVisitNumber) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvn._exists {
		return nil
	}

	// if deleted, bail
	if pvn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_visit_numbers WHERE id = ?`

	// run query
	XOLog(sqlstr, pvn.ID)
	_, err = db.Exec(sqlstr, pvn.ID)
	if err != nil {
		return err
	}

	// set deleted
	pvn._deleted = true

	return nil
}

// PatientVisitNumberByID retrieves a row from 'AllergyNew.patient_visit_numbers' as a PatientVisitNumber.
//
// Generated from index 'patient_visit_numbers_id_pkey'.
func PatientVisitNumberByID(db XODB, id int) (*PatientVisitNumber, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, visit_number, visit_date, visit_number_used, updated_by, updated ` +
		`FROM AllergyNew.patient_visit_numbers ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pvn := PatientVisitNumber{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pvn.ID, &pvn.PatientID, &pvn.VisitNumber, &pvn.VisitDate, &pvn.VisitNumberUsed, &pvn.UpdatedBy, &pvn.Updated)
	if err != nil {
		return nil, err
	}

	return &pvn, nil
}
