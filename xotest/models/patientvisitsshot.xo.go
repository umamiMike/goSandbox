// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PatientVisitsShot represents a row from 'AllergyNew.patient_visits_shots'.
type PatientVisitsShot struct {
	ID           uint            `json:"id"`            // id
	PracticeID   sql.NullInt64   `json:"practice_id"`   // practice_id
	PatientID    sql.NullInt64   `json:"patient_id"`    // patient_id
	VisitID      sql.NullInt64   `json:"visit_id"`      // visit_id
	VialID       sql.NullInt64   `json:"vial_id"`       // vial_id
	Date         mysql.NullTime  `json:"date"`          // date
	ShotGiverID  sql.NullInt64   `json:"shot_giver_id"` // shot_giver_id
	Location     sql.NullString  `json:"location"`      // location
	Dose         sql.NullFloat64 `json:"dose"`          // dose
	Active       int8            `json:"active"`        // active
	ScheduleType sql.NullInt64   `json:"schedule_type"` // schedule_type
	CancelledBy  sql.NullInt64   `json:"cancelled_by"`  // cancelled_by
	UpdatedBy    sql.NullInt64   `json:"updated_by"`    // updated_by
	Updated      time.Time       `json:"updated"`       // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientVisitsShot exists in the database.
func (pvs *PatientVisitsShot) Exists() bool {
	return pvs._exists
}

// Deleted provides information if the PatientVisitsShot has been deleted from the database.
func (pvs *PatientVisitsShot) Deleted() bool {
	return pvs._deleted
}

// Insert inserts the PatientVisitsShot to the database.
func (pvs *PatientVisitsShot) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pvs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_visits_shots (` +
		`practice_id, patient_id, visit_id, vial_id, date, shot_giver_id, location, dose, active, schedule_type, cancelled_by, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pvs.PracticeID, pvs.PatientID, pvs.VisitID, pvs.VialID, pvs.Date, pvs.ShotGiverID, pvs.Location, pvs.Dose, pvs.Active, pvs.ScheduleType, pvs.CancelledBy, pvs.UpdatedBy, pvs.Updated)
	res, err := db.Exec(sqlstr, pvs.PracticeID, pvs.PatientID, pvs.VisitID, pvs.VialID, pvs.Date, pvs.ShotGiverID, pvs.Location, pvs.Dose, pvs.Active, pvs.ScheduleType, pvs.CancelledBy, pvs.UpdatedBy, pvs.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pvs.ID = uint(id)
	pvs._exists = true

	return nil
}

// Update updates the PatientVisitsShot in the database.
func (pvs *PatientVisitsShot) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pvs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_visits_shots SET ` +
		`practice_id = ?, patient_id = ?, visit_id = ?, vial_id = ?, date = ?, shot_giver_id = ?, location = ?, dose = ?, active = ?, schedule_type = ?, cancelled_by = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pvs.PracticeID, pvs.PatientID, pvs.VisitID, pvs.VialID, pvs.Date, pvs.ShotGiverID, pvs.Location, pvs.Dose, pvs.Active, pvs.ScheduleType, pvs.CancelledBy, pvs.UpdatedBy, pvs.Updated, pvs.ID)
	_, err = db.Exec(sqlstr, pvs.PracticeID, pvs.PatientID, pvs.VisitID, pvs.VialID, pvs.Date, pvs.ShotGiverID, pvs.Location, pvs.Dose, pvs.Active, pvs.ScheduleType, pvs.CancelledBy, pvs.UpdatedBy, pvs.Updated, pvs.ID)
	return err
}

// Save saves the PatientVisitsShot to the database.
func (pvs *PatientVisitsShot) Save(db XODB) error {
	if pvs.Exists() {
		return pvs.Update(db)
	}

	return pvs.Insert(db)
}

// Delete deletes the PatientVisitsShot from the database.
func (pvs *PatientVisitsShot) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvs._exists {
		return nil
	}

	// if deleted, bail
	if pvs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_visits_shots WHERE id = ?`

	// run query
	XOLog(sqlstr, pvs.ID)
	_, err = db.Exec(sqlstr, pvs.ID)
	if err != nil {
		return err
	}

	// set deleted
	pvs._deleted = true

	return nil
}

// Patient returns the Patient associated with the PatientVisitsShot's PatientID (patient_id).
//
// Generated from foreign key 'patient_visits_shots_patient'.
func (pvs *PatientVisitsShot) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(pvs.PatientID.Int64))
}

// UserByShotGiverID returns the User associated with the PatientVisitsShot's ShotGiverID (shot_giver_id).
//
// Generated from foreign key 'patient_visits_shots_shot_giver'.
func (pvs *PatientVisitsShot) UserByShotGiverID(db XODB) (*User, error) {
	return UserByID(db, uint(pvs.ShotGiverID.Int64))
}

// UserByUpdatedBy returns the User associated with the PatientVisitsShot's UpdatedBy (updated_by).
//
// Generated from foreign key 'patient_visits_shots_updated'.
func (pvs *PatientVisitsShot) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(pvs.UpdatedBy.Int64))
}

// Vial returns the Vial associated with the PatientVisitsShot's VialID (vial_id).
//
// Generated from foreign key 'patient_visits_shots_vials'.
func (pvs *PatientVisitsShot) Vial(db XODB) (*Vial, error) {
	return VialByID(db, uint(pvs.VialID.Int64))
}

// PatientVisit returns the PatientVisit associated with the PatientVisitsShot's VisitID (visit_id).
//
// Generated from foreign key 'patient_visits_shots_visits'.
func (pvs *PatientVisitsShot) PatientVisit(db XODB) (*PatientVisit, error) {
	return PatientVisitByID(db, uint(pvs.VisitID.Int64))
}

// PatientVisitsShotsByPatientID retrieves a row from 'AllergyNew.patient_visits_shots' as a PatientVisitsShot.
//
// Generated from index 'Patients'.
func PatientVisitsShotsByPatientID(db XODB, patientID sql.NullInt64) ([]*PatientVisitsShot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, visit_id, vial_id, date, shot_giver_id, location, dose, active, schedule_type, cancelled_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShot{}
	for q.Next() {
		pvs := PatientVisitsShot{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvs.ID, &pvs.PracticeID, &pvs.PatientID, &pvs.VisitID, &pvs.VialID, &pvs.Date, &pvs.ShotGiverID, &pvs.Location, &pvs.Dose, &pvs.Active, &pvs.ScheduleType, &pvs.CancelledBy, &pvs.UpdatedBy, &pvs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvs)
	}

	return res, nil
}

// PatientVisitsShotsByShotGiverID retrieves a row from 'AllergyNew.patient_visits_shots' as a PatientVisitsShot.
//
// Generated from index 'Shot_Givers'.
func PatientVisitsShotsByShotGiverID(db XODB, shotGiverID sql.NullInt64) ([]*PatientVisitsShot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, visit_id, vial_id, date, shot_giver_id, location, dose, active, schedule_type, cancelled_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots ` +
		`WHERE shot_giver_id = ?`

	// run query
	XOLog(sqlstr, shotGiverID)
	q, err := db.Query(sqlstr, shotGiverID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShot{}
	for q.Next() {
		pvs := PatientVisitsShot{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvs.ID, &pvs.PracticeID, &pvs.PatientID, &pvs.VisitID, &pvs.VialID, &pvs.Date, &pvs.ShotGiverID, &pvs.Location, &pvs.Dose, &pvs.Active, &pvs.ScheduleType, &pvs.CancelledBy, &pvs.UpdatedBy, &pvs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvs)
	}

	return res, nil
}

// PatientVisitsShotsByVialID retrieves a row from 'AllergyNew.patient_visits_shots' as a PatientVisitsShot.
//
// Generated from index 'Vials'.
func PatientVisitsShotsByVialID(db XODB, vialID sql.NullInt64) ([]*PatientVisitsShot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, visit_id, vial_id, date, shot_giver_id, location, dose, active, schedule_type, cancelled_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots ` +
		`WHERE vial_id = ?`

	// run query
	XOLog(sqlstr, vialID)
	q, err := db.Query(sqlstr, vialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShot{}
	for q.Next() {
		pvs := PatientVisitsShot{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvs.ID, &pvs.PracticeID, &pvs.PatientID, &pvs.VisitID, &pvs.VialID, &pvs.Date, &pvs.ShotGiverID, &pvs.Location, &pvs.Dose, &pvs.Active, &pvs.ScheduleType, &pvs.CancelledBy, &pvs.UpdatedBy, &pvs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvs)
	}

	return res, nil
}

// PatientVisitsShotsByVisitID retrieves a row from 'AllergyNew.patient_visits_shots' as a PatientVisitsShot.
//
// Generated from index 'Visits'.
func PatientVisitsShotsByVisitID(db XODB, visitID sql.NullInt64) ([]*PatientVisitsShot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, visit_id, vial_id, date, shot_giver_id, location, dose, active, schedule_type, cancelled_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots ` +
		`WHERE visit_id = ?`

	// run query
	XOLog(sqlstr, visitID)
	q, err := db.Query(sqlstr, visitID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShot{}
	for q.Next() {
		pvs := PatientVisitsShot{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvs.ID, &pvs.PracticeID, &pvs.PatientID, &pvs.VisitID, &pvs.VialID, &pvs.Date, &pvs.ShotGiverID, &pvs.Location, &pvs.Dose, &pvs.Active, &pvs.ScheduleType, &pvs.CancelledBy, &pvs.UpdatedBy, &pvs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvs)
	}

	return res, nil
}

// PatientVisitsShotsByPracticeID retrieves a row from 'AllergyNew.patient_visits_shots' as a PatientVisitsShot.
//
// Generated from index 'patient_practices'.
func PatientVisitsShotsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*PatientVisitsShot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, visit_id, vial_id, date, shot_giver_id, location, dose, active, schedule_type, cancelled_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShot{}
	for q.Next() {
		pvs := PatientVisitsShot{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvs.ID, &pvs.PracticeID, &pvs.PatientID, &pvs.VisitID, &pvs.VialID, &pvs.Date, &pvs.ShotGiverID, &pvs.Location, &pvs.Dose, &pvs.Active, &pvs.ScheduleType, &pvs.CancelledBy, &pvs.UpdatedBy, &pvs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvs)
	}

	return res, nil
}

// PatientVisitsShotByID retrieves a row from 'AllergyNew.patient_visits_shots' as a PatientVisitsShot.
//
// Generated from index 'patient_visits_shots_id_pkey'.
func PatientVisitsShotByID(db XODB, id uint) (*PatientVisitsShot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, visit_id, vial_id, date, shot_giver_id, location, dose, active, schedule_type, cancelled_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pvs := PatientVisitsShot{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pvs.ID, &pvs.PracticeID, &pvs.PatientID, &pvs.VisitID, &pvs.VialID, &pvs.Date, &pvs.ShotGiverID, &pvs.Location, &pvs.Dose, &pvs.Active, &pvs.ScheduleType, &pvs.CancelledBy, &pvs.UpdatedBy, &pvs.Updated)
	if err != nil {
		return nil, err
	}

	return &pvs, nil
}

// PatientVisitsShotsByUpdatedBy retrieves a row from 'AllergyNew.patient_visits_shots' as a PatientVisitsShot.
//
// Generated from index 'patient_visits_shots_updated'.
func PatientVisitsShotsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PatientVisitsShot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, visit_id, vial_id, date, shot_giver_id, location, dose, active, schedule_type, cancelled_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShot{}
	for q.Next() {
		pvs := PatientVisitsShot{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvs.ID, &pvs.PracticeID, &pvs.PatientID, &pvs.VisitID, &pvs.VialID, &pvs.Date, &pvs.ShotGiverID, &pvs.Location, &pvs.Dose, &pvs.Active, &pvs.ScheduleType, &pvs.CancelledBy, &pvs.UpdatedBy, &pvs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvs)
	}

	return res, nil
}
