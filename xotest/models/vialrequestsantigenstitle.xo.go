// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialRequestsAntigensTitle represents a row from 'AllergyNew.vial_requests_antigens_titles'.
type VialRequestsAntigensTitle struct {
	ID        uint           `json:"id"`         // id
	AntigenID sql.NullInt64  `json:"antigen_id"` // antigen_id
	Title     sql.NullString `json:"title"`      // title
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialRequestsAntigensTitle exists in the database.
func (vrat *VialRequestsAntigensTitle) Exists() bool {
	return vrat._exists
}

// Deleted provides information if the VialRequestsAntigensTitle has been deleted from the database.
func (vrat *VialRequestsAntigensTitle) Deleted() bool {
	return vrat._deleted
}

// Insert inserts the VialRequestsAntigensTitle to the database.
func (vrat *VialRequestsAntigensTitle) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vrat._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_requests_antigens_titles (` +
		`antigen_id, title, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vrat.AntigenID, vrat.Title, vrat.UpdatedBy, vrat.Updated)
	res, err := db.Exec(sqlstr, vrat.AntigenID, vrat.Title, vrat.UpdatedBy, vrat.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vrat.ID = uint(id)
	vrat._exists = true

	return nil
}

// Update updates the VialRequestsAntigensTitle in the database.
func (vrat *VialRequestsAntigensTitle) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrat._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vrat._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_requests_antigens_titles SET ` +
		`antigen_id = ?, title = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vrat.AntigenID, vrat.Title, vrat.UpdatedBy, vrat.Updated, vrat.ID)
	_, err = db.Exec(sqlstr, vrat.AntigenID, vrat.Title, vrat.UpdatedBy, vrat.Updated, vrat.ID)
	return err
}

// Save saves the VialRequestsAntigensTitle to the database.
func (vrat *VialRequestsAntigensTitle) Save(db XODB) error {
	if vrat.Exists() {
		return vrat.Update(db)
	}

	return vrat.Insert(db)
}

// Delete deletes the VialRequestsAntigensTitle from the database.
func (vrat *VialRequestsAntigensTitle) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrat._exists {
		return nil
	}

	// if deleted, bail
	if vrat._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_requests_antigens_titles WHERE id = ?`

	// run query
	XOLog(sqlstr, vrat.ID)
	_, err = db.Exec(sqlstr, vrat.ID)
	if err != nil {
		return err
	}

	// set deleted
	vrat._deleted = true

	return nil
}

// VialRequestsAntigensTitlesByAntigenID retrieves a row from 'AllergyNew.vial_requests_antigens_titles' as a VialRequestsAntigensTitle.
//
// Generated from index 'Antigens'.
func VialRequestsAntigensTitlesByAntigenID(db XODB, antigenID sql.NullInt64) ([]*VialRequestsAntigensTitle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, antigen_id, title, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_antigens_titles ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsAntigensTitle{}
	for q.Next() {
		vrat := VialRequestsAntigensTitle{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrat.ID, &vrat.AntigenID, &vrat.Title, &vrat.UpdatedBy, &vrat.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrat)
	}

	return res, nil
}

// VialRequestsAntigensTitleByID retrieves a row from 'AllergyNew.vial_requests_antigens_titles' as a VialRequestsAntigensTitle.
//
// Generated from index 'vial_requests_antigens_titles_id_pkey'.
func VialRequestsAntigensTitleByID(db XODB, id uint) (*VialRequestsAntigensTitle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, antigen_id, title, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_antigens_titles ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vrat := VialRequestsAntigensTitle{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vrat.ID, &vrat.AntigenID, &vrat.Title, &vrat.UpdatedBy, &vrat.Updated)
	if err != nil {
		return nil, err
	}

	return &vrat, nil
}
