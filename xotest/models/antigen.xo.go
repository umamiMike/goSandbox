// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// Antigen represents a row from 'AllergyNew.antigens'.
type Antigen struct {
	ID                uint            `json:"id"`                 // id
	PracticeID        sql.NullInt64   `json:"practice_id"`        // practice_id
	LocationID        sql.NullInt64   `json:"location_id"`        // location_id
	Name              sql.NullString  `json:"name"`               // name
	AntigenName       sql.NullString  `json:"antigen_name"`       // antigen_name
	Title             sql.NullString  `json:"title"`              // title
	LabelAbbreviation sql.NullString  `json:"label_abbreviation"` // label_abbreviation
	DefaultDosage     sql.NullFloat64 `json:"default_dosage"`     // default_dosage
	PrintOrder        int             `json:"print_order"`        // print_order
	Order             int             `json:"order"`              // order
	IsMix             int8            `json:"is_mix"`             // is_mix
	MixCreateDate     mysql.NullTime  `json:"mix_create_date"`    // mix_create_date
	MixCreatorID      sql.NullInt64   `json:"mix_creator_id"`     // mix_creator_id
	Enabled           int8            `json:"enabled"`            // enabled
	UpdatedBy         sql.NullInt64   `json:"updated_by"`         // updated_by
	Updated           time.Time       `json:"updated"`            // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Antigen exists in the database.
func (a *Antigen) Exists() bool {
	return a._exists
}

// Deleted provides information if the Antigen has been deleted from the database.
func (a *Antigen) Deleted() bool {
	return a._deleted
}

// Insert inserts the Antigen to the database.
func (a *Antigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.antigens (` +
		`practice_id, location_id, name, antigen_name, title, label_abbreviation, default_dosage, print_order, order, is_mix, mix_create_date, mix_creator_id, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.PracticeID, a.LocationID, a.Name, a.AntigenName, a.Title, a.LabelAbbreviation, a.DefaultDosage, a.PrintOrder, a.Order, a.IsMix, a.MixCreateDate, a.MixCreatorID, a.Enabled, a.UpdatedBy, a.Updated)
	res, err := db.Exec(sqlstr, a.PracticeID, a.LocationID, a.Name, a.AntigenName, a.Title, a.LabelAbbreviation, a.DefaultDosage, a.PrintOrder, a.Order, a.IsMix, a.MixCreateDate, a.MixCreatorID, a.Enabled, a.UpdatedBy, a.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = uint(id)
	a._exists = true

	return nil
}

// Update updates the Antigen in the database.
func (a *Antigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.antigens SET ` +
		`practice_id = ?, location_id = ?, name = ?, antigen_name = ?, title = ?, label_abbreviation = ?, default_dosage = ?, print_order = ?, order = ?, is_mix = ?, mix_create_date = ?, mix_creator_id = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, a.PracticeID, a.LocationID, a.Name, a.AntigenName, a.Title, a.LabelAbbreviation, a.DefaultDosage, a.PrintOrder, a.Order, a.IsMix, a.MixCreateDate, a.MixCreatorID, a.Enabled, a.UpdatedBy, a.Updated, a.ID)
	_, err = db.Exec(sqlstr, a.PracticeID, a.LocationID, a.Name, a.AntigenName, a.Title, a.LabelAbbreviation, a.DefaultDosage, a.PrintOrder, a.Order, a.IsMix, a.MixCreateDate, a.MixCreatorID, a.Enabled, a.UpdatedBy, a.Updated, a.ID)
	return err
}

// Save saves the Antigen to the database.
func (a *Antigen) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Antigen from the database.
func (a *Antigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the Antigen's LocationID (location_id).
//
// Generated from foreign key 'antigens_location'.
func (a *Antigen) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(a.LocationID.Int64))
}

// Practice returns the Practice associated with the Antigen's PracticeID (practice_id).
//
// Generated from foreign key 'antigens_practice'.
func (a *Antigen) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(a.PracticeID.Int64))
}

// User returns the User associated with the Antigen's UpdatedBy (updated_by).
//
// Generated from foreign key 'antigens_updated'.
func (a *Antigen) User(db XODB) (*User, error) {
	return UserByID(db, uint(a.UpdatedBy.Int64))
}

// AntigensByLocationID retrieves a row from 'AllergyNew.antigens' as a Antigen.
//
// Generated from index 'Locations'.
func AntigensByLocationID(db XODB, locationID sql.NullInt64) ([]*Antigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, name, antigen_name, title, label_abbreviation, default_dosage, print_order, order, is_mix, mix_create_date, mix_creator_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.antigens ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Antigen{}
	for q.Next() {
		a := Antigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.PracticeID, &a.LocationID, &a.Name, &a.AntigenName, &a.Title, &a.LabelAbbreviation, &a.DefaultDosage, &a.PrintOrder, &a.Order, &a.IsMix, &a.MixCreateDate, &a.MixCreatorID, &a.Enabled, &a.UpdatedBy, &a.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AntigensByPracticeID retrieves a row from 'AllergyNew.antigens' as a Antigen.
//
// Generated from index 'Practices'.
func AntigensByPracticeID(db XODB, practiceID sql.NullInt64) ([]*Antigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, name, antigen_name, title, label_abbreviation, default_dosage, print_order, order, is_mix, mix_create_date, mix_creator_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.antigens ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Antigen{}
	for q.Next() {
		a := Antigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.PracticeID, &a.LocationID, &a.Name, &a.AntigenName, &a.Title, &a.LabelAbbreviation, &a.DefaultDosage, &a.PrintOrder, &a.Order, &a.IsMix, &a.MixCreateDate, &a.MixCreatorID, &a.Enabled, &a.UpdatedBy, &a.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AntigenByID retrieves a row from 'AllergyNew.antigens' as a Antigen.
//
// Generated from index 'antigens_id_pkey'.
func AntigenByID(db XODB, id uint) (*Antigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, name, antigen_name, title, label_abbreviation, default_dosage, print_order, order, is_mix, mix_create_date, mix_creator_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	a := Antigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.PracticeID, &a.LocationID, &a.Name, &a.AntigenName, &a.Title, &a.LabelAbbreviation, &a.DefaultDosage, &a.PrintOrder, &a.Order, &a.IsMix, &a.MixCreateDate, &a.MixCreatorID, &a.Enabled, &a.UpdatedBy, &a.Updated)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AntigensByUpdatedBy retrieves a row from 'AllergyNew.antigens' as a Antigen.
//
// Generated from index 'antigens_updated'.
func AntigensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*Antigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, name, antigen_name, title, label_abbreviation, default_dosage, print_order, order, is_mix, mix_create_date, mix_creator_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.antigens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Antigen{}
	for q.Next() {
		a := Antigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.PracticeID, &a.LocationID, &a.Name, &a.AntigenName, &a.Title, &a.LabelAbbreviation, &a.DefaultDosage, &a.PrintOrder, &a.Order, &a.IsMix, &a.MixCreateDate, &a.MixCreatorID, &a.Enabled, &a.UpdatedBy, &a.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}
