// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// IgeTestsVial represents a row from 'AllergyNew.ige_tests_vials'.
type IgeTestsVial struct {
	ID             uint           `json:"id"`               // id
	TestID         sql.NullInt64  `json:"test_id"`          // test_id
	TemplateID     sql.NullInt64  `json:"template_id"`      // template_id
	TemplateName   sql.NullString `json:"template_name"`    // template_name
	LabelPrinted   sql.NullInt64  `json:"label_printed"`    // label_printed
	LabelPrintedBy sql.NullInt64  `json:"label_printed_by"` // label_printed_by
	LabelPrintDate mysql.NullTime `json:"label_print_date"` // label_print_date
	UpdatedBy      sql.NullInt64  `json:"updated_by"`       // updated_by
	Updated        time.Time      `json:"updated"`          // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IgeTestsVial exists in the database.
func (itv *IgeTestsVial) Exists() bool {
	return itv._exists
}

// Deleted provides information if the IgeTestsVial has been deleted from the database.
func (itv *IgeTestsVial) Deleted() bool {
	return itv._deleted
}

// Insert inserts the IgeTestsVial to the database.
func (itv *IgeTestsVial) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if itv._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.ige_tests_vials (` +
		`test_id, template_id, template_name, label_printed, label_printed_by, label_print_date, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, itv.TestID, itv.TemplateID, itv.TemplateName, itv.LabelPrinted, itv.LabelPrintedBy, itv.LabelPrintDate, itv.UpdatedBy, itv.Updated)
	res, err := db.Exec(sqlstr, itv.TestID, itv.TemplateID, itv.TemplateName, itv.LabelPrinted, itv.LabelPrintedBy, itv.LabelPrintDate, itv.UpdatedBy, itv.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	itv.ID = uint(id)
	itv._exists = true

	return nil
}

// Update updates the IgeTestsVial in the database.
func (itv *IgeTestsVial) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itv._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if itv._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.ige_tests_vials SET ` +
		`test_id = ?, template_id = ?, template_name = ?, label_printed = ?, label_printed_by = ?, label_print_date = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, itv.TestID, itv.TemplateID, itv.TemplateName, itv.LabelPrinted, itv.LabelPrintedBy, itv.LabelPrintDate, itv.UpdatedBy, itv.Updated, itv.ID)
	_, err = db.Exec(sqlstr, itv.TestID, itv.TemplateID, itv.TemplateName, itv.LabelPrinted, itv.LabelPrintedBy, itv.LabelPrintDate, itv.UpdatedBy, itv.Updated, itv.ID)
	return err
}

// Save saves the IgeTestsVial to the database.
func (itv *IgeTestsVial) Save(db XODB) error {
	if itv.Exists() {
		return itv.Update(db)
	}

	return itv.Insert(db)
}

// Delete deletes the IgeTestsVial from the database.
func (itv *IgeTestsVial) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itv._exists {
		return nil
	}

	// if deleted, bail
	if itv._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.ige_tests_vials WHERE id = ?`

	// run query
	XOLog(sqlstr, itv.ID)
	_, err = db.Exec(sqlstr, itv.ID)
	if err != nil {
		return err
	}

	// set deleted
	itv._deleted = true

	return nil
}

// IgeTestTemplate returns the IgeTestTemplate associated with the IgeTestsVial's TemplateID (template_id).
//
// Generated from foreign key 'rast_tests_vials_template'.
func (itv *IgeTestsVial) IgeTestTemplate(db XODB) (*IgeTestTemplate, error) {
	return IgeTestTemplateByID(db, uint(itv.TemplateID.Int64))
}

// IgeTest returns the IgeTest associated with the IgeTestsVial's TestID (test_id).
//
// Generated from foreign key 'rast_tests_vials_test'.
func (itv *IgeTestsVial) IgeTest(db XODB) (*IgeTest, error) {
	return IgeTestByID(db, uint(itv.TestID.Int64))
}

// User returns the User associated with the IgeTestsVial's UpdatedBy (updated_by).
//
// Generated from foreign key 'rast_tests_vials_updated'.
func (itv *IgeTestsVial) User(db XODB) (*User, error) {
	return UserByID(db, uint(itv.UpdatedBy.Int64))
}

// IgeTestsVialsByTemplateID retrieves a row from 'AllergyNew.ige_tests_vials' as a IgeTestsVial.
//
// Generated from index 'Templates'.
func IgeTestsVialsByTemplateID(db XODB, templateID sql.NullInt64) ([]*IgeTestsVial, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, template_id, template_name, label_printed, label_printed_by, label_print_date, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_vials ` +
		`WHERE template_id = ?`

	// run query
	XOLog(sqlstr, templateID)
	q, err := db.Query(sqlstr, templateID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsVial{}
	for q.Next() {
		itv := IgeTestsVial{
			_exists: true,
		}

		// scan
		err = q.Scan(&itv.ID, &itv.TestID, &itv.TemplateID, &itv.TemplateName, &itv.LabelPrinted, &itv.LabelPrintedBy, &itv.LabelPrintDate, &itv.UpdatedBy, &itv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &itv)
	}

	return res, nil
}

// IgeTestsVialsByTestID retrieves a row from 'AllergyNew.ige_tests_vials' as a IgeTestsVial.
//
// Generated from index 'Tests'.
func IgeTestsVialsByTestID(db XODB, testID sql.NullInt64) ([]*IgeTestsVial, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, template_id, template_name, label_printed, label_printed_by, label_print_date, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_vials ` +
		`WHERE test_id = ?`

	// run query
	XOLog(sqlstr, testID)
	q, err := db.Query(sqlstr, testID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsVial{}
	for q.Next() {
		itv := IgeTestsVial{
			_exists: true,
		}

		// scan
		err = q.Scan(&itv.ID, &itv.TestID, &itv.TemplateID, &itv.TemplateName, &itv.LabelPrinted, &itv.LabelPrintedBy, &itv.LabelPrintDate, &itv.UpdatedBy, &itv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &itv)
	}

	return res, nil
}

// IgeTestsVialByID retrieves a row from 'AllergyNew.ige_tests_vials' as a IgeTestsVial.
//
// Generated from index 'ige_tests_vials_id_pkey'.
func IgeTestsVialByID(db XODB, id uint) (*IgeTestsVial, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, template_id, template_name, label_printed, label_printed_by, label_print_date, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_vials ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	itv := IgeTestsVial{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&itv.ID, &itv.TestID, &itv.TemplateID, &itv.TemplateName, &itv.LabelPrinted, &itv.LabelPrintedBy, &itv.LabelPrintDate, &itv.UpdatedBy, &itv.Updated)
	if err != nil {
		return nil, err
	}

	return &itv, nil
}

// IgeTestsVialsByUpdatedBy retrieves a row from 'AllergyNew.ige_tests_vials' as a IgeTestsVial.
//
// Generated from index 'rast_tests_vials_updated'.
func IgeTestsVialsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*IgeTestsVial, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, template_id, template_name, label_printed, label_printed_by, label_print_date, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_vials ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsVial{}
	for q.Next() {
		itv := IgeTestsVial{
			_exists: true,
		}

		// scan
		err = q.Scan(&itv.ID, &itv.TestID, &itv.TemplateID, &itv.TemplateName, &itv.LabelPrinted, &itv.LabelPrintedBy, &itv.LabelPrintDate, &itv.UpdatedBy, &itv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &itv)
	}

	return res, nil
}
