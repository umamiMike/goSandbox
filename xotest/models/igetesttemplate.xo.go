// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// IgeTestTemplate represents a row from 'AllergyNew.ige_test_templates'.
type IgeTestTemplate struct {
	ID         uint           `json:"id"`          // id
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	LocationID sql.NullInt64  `json:"location_id"` // location_id
	Name       sql.NullString `json:"name"`        // name
	CreateDate mysql.NullTime `json:"create_date"` // create_date
	CreatorID  sql.NullInt64  `json:"creator_id"`  // creator_id
	Active     int8           `json:"active"`      // active
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IgeTestTemplate exists in the database.
func (itt *IgeTestTemplate) Exists() bool {
	return itt._exists
}

// Deleted provides information if the IgeTestTemplate has been deleted from the database.
func (itt *IgeTestTemplate) Deleted() bool {
	return itt._deleted
}

// Insert inserts the IgeTestTemplate to the database.
func (itt *IgeTestTemplate) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if itt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.ige_test_templates (` +
		`practice_id, location_id, name, create_date, creator_id, active, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, itt.PracticeID, itt.LocationID, itt.Name, itt.CreateDate, itt.CreatorID, itt.Active, itt.UpdatedBy, itt.Updated)
	res, err := db.Exec(sqlstr, itt.PracticeID, itt.LocationID, itt.Name, itt.CreateDate, itt.CreatorID, itt.Active, itt.UpdatedBy, itt.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	itt.ID = uint(id)
	itt._exists = true

	return nil
}

// Update updates the IgeTestTemplate in the database.
func (itt *IgeTestTemplate) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if itt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.ige_test_templates SET ` +
		`practice_id = ?, location_id = ?, name = ?, create_date = ?, creator_id = ?, active = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, itt.PracticeID, itt.LocationID, itt.Name, itt.CreateDate, itt.CreatorID, itt.Active, itt.UpdatedBy, itt.Updated, itt.ID)
	_, err = db.Exec(sqlstr, itt.PracticeID, itt.LocationID, itt.Name, itt.CreateDate, itt.CreatorID, itt.Active, itt.UpdatedBy, itt.Updated, itt.ID)
	return err
}

// Save saves the IgeTestTemplate to the database.
func (itt *IgeTestTemplate) Save(db XODB) error {
	if itt.Exists() {
		return itt.Update(db)
	}

	return itt.Insert(db)
}

// Delete deletes the IgeTestTemplate from the database.
func (itt *IgeTestTemplate) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itt._exists {
		return nil
	}

	// if deleted, bail
	if itt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.ige_test_templates WHERE id = ?`

	// run query
	XOLog(sqlstr, itt.ID)
	_, err = db.Exec(sqlstr, itt.ID)
	if err != nil {
		return err
	}

	// set deleted
	itt._deleted = true

	return nil
}

// UserByCreatorID returns the User associated with the IgeTestTemplate's CreatorID (creator_id).
//
// Generated from foreign key 'rast_test_templates_creator_id'.
func (itt *IgeTestTemplate) UserByCreatorID(db XODB) (*User, error) {
	return UserByID(db, uint(itt.CreatorID.Int64))
}

// PracticeLocation returns the PracticeLocation associated with the IgeTestTemplate's LocationID (location_id).
//
// Generated from foreign key 'rast_test_templates_location'.
func (itt *IgeTestTemplate) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(itt.LocationID.Int64))
}

// Practice returns the Practice associated with the IgeTestTemplate's PracticeID (practice_id).
//
// Generated from foreign key 'rast_test_templates_practice'.
func (itt *IgeTestTemplate) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(itt.PracticeID.Int64))
}

// UserByUpdatedBy returns the User associated with the IgeTestTemplate's UpdatedBy (updated_by).
//
// Generated from foreign key 'rast_test_templates_updated'.
func (itt *IgeTestTemplate) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(itt.UpdatedBy.Int64))
}

// IgeTestTemplatesByLocationID retrieves a row from 'AllergyNew.ige_test_templates' as a IgeTestTemplate.
//
// Generated from index 'Locations'.
func IgeTestTemplatesByLocationID(db XODB, locationID sql.NullInt64) ([]*IgeTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, name, create_date, creator_id, active, updated_by, updated ` +
		`FROM AllergyNew.ige_test_templates ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestTemplate{}
	for q.Next() {
		itt := IgeTestTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&itt.ID, &itt.PracticeID, &itt.LocationID, &itt.Name, &itt.CreateDate, &itt.CreatorID, &itt.Active, &itt.UpdatedBy, &itt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &itt)
	}

	return res, nil
}

// IgeTestTemplatesByPracticeID retrieves a row from 'AllergyNew.ige_test_templates' as a IgeTestTemplate.
//
// Generated from index 'Practices'.
func IgeTestTemplatesByPracticeID(db XODB, practiceID sql.NullInt64) ([]*IgeTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, name, create_date, creator_id, active, updated_by, updated ` +
		`FROM AllergyNew.ige_test_templates ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestTemplate{}
	for q.Next() {
		itt := IgeTestTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&itt.ID, &itt.PracticeID, &itt.LocationID, &itt.Name, &itt.CreateDate, &itt.CreatorID, &itt.Active, &itt.UpdatedBy, &itt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &itt)
	}

	return res, nil
}

// IgeTestTemplateByID retrieves a row from 'AllergyNew.ige_test_templates' as a IgeTestTemplate.
//
// Generated from index 'ige_test_templates_id_pkey'.
func IgeTestTemplateByID(db XODB, id uint) (*IgeTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, name, create_date, creator_id, active, updated_by, updated ` +
		`FROM AllergyNew.ige_test_templates ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	itt := IgeTestTemplate{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&itt.ID, &itt.PracticeID, &itt.LocationID, &itt.Name, &itt.CreateDate, &itt.CreatorID, &itt.Active, &itt.UpdatedBy, &itt.Updated)
	if err != nil {
		return nil, err
	}

	return &itt, nil
}

// IgeTestTemplatesByCreatorID retrieves a row from 'AllergyNew.ige_test_templates' as a IgeTestTemplate.
//
// Generated from index 'rast_test_templates_creator_id'.
func IgeTestTemplatesByCreatorID(db XODB, creatorID sql.NullInt64) ([]*IgeTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, name, create_date, creator_id, active, updated_by, updated ` +
		`FROM AllergyNew.ige_test_templates ` +
		`WHERE creator_id = ?`

	// run query
	XOLog(sqlstr, creatorID)
	q, err := db.Query(sqlstr, creatorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestTemplate{}
	for q.Next() {
		itt := IgeTestTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&itt.ID, &itt.PracticeID, &itt.LocationID, &itt.Name, &itt.CreateDate, &itt.CreatorID, &itt.Active, &itt.UpdatedBy, &itt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &itt)
	}

	return res, nil
}

// IgeTestTemplatesByUpdatedBy retrieves a row from 'AllergyNew.ige_test_templates' as a IgeTestTemplate.
//
// Generated from index 'rast_test_templates_updated'.
func IgeTestTemplatesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*IgeTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, name, create_date, creator_id, active, updated_by, updated ` +
		`FROM AllergyNew.ige_test_templates ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestTemplate{}
	for q.Next() {
		itt := IgeTestTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&itt.ID, &itt.PracticeID, &itt.LocationID, &itt.Name, &itt.CreateDate, &itt.CreatorID, &itt.Active, &itt.UpdatedBy, &itt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &itt)
	}

	return res, nil
}
