// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PrickTestTemplatesAntigen represents a row from 'AllergyNew.prick_test_templates_antigens'.
type PrickTestTemplatesAntigen struct {
	ID         uint          `json:"id"`          // id
	TemplateID sql.NullInt64 `json:"template_id"` // template_id
	AntigenID  sql.NullInt64 `json:"antigen_id"`  // antigen_id
	Order      sql.NullInt64 `json:"order"`       // order
	IsBreak    int8          `json:"is_break"`    // is_break
	UpdatedBy  sql.NullInt64 `json:"updated_by"`  // updated_by
	Updated    time.Time     `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PrickTestTemplatesAntigen exists in the database.
func (ptta *PrickTestTemplatesAntigen) Exists() bool {
	return ptta._exists
}

// Deleted provides information if the PrickTestTemplatesAntigen has been deleted from the database.
func (ptta *PrickTestTemplatesAntigen) Deleted() bool {
	return ptta._deleted
}

// Insert inserts the PrickTestTemplatesAntigen to the database.
func (ptta *PrickTestTemplatesAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ptta._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.prick_test_templates_antigens (` +
		`template_id, antigen_id, order, is_break, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ptta.TemplateID, ptta.AntigenID, ptta.Order, ptta.IsBreak, ptta.UpdatedBy, ptta.Updated)
	res, err := db.Exec(sqlstr, ptta.TemplateID, ptta.AntigenID, ptta.Order, ptta.IsBreak, ptta.UpdatedBy, ptta.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ptta.ID = uint(id)
	ptta._exists = true

	return nil
}

// Update updates the PrickTestTemplatesAntigen in the database.
func (ptta *PrickTestTemplatesAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ptta._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ptta._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.prick_test_templates_antigens SET ` +
		`template_id = ?, antigen_id = ?, order = ?, is_break = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ptta.TemplateID, ptta.AntigenID, ptta.Order, ptta.IsBreak, ptta.UpdatedBy, ptta.Updated, ptta.ID)
	_, err = db.Exec(sqlstr, ptta.TemplateID, ptta.AntigenID, ptta.Order, ptta.IsBreak, ptta.UpdatedBy, ptta.Updated, ptta.ID)
	return err
}

// Save saves the PrickTestTemplatesAntigen to the database.
func (ptta *PrickTestTemplatesAntigen) Save(db XODB) error {
	if ptta.Exists() {
		return ptta.Update(db)
	}

	return ptta.Insert(db)
}

// Delete deletes the PrickTestTemplatesAntigen from the database.
func (ptta *PrickTestTemplatesAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ptta._exists {
		return nil
	}

	// if deleted, bail
	if ptta._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.prick_test_templates_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, ptta.ID)
	_, err = db.Exec(sqlstr, ptta.ID)
	if err != nil {
		return err
	}

	// set deleted
	ptta._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the PrickTestTemplatesAntigen's AntigenID (antigen_id).
//
// Generated from foreign key 'prick_test_templates_antigens_antigens'.
func (ptta *PrickTestTemplatesAntigen) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(ptta.AntigenID.Int64))
}

// PrickTestTemplate returns the PrickTestTemplate associated with the PrickTestTemplatesAntigen's TemplateID (template_id).
//
// Generated from foreign key 'prick_test_templates_antigens_template'.
func (ptta *PrickTestTemplatesAntigen) PrickTestTemplate(db XODB) (*PrickTestTemplate, error) {
	return PrickTestTemplateByID(db, uint(ptta.TemplateID.Int64))
}

// User returns the User associated with the PrickTestTemplatesAntigen's UpdatedBy (updated_by).
//
// Generated from foreign key 'prick_test_templates_antigens_updated'.
func (ptta *PrickTestTemplatesAntigen) User(db XODB) (*User, error) {
	return UserByID(db, uint(ptta.UpdatedBy.Int64))
}

// PrickTestTemplatesAntigensByTemplateID retrieves a row from 'AllergyNew.prick_test_templates_antigens' as a PrickTestTemplatesAntigen.
//
// Generated from index 'Templates'.
func PrickTestTemplatesAntigensByTemplateID(db XODB, templateID sql.NullInt64) ([]*PrickTestTemplatesAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, template_id, antigen_id, order, is_break, updated_by, updated ` +
		`FROM AllergyNew.prick_test_templates_antigens ` +
		`WHERE template_id = ?`

	// run query
	XOLog(sqlstr, templateID)
	q, err := db.Query(sqlstr, templateID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestTemplatesAntigen{}
	for q.Next() {
		ptta := PrickTestTemplatesAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptta.ID, &ptta.TemplateID, &ptta.AntigenID, &ptta.Order, &ptta.IsBreak, &ptta.UpdatedBy, &ptta.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptta)
	}

	return res, nil
}

// PrickTestTemplatesAntigensByAntigenID retrieves a row from 'AllergyNew.prick_test_templates_antigens' as a PrickTestTemplatesAntigen.
//
// Generated from index 'prick_test_templates_antigens_antigens'.
func PrickTestTemplatesAntigensByAntigenID(db XODB, antigenID sql.NullInt64) ([]*PrickTestTemplatesAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, template_id, antigen_id, order, is_break, updated_by, updated ` +
		`FROM AllergyNew.prick_test_templates_antigens ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestTemplatesAntigen{}
	for q.Next() {
		ptta := PrickTestTemplatesAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptta.ID, &ptta.TemplateID, &ptta.AntigenID, &ptta.Order, &ptta.IsBreak, &ptta.UpdatedBy, &ptta.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptta)
	}

	return res, nil
}

// PrickTestTemplatesAntigenByID retrieves a row from 'AllergyNew.prick_test_templates_antigens' as a PrickTestTemplatesAntigen.
//
// Generated from index 'prick_test_templates_antigens_id_pkey'.
func PrickTestTemplatesAntigenByID(db XODB, id uint) (*PrickTestTemplatesAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, template_id, antigen_id, order, is_break, updated_by, updated ` +
		`FROM AllergyNew.prick_test_templates_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ptta := PrickTestTemplatesAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ptta.ID, &ptta.TemplateID, &ptta.AntigenID, &ptta.Order, &ptta.IsBreak, &ptta.UpdatedBy, &ptta.Updated)
	if err != nil {
		return nil, err
	}

	return &ptta, nil
}

// PrickTestTemplatesAntigensByUpdatedBy retrieves a row from 'AllergyNew.prick_test_templates_antigens' as a PrickTestTemplatesAntigen.
//
// Generated from index 'prick_test_templates_antigens_updated'.
func PrickTestTemplatesAntigensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PrickTestTemplatesAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, template_id, antigen_id, order, is_break, updated_by, updated ` +
		`FROM AllergyNew.prick_test_templates_antigens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestTemplatesAntigen{}
	for q.Next() {
		ptta := PrickTestTemplatesAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptta.ID, &ptta.TemplateID, &ptta.AntigenID, &ptta.Order, &ptta.IsBreak, &ptta.UpdatedBy, &ptta.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptta)
	}

	return res, nil
}
