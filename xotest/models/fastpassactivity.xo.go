// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// FastpassActivity represents a row from 'AllergyNew.fastpass_activity'.
type FastpassActivity struct {
	ID         uint           `json:"id"`          // id
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	LocationID sql.NullInt64  `json:"location_id"` // location_id
	Scan       sql.NullString `json:"scan"`        // scan
	Result     sql.NullString `json:"result"`      // result
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FastpassActivity exists in the database.
func (fa *FastpassActivity) Exists() bool {
	return fa._exists
}

// Deleted provides information if the FastpassActivity has been deleted from the database.
func (fa *FastpassActivity) Deleted() bool {
	return fa._deleted
}

// Insert inserts the FastpassActivity to the database.
func (fa *FastpassActivity) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.fastpass_activity (` +
		`practice_id, location_id, scan, result, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fa.PracticeID, fa.LocationID, fa.Scan, fa.Result, fa.UpdatedBy, fa.Updated)
	res, err := db.Exec(sqlstr, fa.PracticeID, fa.LocationID, fa.Scan, fa.Result, fa.UpdatedBy, fa.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fa.ID = uint(id)
	fa._exists = true

	return nil
}

// Update updates the FastpassActivity in the database.
func (fa *FastpassActivity) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.fastpass_activity SET ` +
		`practice_id = ?, location_id = ?, scan = ?, result = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, fa.PracticeID, fa.LocationID, fa.Scan, fa.Result, fa.UpdatedBy, fa.Updated, fa.ID)
	_, err = db.Exec(sqlstr, fa.PracticeID, fa.LocationID, fa.Scan, fa.Result, fa.UpdatedBy, fa.Updated, fa.ID)
	return err
}

// Save saves the FastpassActivity to the database.
func (fa *FastpassActivity) Save(db XODB) error {
	if fa.Exists() {
		return fa.Update(db)
	}

	return fa.Insert(db)
}

// Delete deletes the FastpassActivity from the database.
func (fa *FastpassActivity) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fa._exists {
		return nil
	}

	// if deleted, bail
	if fa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.fastpass_activity WHERE id = ?`

	// run query
	XOLog(sqlstr, fa.ID)
	_, err = db.Exec(sqlstr, fa.ID)
	if err != nil {
		return err
	}

	// set deleted
	fa._deleted = true

	return nil
}

// FastpassActivityByID retrieves a row from 'AllergyNew.fastpass_activity' as a FastpassActivity.
//
// Generated from index 'fastpass_activity_id_pkey'.
func FastpassActivityByID(db XODB, id uint) (*FastpassActivity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, scan, result, updated_by, updated ` +
		`FROM AllergyNew.fastpass_activity ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fa := FastpassActivity{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fa.ID, &fa.PracticeID, &fa.LocationID, &fa.Scan, &fa.Result, &fa.UpdatedBy, &fa.Updated)
	if err != nil {
		return nil, err
	}

	return &fa, nil
}

// FastpassActivitiesByLocationID retrieves a row from 'AllergyNew.fastpass_activity' as a FastpassActivity.
//
// Generated from index 'fastpass_activity_location_id'.
func FastpassActivitiesByLocationID(db XODB, locationID sql.NullInt64) ([]*FastpassActivity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, scan, result, updated_by, updated ` +
		`FROM AllergyNew.fastpass_activity ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FastpassActivity{}
	for q.Next() {
		fa := FastpassActivity{
			_exists: true,
		}

		// scan
		err = q.Scan(&fa.ID, &fa.PracticeID, &fa.LocationID, &fa.Scan, &fa.Result, &fa.UpdatedBy, &fa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fa)
	}

	return res, nil
}

// FastpassActivitiesByPracticeID retrieves a row from 'AllergyNew.fastpass_activity' as a FastpassActivity.
//
// Generated from index 'fastpass_activity_practice_id'.
func FastpassActivitiesByPracticeID(db XODB, practiceID sql.NullInt64) ([]*FastpassActivity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, scan, result, updated_by, updated ` +
		`FROM AllergyNew.fastpass_activity ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FastpassActivity{}
	for q.Next() {
		fa := FastpassActivity{
			_exists: true,
		}

		// scan
		err = q.Scan(&fa.ID, &fa.PracticeID, &fa.LocationID, &fa.Scan, &fa.Result, &fa.UpdatedBy, &fa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fa)
	}

	return res, nil
}
