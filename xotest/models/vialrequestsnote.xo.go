// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// VialRequestsNote represents a row from 'AllergyNew.vial_requests_notes'.
type VialRequestsNote struct {
	ID         uint           `json:"id"`          // id
	RequestID  sql.NullInt64  `json:"request_id"`  // request_id
	Note       sql.NullString `json:"note"`        // note
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	CreatorID  sql.NullInt64  `json:"creator_id"`  // creator_id
	CreateDate mysql.NullTime `json:"create_date"` // create_date
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialRequestsNote exists in the database.
func (vrn *VialRequestsNote) Exists() bool {
	return vrn._exists
}

// Deleted provides information if the VialRequestsNote has been deleted from the database.
func (vrn *VialRequestsNote) Deleted() bool {
	return vrn._deleted
}

// Insert inserts the VialRequestsNote to the database.
func (vrn *VialRequestsNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vrn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_requests_notes (` +
		`request_id, note, practice_id, creator_id, create_date, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vrn.RequestID, vrn.Note, vrn.PracticeID, vrn.CreatorID, vrn.CreateDate, vrn.UpdatedBy, vrn.Updated)
	res, err := db.Exec(sqlstr, vrn.RequestID, vrn.Note, vrn.PracticeID, vrn.CreatorID, vrn.CreateDate, vrn.UpdatedBy, vrn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vrn.ID = uint(id)
	vrn._exists = true

	return nil
}

// Update updates the VialRequestsNote in the database.
func (vrn *VialRequestsNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vrn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_requests_notes SET ` +
		`request_id = ?, note = ?, practice_id = ?, creator_id = ?, create_date = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vrn.RequestID, vrn.Note, vrn.PracticeID, vrn.CreatorID, vrn.CreateDate, vrn.UpdatedBy, vrn.Updated, vrn.ID)
	_, err = db.Exec(sqlstr, vrn.RequestID, vrn.Note, vrn.PracticeID, vrn.CreatorID, vrn.CreateDate, vrn.UpdatedBy, vrn.Updated, vrn.ID)
	return err
}

// Save saves the VialRequestsNote to the database.
func (vrn *VialRequestsNote) Save(db XODB) error {
	if vrn.Exists() {
		return vrn.Update(db)
	}

	return vrn.Insert(db)
}

// Delete deletes the VialRequestsNote from the database.
func (vrn *VialRequestsNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrn._exists {
		return nil
	}

	// if deleted, bail
	if vrn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_requests_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, vrn.ID)
	_, err = db.Exec(sqlstr, vrn.ID)
	if err != nil {
		return err
	}

	// set deleted
	vrn._deleted = true

	return nil
}

// UserByCreatorID returns the User associated with the VialRequestsNote's CreatorID (creator_id).
//
// Generated from foreign key 'vial_requests_notes_creator'.
func (vrn *VialRequestsNote) UserByCreatorID(db XODB) (*User, error) {
	return UserByID(db, uint(vrn.CreatorID.Int64))
}

// VialRequest returns the VialRequest associated with the VialRequestsNote's RequestID (request_id).
//
// Generated from foreign key 'vial_requests_notes_requests'.
func (vrn *VialRequestsNote) VialRequest(db XODB) (*VialRequest, error) {
	return VialRequestByID(db, uint(vrn.RequestID.Int64))
}

// UserByUpdatedBy returns the User associated with the VialRequestsNote's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_requests_notes_updated'.
func (vrn *VialRequestsNote) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(vrn.UpdatedBy.Int64))
}

// VialRequestsNotesByRequestID retrieves a row from 'AllergyNew.vial_requests_notes' as a VialRequestsNote.
//
// Generated from index 'Requests'.
func VialRequestsNotesByRequestID(db XODB, requestID sql.NullInt64) ([]*VialRequestsNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, note, practice_id, creator_id, create_date, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_notes ` +
		`WHERE request_id = ?`

	// run query
	XOLog(sqlstr, requestID)
	q, err := db.Query(sqlstr, requestID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsNote{}
	for q.Next() {
		vrn := VialRequestsNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrn.ID, &vrn.RequestID, &vrn.Note, &vrn.PracticeID, &vrn.CreatorID, &vrn.CreateDate, &vrn.UpdatedBy, &vrn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrn)
	}

	return res, nil
}

// VialRequestsNotesByCreatorID retrieves a row from 'AllergyNew.vial_requests_notes' as a VialRequestsNote.
//
// Generated from index 'vial_requests_notes_creator'.
func VialRequestsNotesByCreatorID(db XODB, creatorID sql.NullInt64) ([]*VialRequestsNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, note, practice_id, creator_id, create_date, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_notes ` +
		`WHERE creator_id = ?`

	// run query
	XOLog(sqlstr, creatorID)
	q, err := db.Query(sqlstr, creatorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsNote{}
	for q.Next() {
		vrn := VialRequestsNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrn.ID, &vrn.RequestID, &vrn.Note, &vrn.PracticeID, &vrn.CreatorID, &vrn.CreateDate, &vrn.UpdatedBy, &vrn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrn)
	}

	return res, nil
}

// VialRequestsNoteByID retrieves a row from 'AllergyNew.vial_requests_notes' as a VialRequestsNote.
//
// Generated from index 'vial_requests_notes_id_pkey'.
func VialRequestsNoteByID(db XODB, id uint) (*VialRequestsNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, note, practice_id, creator_id, create_date, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vrn := VialRequestsNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vrn.ID, &vrn.RequestID, &vrn.Note, &vrn.PracticeID, &vrn.CreatorID, &vrn.CreateDate, &vrn.UpdatedBy, &vrn.Updated)
	if err != nil {
		return nil, err
	}

	return &vrn, nil
}

// VialRequestsNotesByUpdatedBy retrieves a row from 'AllergyNew.vial_requests_notes' as a VialRequestsNote.
//
// Generated from index 'vial_requests_notes_updated'.
func VialRequestsNotesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialRequestsNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, note, practice_id, creator_id, create_date, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_notes ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsNote{}
	for q.Next() {
		vrn := VialRequestsNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrn.ID, &vrn.RequestID, &vrn.Note, &vrn.PracticeID, &vrn.CreatorID, &vrn.CreateDate, &vrn.UpdatedBy, &vrn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrn)
	}

	return res, nil
}
