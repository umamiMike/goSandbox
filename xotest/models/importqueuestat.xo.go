// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// ImportQueueStat represents a row from 'AllergyNew.import_queue_stats'.
type ImportQueueStat struct {
	ID             int    `json:"id"`              // id
	PracticeID     int    `json:"practice_id"`     // practice_id
	Type           string `json:"type"`            // type
	RecordsRead    int    `json:"records_read"`    // records_read
	RecordsWritten int    `json:"records_written"` // records_written

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ImportQueueStat exists in the database.
func (iqs *ImportQueueStat) Exists() bool {
	return iqs._exists
}

// Deleted provides information if the ImportQueueStat has been deleted from the database.
func (iqs *ImportQueueStat) Deleted() bool {
	return iqs._deleted
}

// Insert inserts the ImportQueueStat to the database.
func (iqs *ImportQueueStat) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if iqs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.import_queue_stats (` +
		`practice_id, type, records_read, records_written` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, iqs.PracticeID, iqs.Type, iqs.RecordsRead, iqs.RecordsWritten)
	res, err := db.Exec(sqlstr, iqs.PracticeID, iqs.Type, iqs.RecordsRead, iqs.RecordsWritten)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	iqs.ID = int(id)
	iqs._exists = true

	return nil
}

// Update updates the ImportQueueStat in the database.
func (iqs *ImportQueueStat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if iqs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.import_queue_stats SET ` +
		`practice_id = ?, type = ?, records_read = ?, records_written = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, iqs.PracticeID, iqs.Type, iqs.RecordsRead, iqs.RecordsWritten, iqs.ID)
	_, err = db.Exec(sqlstr, iqs.PracticeID, iqs.Type, iqs.RecordsRead, iqs.RecordsWritten, iqs.ID)
	return err
}

// Save saves the ImportQueueStat to the database.
func (iqs *ImportQueueStat) Save(db XODB) error {
	if iqs.Exists() {
		return iqs.Update(db)
	}

	return iqs.Insert(db)
}

// Delete deletes the ImportQueueStat from the database.
func (iqs *ImportQueueStat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqs._exists {
		return nil
	}

	// if deleted, bail
	if iqs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.import_queue_stats WHERE id = ?`

	// run query
	XOLog(sqlstr, iqs.ID)
	_, err = db.Exec(sqlstr, iqs.ID)
	if err != nil {
		return err
	}

	// set deleted
	iqs._deleted = true

	return nil
}

// Importqueuestat represents a row from 'AllergyNew.importQueueStats'.
type Importqueuestat struct {
	ID      string `json:"id"`      // id
	Read    int    `json:"read"`    // read
	Written int    `json:"written"` // written
}

// ImportQueueStatsByType retrieves a row from 'AllergyNew.import_queue_stats' as a ImportQueueStat.
//
// Generated from index 'XMLTypes'.
func ImportQueueStatsByType(db XODB, typ string) ([]*ImportQueueStat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, type, records_read, records_written ` +
		`FROM AllergyNew.import_queue_stats ` +
		`WHERE type = ?`

	// run query
	XOLog(sqlstr, typ)
	q, err := db.Query(sqlstr, typ)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ImportQueueStat{}
	for q.Next() {
		iqs := ImportQueueStat{
			_exists: true,
		}

		// scan
		err = q.Scan(&iqs.ID, &iqs.PracticeID, &iqs.Type, &iqs.RecordsRead, &iqs.RecordsWritten)
		if err != nil {
			return nil, err
		}

		res = append(res, &iqs)
	}

	return res, nil
}

// ImportQueueStatByID retrieves a row from 'AllergyNew.import_queue_stats' as a ImportQueueStat.
//
// Generated from index 'import_queue_stats_id_pkey'.
func ImportQueueStatByID(db XODB, id int) (*ImportQueueStat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, type, records_read, records_written ` +
		`FROM AllergyNew.import_queue_stats ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	iqs := ImportQueueStat{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&iqs.ID, &iqs.PracticeID, &iqs.Type, &iqs.RecordsRead, &iqs.RecordsWritten)
	if err != nil {
		return nil, err
	}

	return &iqs, nil
}

// ImportqueuestatsByID retrieves a row from 'AllergyNew.importQueueStats' as a Importqueuestat.
//
// Generated from index 'XMLTypes'.
func ImportqueuestatsByID(db XODB, id string) ([]*Importqueuestat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, read, written ` +
		`FROM AllergyNew.importQueueStats ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	q, err := db.Query(sqlstr, id)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Importqueuestat{}
	for q.Next() {
		i := Importqueuestat{}

		// scan
		err = q.Scan(&i.ID, &i.Read, &i.Written)
		if err != nil {
			return nil, err
		}

		res = append(res, &i)
	}

	return res, nil
}
