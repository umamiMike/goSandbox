// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// ChangeMethod is the 'change_method' enum type from schema 'AllergyNew'.
type ChangeMethod uint16

const (
	// ChangeMethodDirect is the 'direct' ChangeMethod.
	ChangeMethodDirect = ChangeMethod(1)

	// ChangeMethodShipped is the 'shipped' ChangeMethod.
	ChangeMethodShipped = ChangeMethod(2)

	// ChangeMethodHanded is the 'handed' ChangeMethod.
	ChangeMethodHanded = ChangeMethod(3)
)

// String returns the string value of the ChangeMethod.
func (cm ChangeMethod) String() string {
	var enumVal string

	switch cm {
	case ChangeMethodDirect:
		enumVal = "direct"

	case ChangeMethodShipped:
		enumVal = "shipped"

	case ChangeMethodHanded:
		enumVal = "handed"
	}

	return enumVal
}

// MarshalText marshals ChangeMethod into text.
func (cm ChangeMethod) MarshalText() ([]byte, error) {
	return []byte(cm.String()), nil
}

// UnmarshalText unmarshals ChangeMethod from text.
func (cm *ChangeMethod) UnmarshalText(text []byte) error {
	switch string(text) {
	case "direct":
		*cm = ChangeMethodDirect

	case "shipped":
		*cm = ChangeMethodShipped

	case "handed":
		*cm = ChangeMethodHanded

	default:
		return errors.New("invalid ChangeMethod")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for ChangeMethod.
func (cm ChangeMethod) Value() (driver.Value, error) {
	return cm.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for ChangeMethod.
func (cm *ChangeMethod) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid ChangeMethod")
	}

	return cm.UnmarshalText(buf)
}
