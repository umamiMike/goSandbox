// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// VialRequest represents a row from 'AllergyNew.vial_requests'.
type VialRequest struct {
	ID               uint           `json:"id"`                 // id
	PatientID        sql.NullInt64  `json:"patient_id"`         // patient_id
	PracticeID       sql.NullInt64  `json:"practice_id"`        // practice_id
	LocationID       sql.NullInt64  `json:"location_id"`        // location_id
	FormulaID        sql.NullInt64  `json:"formula_id"`         // formula_id
	CreatorID        sql.NullInt64  `json:"creator_id"`         // creator_id
	CreateDate       mysql.NullTime `json:"create_date"`        // create_date
	CreatedNotTested sql.NullBool   `json:"created_not_tested"` // created_not_tested
	ReviewerID       sql.NullInt64  `json:"reviewer_id"`        // reviewer_id
	ReviewDate       mysql.NullTime `json:"review_date"`        // review_date
	Signed           int8           `json:"signed"`             // signed
	SignedDate       mysql.NullTime `json:"signed_date"`        // signed_date
	SignedBy         sql.NullInt64  `json:"signed_by"`          // signed_by
	MixPracticeID    sql.NullInt64  `json:"mix_practice_id"`    // mix_practice_id
	MixLocationID    sql.NullInt64  `json:"mix_location_id"`    // mix_location_id
	MixerID          sql.NullInt64  `json:"mixer_id"`           // mixer_id
	MixDate          mysql.NullTime `json:"mix_date"`           // mix_date
	HoldReason       sql.NullString `json:"hold_reason"`        // hold_reason
	HoldDate         mysql.NullTime `json:"hold_date"`          // hold_date
	StatusID         sql.NullInt64  `json:"status_id"`          // status_id
	IsChild          sql.NullInt64  `json:"is_child"`           // is_child
	Archived         int8           `json:"archived"`           // archived
	Priority         int8           `json:"priority"`           // priority
	UpdatedBy        sql.NullInt64  `json:"updated_by"`         // updated_by
	Updated          time.Time      `json:"updated"`            // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialRequest exists in the database.
func (vr *VialRequest) Exists() bool {
	return vr._exists
}

// Deleted provides information if the VialRequest has been deleted from the database.
func (vr *VialRequest) Deleted() bool {
	return vr._deleted
}

// Insert inserts the VialRequest to the database.
func (vr *VialRequest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_requests (` +
		`patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vr.PatientID, vr.PracticeID, vr.LocationID, vr.FormulaID, vr.CreatorID, vr.CreateDate, vr.CreatedNotTested, vr.ReviewerID, vr.ReviewDate, vr.Signed, vr.SignedDate, vr.SignedBy, vr.MixPracticeID, vr.MixLocationID, vr.MixerID, vr.MixDate, vr.HoldReason, vr.HoldDate, vr.StatusID, vr.IsChild, vr.Archived, vr.Priority, vr.UpdatedBy, vr.Updated)
	res, err := db.Exec(sqlstr, vr.PatientID, vr.PracticeID, vr.LocationID, vr.FormulaID, vr.CreatorID, vr.CreateDate, vr.CreatedNotTested, vr.ReviewerID, vr.ReviewDate, vr.Signed, vr.SignedDate, vr.SignedBy, vr.MixPracticeID, vr.MixLocationID, vr.MixerID, vr.MixDate, vr.HoldReason, vr.HoldDate, vr.StatusID, vr.IsChild, vr.Archived, vr.Priority, vr.UpdatedBy, vr.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vr.ID = uint(id)
	vr._exists = true

	return nil
}

// Update updates the VialRequest in the database.
func (vr *VialRequest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_requests SET ` +
		`patient_id = ?, practice_id = ?, location_id = ?, formula_id = ?, creator_id = ?, create_date = ?, created_not_tested = ?, reviewer_id = ?, review_date = ?, signed = ?, signed_date = ?, signed_by = ?, mix_practice_id = ?, mix_location_id = ?, mixer_id = ?, mix_date = ?, hold_reason = ?, hold_date = ?, status_id = ?, is_child = ?, archived = ?, priority = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vr.PatientID, vr.PracticeID, vr.LocationID, vr.FormulaID, vr.CreatorID, vr.CreateDate, vr.CreatedNotTested, vr.ReviewerID, vr.ReviewDate, vr.Signed, vr.SignedDate, vr.SignedBy, vr.MixPracticeID, vr.MixLocationID, vr.MixerID, vr.MixDate, vr.HoldReason, vr.HoldDate, vr.StatusID, vr.IsChild, vr.Archived, vr.Priority, vr.UpdatedBy, vr.Updated, vr.ID)
	_, err = db.Exec(sqlstr, vr.PatientID, vr.PracticeID, vr.LocationID, vr.FormulaID, vr.CreatorID, vr.CreateDate, vr.CreatedNotTested, vr.ReviewerID, vr.ReviewDate, vr.Signed, vr.SignedDate, vr.SignedBy, vr.MixPracticeID, vr.MixLocationID, vr.MixerID, vr.MixDate, vr.HoldReason, vr.HoldDate, vr.StatusID, vr.IsChild, vr.Archived, vr.Priority, vr.UpdatedBy, vr.Updated, vr.ID)
	return err
}

// Save saves the VialRequest to the database.
func (vr *VialRequest) Save(db XODB) error {
	if vr.Exists() {
		return vr.Update(db)
	}

	return vr.Insert(db)
}

// Delete deletes the VialRequest from the database.
func (vr *VialRequest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vr._exists {
		return nil
	}

	// if deleted, bail
	if vr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_requests WHERE id = ?`

	// run query
	XOLog(sqlstr, vr.ID)
	_, err = db.Exec(sqlstr, vr.ID)
	if err != nil {
		return err
	}

	// set deleted
	vr._deleted = true

	return nil
}

// UserByCreatorID returns the User associated with the VialRequest's CreatorID (creator_id).
//
// Generated from foreign key 'vial_requests_creator'.
func (vr *VialRequest) UserByCreatorID(db XODB) (*User, error) {
	return UserByID(db, uint(vr.CreatorID.Int64))
}

// PracticeLocationByLocationID returns the PracticeLocation associated with the VialRequest's LocationID (location_id).
//
// Generated from foreign key 'vial_requests_location'.
func (vr *VialRequest) PracticeLocationByLocationID(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(vr.LocationID.Int64))
}

// PracticeLocationByMixLocationID returns the PracticeLocation associated with the VialRequest's MixLocationID (mix_location_id).
//
// Generated from foreign key 'vial_requests_mix_location'.
func (vr *VialRequest) PracticeLocationByMixLocationID(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(vr.MixLocationID.Int64))
}

// PracticeByMixPracticeID returns the Practice associated with the VialRequest's MixPracticeID (mix_practice_id).
//
// Generated from foreign key 'vial_requests_mix_practice'.
func (vr *VialRequest) PracticeByMixPracticeID(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(vr.MixPracticeID.Int64))
}

// Patient returns the Patient associated with the VialRequest's PatientID (patient_id).
//
// Generated from foreign key 'vial_requests_patient'.
func (vr *VialRequest) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(vr.PatientID.Int64))
}

// PracticeByPracticeID returns the Practice associated with the VialRequest's PracticeID (practice_id).
//
// Generated from foreign key 'vial_requests_practice'.
func (vr *VialRequest) PracticeByPracticeID(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(vr.PracticeID.Int64))
}

// UserByUpdatedBy returns the User associated with the VialRequest's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_requests_updated'.
func (vr *VialRequest) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(vr.UpdatedBy.Int64))
}

// VialRequestsByFormulaID retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'Formulas'.
func VialRequestsByFormulaID(db XODB, formulaID sql.NullInt64) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE formula_id = ?`

	// run query
	XOLog(sqlstr, formulaID)
	q, err := db.Query(sqlstr, formulaID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestsByLocationID retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'Locations'.
func VialRequestsByLocationID(db XODB, locationID sql.NullInt64) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestsByPatientID retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'Patients'.
func VialRequestsByPatientID(db XODB, patientID sql.NullInt64) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestsByPracticeID retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'Practices'.
func VialRequestsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestsByCreatorID retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'vial_requests_creator'.
func VialRequestsByCreatorID(db XODB, creatorID sql.NullInt64) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE creator_id = ?`

	// run query
	XOLog(sqlstr, creatorID)
	q, err := db.Query(sqlstr, creatorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestsByCreateDate retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'vial_requests_date'.
func VialRequestsByCreateDate(db XODB, createDate mysql.NullTime) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE create_date = ?`

	// run query
	XOLog(sqlstr, createDate)
	q, err := db.Query(sqlstr, createDate)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestByID retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'vial_requests_id_pkey'.
func VialRequestByID(db XODB, id uint) (*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vr := VialRequest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
	if err != nil {
		return nil, err
	}

	return &vr, nil
}

// VialRequestsByMixLocationID retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'vial_requests_mix_location'.
func VialRequestsByMixLocationID(db XODB, mixLocationID sql.NullInt64) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE mix_location_id = ?`

	// run query
	XOLog(sqlstr, mixLocationID)
	q, err := db.Query(sqlstr, mixLocationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestsByMixPracticeID retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'vial_requests_mix_practice'.
func VialRequestsByMixPracticeID(db XODB, mixPracticeID sql.NullInt64) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE mix_practice_id = ?`

	// run query
	XOLog(sqlstr, mixPracticeID)
	q, err := db.Query(sqlstr, mixPracticeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestsByReviewDate retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'vial_requests_reviewdate'.
func VialRequestsByReviewDate(db XODB, reviewDate mysql.NullTime) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE review_date = ?`

	// run query
	XOLog(sqlstr, reviewDate)
	q, err := db.Query(sqlstr, reviewDate)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestsByStatusID retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'vial_requests_status'.
func VialRequestsByStatusID(db XODB, statusID sql.NullInt64) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE status_id = ?`

	// run query
	XOLog(sqlstr, statusID)
	q, err := db.Query(sqlstr, statusID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}

// VialRequestsByUpdatedBy retrieves a row from 'AllergyNew.vial_requests' as a VialRequest.
//
// Generated from index 'vial_requests_updated'.
func VialRequestsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, practice_id, location_id, formula_id, creator_id, create_date, created_not_tested, reviewer_id, review_date, signed, signed_date, signed_by, mix_practice_id, mix_location_id, mixer_id, mix_date, hold_reason, hold_date, status_id, is_child, archived, priority, updated_by, updated ` +
		`FROM AllergyNew.vial_requests ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequest{}
	for q.Next() {
		vr := VialRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&vr.ID, &vr.PatientID, &vr.PracticeID, &vr.LocationID, &vr.FormulaID, &vr.CreatorID, &vr.CreateDate, &vr.CreatedNotTested, &vr.ReviewerID, &vr.ReviewDate, &vr.Signed, &vr.SignedDate, &vr.SignedBy, &vr.MixPracticeID, &vr.MixLocationID, &vr.MixerID, &vr.MixDate, &vr.HoldReason, &vr.HoldDate, &vr.StatusID, &vr.IsChild, &vr.Archived, &vr.Priority, &vr.UpdatedBy, &vr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vr)
	}

	return res, nil
}
