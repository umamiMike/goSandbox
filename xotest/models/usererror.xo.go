// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// UserError represents a row from 'AllergyNew.user_errors'.
type UserError struct {
	ID          uint           `json:"id"`          // id
	PracticeID  sql.NullInt64  `json:"practice_id"` // practice_id
	LocationID  sql.NullInt64  `json:"location_id"` // location_id
	UserID      sql.NullInt64  `json:"user_id"`     // user_id
	CategoryID  sql.NullInt64  `json:"category_id"` // category_id
	Description sql.NullString `json:"description"` // description
	Date        mysql.NullTime `json:"date"`        // date
	UpdatedBy   sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated     time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserError exists in the database.
func (ue *UserError) Exists() bool {
	return ue._exists
}

// Deleted provides information if the UserError has been deleted from the database.
func (ue *UserError) Deleted() bool {
	return ue._deleted
}

// Insert inserts the UserError to the database.
func (ue *UserError) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ue._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.user_errors (` +
		`practice_id, location_id, user_id, category_id, description, date, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ue.PracticeID, ue.LocationID, ue.UserID, ue.CategoryID, ue.Description, ue.Date, ue.UpdatedBy, ue.Updated)
	res, err := db.Exec(sqlstr, ue.PracticeID, ue.LocationID, ue.UserID, ue.CategoryID, ue.Description, ue.Date, ue.UpdatedBy, ue.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ue.ID = uint(id)
	ue._exists = true

	return nil
}

// Update updates the UserError in the database.
func (ue *UserError) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ue._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ue._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.user_errors SET ` +
		`practice_id = ?, location_id = ?, user_id = ?, category_id = ?, description = ?, date = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ue.PracticeID, ue.LocationID, ue.UserID, ue.CategoryID, ue.Description, ue.Date, ue.UpdatedBy, ue.Updated, ue.ID)
	_, err = db.Exec(sqlstr, ue.PracticeID, ue.LocationID, ue.UserID, ue.CategoryID, ue.Description, ue.Date, ue.UpdatedBy, ue.Updated, ue.ID)
	return err
}

// Save saves the UserError to the database.
func (ue *UserError) Save(db XODB) error {
	if ue.Exists() {
		return ue.Update(db)
	}

	return ue.Insert(db)
}

// Delete deletes the UserError from the database.
func (ue *UserError) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ue._exists {
		return nil
	}

	// if deleted, bail
	if ue._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.user_errors WHERE id = ?`

	// run query
	XOLog(sqlstr, ue.ID)
	_, err = db.Exec(sqlstr, ue.ID)
	if err != nil {
		return err
	}

	// set deleted
	ue._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the UserError's LocationID (location_id).
//
// Generated from foreign key 'user_errors_location'.
func (ue *UserError) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(ue.LocationID.Int64))
}

// Practice returns the Practice associated with the UserError's PracticeID (practice_id).
//
// Generated from foreign key 'user_errors_practice'.
func (ue *UserError) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(ue.PracticeID.Int64))
}

// UserByUpdatedBy returns the User associated with the UserError's UpdatedBy (updated_by).
//
// Generated from foreign key 'user_errors_updated'.
func (ue *UserError) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(ue.UpdatedBy.Int64))
}

// UserByUserID returns the User associated with the UserError's UserID (user_id).
//
// Generated from foreign key 'user_errors_user'.
func (ue *UserError) UserByUserID(db XODB) (*User, error) {
	return UserByID(db, uint(ue.UserID.Int64))
}

// UserErrorsByLocationID retrieves a row from 'AllergyNew.user_errors' as a UserError.
//
// Generated from index 'Locations'.
func UserErrorsByLocationID(db XODB, locationID sql.NullInt64) ([]*UserError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, category_id, description, date, updated_by, updated ` +
		`FROM AllergyNew.user_errors ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserError{}
	for q.Next() {
		ue := UserError{
			_exists: true,
		}

		// scan
		err = q.Scan(&ue.ID, &ue.PracticeID, &ue.LocationID, &ue.UserID, &ue.CategoryID, &ue.Description, &ue.Date, &ue.UpdatedBy, &ue.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ue)
	}

	return res, nil
}

// UserErrorsByPracticeID retrieves a row from 'AllergyNew.user_errors' as a UserError.
//
// Generated from index 'Practices'.
func UserErrorsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*UserError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, category_id, description, date, updated_by, updated ` +
		`FROM AllergyNew.user_errors ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserError{}
	for q.Next() {
		ue := UserError{
			_exists: true,
		}

		// scan
		err = q.Scan(&ue.ID, &ue.PracticeID, &ue.LocationID, &ue.UserID, &ue.CategoryID, &ue.Description, &ue.Date, &ue.UpdatedBy, &ue.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ue)
	}

	return res, nil
}

// UserErrorsByUserID retrieves a row from 'AllergyNew.user_errors' as a UserError.
//
// Generated from index 'Users'.
func UserErrorsByUserID(db XODB, userID sql.NullInt64) ([]*UserError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, category_id, description, date, updated_by, updated ` +
		`FROM AllergyNew.user_errors ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserError{}
	for q.Next() {
		ue := UserError{
			_exists: true,
		}

		// scan
		err = q.Scan(&ue.ID, &ue.PracticeID, &ue.LocationID, &ue.UserID, &ue.CategoryID, &ue.Description, &ue.Date, &ue.UpdatedBy, &ue.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ue)
	}

	return res, nil
}

// UserErrorByID retrieves a row from 'AllergyNew.user_errors' as a UserError.
//
// Generated from index 'user_errors_id_pkey'.
func UserErrorByID(db XODB, id uint) (*UserError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, category_id, description, date, updated_by, updated ` +
		`FROM AllergyNew.user_errors ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ue := UserError{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ue.ID, &ue.PracticeID, &ue.LocationID, &ue.UserID, &ue.CategoryID, &ue.Description, &ue.Date, &ue.UpdatedBy, &ue.Updated)
	if err != nil {
		return nil, err
	}

	return &ue, nil
}

// UserErrorsByUpdatedBy retrieves a row from 'AllergyNew.user_errors' as a UserError.
//
// Generated from index 'user_errors_updated'.
func UserErrorsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*UserError, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, category_id, description, date, updated_by, updated ` +
		`FROM AllergyNew.user_errors ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserError{}
	for q.Next() {
		ue := UserError{
			_exists: true,
		}

		// scan
		err = q.Scan(&ue.ID, &ue.PracticeID, &ue.LocationID, &ue.UserID, &ue.CategoryID, &ue.Description, &ue.Date, &ue.UpdatedBy, &ue.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ue)
	}

	return res, nil
}
