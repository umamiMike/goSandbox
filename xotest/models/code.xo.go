// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Code is the 'code' enum type from schema 'AllergyNew'.
type Code uint16

const (
	// CodeShipped is the 'shipped' Code.
	CodeShipped = Code(1)

	// CodePicked is the 'picked' Code.
	CodePicked = Code(2)

	// CodeInhouse is the 'inhouse' Code.
	CodeInhouse = Code(3)

	// CodeReceived is the 'received' Code.
	CodeReceived = Code(4)
)

// String returns the string value of the Code.
func (c Code) String() string {
	var enumVal string

	switch c {
	case CodeShipped:
		enumVal = "shipped"

	case CodePicked:
		enumVal = "picked"

	case CodeInhouse:
		enumVal = "inhouse"

	case CodeReceived:
		enumVal = "received"
	}

	return enumVal
}

// MarshalText marshals Code into text.
func (c Code) MarshalText() ([]byte, error) {
	return []byte(c.String()), nil
}

// UnmarshalText unmarshals Code from text.
func (c *Code) UnmarshalText(text []byte) error {
	switch string(text) {
	case "shipped":
		*c = CodeShipped

	case "picked":
		*c = CodePicked

	case "inhouse":
		*c = CodeInhouse

	case "received":
		*c = CodeReceived

	default:
		return errors.New("invalid Code")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Code.
func (c Code) Value() (driver.Value, error) {
	return c.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Code.
func (c *Code) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Code")
	}

	return c.UnmarshalText(buf)
}
