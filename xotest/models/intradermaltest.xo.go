// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// IntradermalTest represents a row from 'AllergyNew.intradermal_tests'.
type IntradermalTest struct {
	ID                 uint           `json:"id"`                  // id
	PracticeID         sql.NullInt64  `json:"practice_id"`         // practice_id
	LocationID         sql.NullInt64  `json:"location_id"`         // location_id
	OrderID            sql.NullInt64  `json:"order_id"`            // order_id
	UserID             sql.NullInt64  `json:"user_id"`             // user_id
	PatientID          sql.NullInt64  `json:"patient_id"`          // patient_id
	TestDate           mysql.NullTime `json:"test_date"`           // test_date
	TemplateID         sql.NullInt64  `json:"template_id"`         // template_id
	VitalsID           sql.NullInt64  `json:"vitals_id"`           // vitals_id
	Pregnant           sql.NullInt64  `json:"pregnant"`            // pregnant
	BetaBlocker        sql.NullInt64  `json:"beta_blocker"`        // beta_blocker
	Asthmatic          sql.NullInt64  `json:"asthmatic"`           // asthmatic
	SeasonalAllergies  sql.NullInt64  `json:"seasonal_allergies"`  // seasonal_allergies
	Allergies          sql.NullString `json:"allergies"`           // allergies
	Symptoms           sql.NullString `json:"symptoms"`            // symptoms
	Status             Status         `json:"status"`              // status
	RecommendTreatment sql.NullInt64  `json:"recommend_treatment"` // recommend_treatment
	RecommendID        sql.NullInt64  `json:"recommend_id"`        // recommend_id
	BillableEventID    sql.NullInt64  `json:"billable_event_id"`   // billable_event_id
	Signed             int8           `json:"signed"`              // signed
	SignedDate         mysql.NullTime `json:"signed_date"`         // signed_date
	SignedBy           sql.NullInt64  `json:"signed_by"`           // signed_by
	Notes              sql.NullString `json:"notes"`               // notes
	SystemNotes        sql.NullString `json:"system_notes"`        // system_notes
	EmrOrdersID        sql.NullInt64  `json:"emr_orders_id"`       // emr_orders_id
	UpdatedBy          sql.NullInt64  `json:"updated_by"`          // updated_by
	Updated            time.Time      `json:"updated"`             // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IntradermalTest exists in the database.
func (it *IntradermalTest) Exists() bool {
	return it._exists
}

// Deleted provides information if the IntradermalTest has been deleted from the database.
func (it *IntradermalTest) Deleted() bool {
	return it._deleted
}

// Insert inserts the IntradermalTest to the database.
func (it *IntradermalTest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if it._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.intradermal_tests (` +
		`practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, it.PracticeID, it.LocationID, it.OrderID, it.UserID, it.PatientID, it.TestDate, it.TemplateID, it.VitalsID, it.Pregnant, it.BetaBlocker, it.Asthmatic, it.SeasonalAllergies, it.Allergies, it.Symptoms, it.Status, it.RecommendTreatment, it.RecommendID, it.BillableEventID, it.Signed, it.SignedDate, it.SignedBy, it.Notes, it.SystemNotes, it.EmrOrdersID, it.UpdatedBy, it.Updated)
	res, err := db.Exec(sqlstr, it.PracticeID, it.LocationID, it.OrderID, it.UserID, it.PatientID, it.TestDate, it.TemplateID, it.VitalsID, it.Pregnant, it.BetaBlocker, it.Asthmatic, it.SeasonalAllergies, it.Allergies, it.Symptoms, it.Status, it.RecommendTreatment, it.RecommendID, it.BillableEventID, it.Signed, it.SignedDate, it.SignedBy, it.Notes, it.SystemNotes, it.EmrOrdersID, it.UpdatedBy, it.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	it.ID = uint(id)
	it._exists = true

	return nil
}

// Update updates the IntradermalTest in the database.
func (it *IntradermalTest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !it._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if it._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.intradermal_tests SET ` +
		`practice_id = ?, location_id = ?, order_id = ?, user_id = ?, patient_id = ?, test_date = ?, template_id = ?, vitals_id = ?, pregnant = ?, beta_blocker = ?, asthmatic = ?, seasonal_allergies = ?, allergies = ?, symptoms = ?, status = ?, recommend_treatment = ?, recommend_id = ?, billable_event_id = ?, signed = ?, signed_date = ?, signed_by = ?, notes = ?, system_notes = ?, emr_orders_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, it.PracticeID, it.LocationID, it.OrderID, it.UserID, it.PatientID, it.TestDate, it.TemplateID, it.VitalsID, it.Pregnant, it.BetaBlocker, it.Asthmatic, it.SeasonalAllergies, it.Allergies, it.Symptoms, it.Status, it.RecommendTreatment, it.RecommendID, it.BillableEventID, it.Signed, it.SignedDate, it.SignedBy, it.Notes, it.SystemNotes, it.EmrOrdersID, it.UpdatedBy, it.Updated, it.ID)
	_, err = db.Exec(sqlstr, it.PracticeID, it.LocationID, it.OrderID, it.UserID, it.PatientID, it.TestDate, it.TemplateID, it.VitalsID, it.Pregnant, it.BetaBlocker, it.Asthmatic, it.SeasonalAllergies, it.Allergies, it.Symptoms, it.Status, it.RecommendTreatment, it.RecommendID, it.BillableEventID, it.Signed, it.SignedDate, it.SignedBy, it.Notes, it.SystemNotes, it.EmrOrdersID, it.UpdatedBy, it.Updated, it.ID)
	return err
}

// Save saves the IntradermalTest to the database.
func (it *IntradermalTest) Save(db XODB) error {
	if it.Exists() {
		return it.Update(db)
	}

	return it.Insert(db)
}

// Delete deletes the IntradermalTest from the database.
func (it *IntradermalTest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !it._exists {
		return nil
	}

	// if deleted, bail
	if it._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.intradermal_tests WHERE id = ?`

	// run query
	XOLog(sqlstr, it.ID)
	_, err = db.Exec(sqlstr, it.ID)
	if err != nil {
		return err
	}

	// set deleted
	it._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the IntradermalTest's LocationID (location_id).
//
// Generated from foreign key 'intradermal_tests_location'.
func (it *IntradermalTest) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(it.LocationID.Int64))
}

// Order returns the Order associated with the IntradermalTest's OrderID (order_id).
//
// Generated from foreign key 'intradermal_tests_order'.
func (it *IntradermalTest) Order(db XODB) (*Order, error) {
	return OrderByID(db, uint(it.OrderID.Int64))
}

// Patient returns the Patient associated with the IntradermalTest's PatientID (patient_id).
//
// Generated from foreign key 'intradermal_tests_patient'.
func (it *IntradermalTest) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(it.PatientID.Int64))
}

// Practice returns the Practice associated with the IntradermalTest's PracticeID (practice_id).
//
// Generated from foreign key 'intradermal_tests_practice'.
func (it *IntradermalTest) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(it.PracticeID.Int64))
}

// IntradermalTestTemplate returns the IntradermalTestTemplate associated with the IntradermalTest's TemplateID (template_id).
//
// Generated from foreign key 'intradermal_tests_template'.
func (it *IntradermalTest) IntradermalTestTemplate(db XODB) (*IntradermalTestTemplate, error) {
	return IntradermalTestTemplateByID(db, uint(it.TemplateID.Int64))
}

// User returns the User associated with the IntradermalTest's UpdatedBy (updated_by).
//
// Generated from foreign key 'intradermal_tests_updated'.
func (it *IntradermalTest) User(db XODB) (*User, error) {
	return UserByID(db, uint(it.UpdatedBy.Int64))
}

// Vital returns the Vital associated with the IntradermalTest's VitalsID (vitals_id).
//
// Generated from foreign key 'intradermal_tests_vitals'.
func (it *IntradermalTest) Vital(db XODB) (*Vital, error) {
	return VitalByID(db, uint(it.VitalsID.Int64))
}

// IntradermalTestsByLocationID retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'Locations'.
func IntradermalTestsByLocationID(db XODB, locationID sql.NullInt64) ([]*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTest{}
	for q.Next() {
		it := IntradermalTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &it)
	}

	return res, nil
}

// IntradermalTestsByOrderID retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'Orders'.
func IntradermalTestsByOrderID(db XODB, orderID sql.NullInt64) ([]*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE order_id = ?`

	// run query
	XOLog(sqlstr, orderID)
	q, err := db.Query(sqlstr, orderID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTest{}
	for q.Next() {
		it := IntradermalTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &it)
	}

	return res, nil
}

// IntradermalTestsByPatientID retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'Patients'.
func IntradermalTestsByPatientID(db XODB, patientID sql.NullInt64) ([]*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTest{}
	for q.Next() {
		it := IntradermalTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &it)
	}

	return res, nil
}

// IntradermalTestsByPracticeID retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'Practices'.
func IntradermalTestsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTest{}
	for q.Next() {
		it := IntradermalTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &it)
	}

	return res, nil
}

// IntradermalTestsByTestDate retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'intradermal_test_date'.
func IntradermalTestsByTestDate(db XODB, testDate mysql.NullTime) ([]*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE test_date = ?`

	// run query
	XOLog(sqlstr, testDate)
	q, err := db.Query(sqlstr, testDate)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTest{}
	for q.Next() {
		it := IntradermalTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &it)
	}

	return res, nil
}

// IntradermalTestsByStatus retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'intradermal_test_status'.
func IntradermalTestsByStatus(db XODB, status Status) ([]*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE status = ?`

	// run query
	XOLog(sqlstr, status)
	q, err := db.Query(sqlstr, status)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTest{}
	for q.Next() {
		it := IntradermalTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &it)
	}

	return res, nil
}

// IntradermalTestByID retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'intradermal_tests_id_pkey'.
func IntradermalTestByID(db XODB, id uint) (*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	it := IntradermalTest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
	if err != nil {
		return nil, err
	}

	return &it, nil
}

// IntradermalTestsByTemplateID retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'intradermal_tests_template'.
func IntradermalTestsByTemplateID(db XODB, templateID sql.NullInt64) ([]*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE template_id = ?`

	// run query
	XOLog(sqlstr, templateID)
	q, err := db.Query(sqlstr, templateID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTest{}
	for q.Next() {
		it := IntradermalTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &it)
	}

	return res, nil
}

// IntradermalTestsByUpdatedBy retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'intradermal_tests_updated'.
func IntradermalTestsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTest{}
	for q.Next() {
		it := IntradermalTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &it)
	}

	return res, nil
}

// IntradermalTestsByVitalsID retrieves a row from 'AllergyNew.intradermal_tests' as a IntradermalTest.
//
// Generated from index 'intradermal_tests_vitals'.
func IntradermalTestsByVitalsID(db XODB, vitalsID sql.NullInt64) ([]*IntradermalTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, order_id, user_id, patient_id, test_date, template_id, vitals_id, pregnant, beta_blocker, asthmatic, seasonal_allergies, allergies, symptoms, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, notes, system_notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.intradermal_tests ` +
		`WHERE vitals_id = ?`

	// run query
	XOLog(sqlstr, vitalsID)
	q, err := db.Query(sqlstr, vitalsID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTest{}
	for q.Next() {
		it := IntradermalTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&it.ID, &it.PracticeID, &it.LocationID, &it.OrderID, &it.UserID, &it.PatientID, &it.TestDate, &it.TemplateID, &it.VitalsID, &it.Pregnant, &it.BetaBlocker, &it.Asthmatic, &it.SeasonalAllergies, &it.Allergies, &it.Symptoms, &it.Status, &it.RecommendTreatment, &it.RecommendID, &it.BillableEventID, &it.Signed, &it.SignedDate, &it.SignedBy, &it.Notes, &it.SystemNotes, &it.EmrOrdersID, &it.UpdatedBy, &it.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &it)
	}

	return res, nil
}
