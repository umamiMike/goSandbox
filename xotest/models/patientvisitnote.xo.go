// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PatientVisitNote represents a row from 'AllergyNew.patient_visit_notes'.
type PatientVisitNote struct {
	ID        uint           `json:"id"`         // id
	VisitID   sql.NullInt64  `json:"visit_id"`   // visit_id
	PatientID sql.NullInt64  `json:"patient_id"` // patient_id
	Note      sql.NullString `json:"note"`       // note
	DateAdded mysql.NullTime `json:"date_added"` // date_added
	AddedBy   sql.NullInt64  `json:"added_by"`   // added_by
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientVisitNote exists in the database.
func (pvn *PatientVisitNote) Exists() bool {
	return pvn._exists
}

// Deleted provides information if the PatientVisitNote has been deleted from the database.
func (pvn *PatientVisitNote) Deleted() bool {
	return pvn._deleted
}

// Insert inserts the PatientVisitNote to the database.
func (pvn *PatientVisitNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pvn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_visit_notes (` +
		`visit_id, patient_id, note, date_added, added_by, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pvn.VisitID, pvn.PatientID, pvn.Note, pvn.DateAdded, pvn.AddedBy, pvn.UpdatedBy, pvn.Updated)
	res, err := db.Exec(sqlstr, pvn.VisitID, pvn.PatientID, pvn.Note, pvn.DateAdded, pvn.AddedBy, pvn.UpdatedBy, pvn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pvn.ID = uint(id)
	pvn._exists = true

	return nil
}

// Update updates the PatientVisitNote in the database.
func (pvn *PatientVisitNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pvn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_visit_notes SET ` +
		`visit_id = ?, patient_id = ?, note = ?, date_added = ?, added_by = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pvn.VisitID, pvn.PatientID, pvn.Note, pvn.DateAdded, pvn.AddedBy, pvn.UpdatedBy, pvn.Updated, pvn.ID)
	_, err = db.Exec(sqlstr, pvn.VisitID, pvn.PatientID, pvn.Note, pvn.DateAdded, pvn.AddedBy, pvn.UpdatedBy, pvn.Updated, pvn.ID)
	return err
}

// Save saves the PatientVisitNote to the database.
func (pvn *PatientVisitNote) Save(db XODB) error {
	if pvn.Exists() {
		return pvn.Update(db)
	}

	return pvn.Insert(db)
}

// Delete deletes the PatientVisitNote from the database.
func (pvn *PatientVisitNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvn._exists {
		return nil
	}

	// if deleted, bail
	if pvn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_visit_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, pvn.ID)
	_, err = db.Exec(sqlstr, pvn.ID)
	if err != nil {
		return err
	}

	// set deleted
	pvn._deleted = true

	return nil
}

// PatientVisitNotesByPatientID retrieves a row from 'AllergyNew.patient_visit_notes' as a PatientVisitNote.
//
// Generated from index 'Patients'.
func PatientVisitNotesByPatientID(db XODB, patientID sql.NullInt64) ([]*PatientVisitNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, visit_id, patient_id, note, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visit_notes ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitNote{}
	for q.Next() {
		pvn := PatientVisitNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvn.ID, &pvn.VisitID, &pvn.PatientID, &pvn.Note, &pvn.DateAdded, &pvn.AddedBy, &pvn.UpdatedBy, &pvn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvn)
	}

	return res, nil
}

// PatientVisitNotesByVisitID retrieves a row from 'AllergyNew.patient_visit_notes' as a PatientVisitNote.
//
// Generated from index 'Visits'.
func PatientVisitNotesByVisitID(db XODB, visitID sql.NullInt64) ([]*PatientVisitNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, visit_id, patient_id, note, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visit_notes ` +
		`WHERE visit_id = ?`

	// run query
	XOLog(sqlstr, visitID)
	q, err := db.Query(sqlstr, visitID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitNote{}
	for q.Next() {
		pvn := PatientVisitNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvn.ID, &pvn.VisitID, &pvn.PatientID, &pvn.Note, &pvn.DateAdded, &pvn.AddedBy, &pvn.UpdatedBy, &pvn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvn)
	}

	return res, nil
}

// PatientVisitNoteByID retrieves a row from 'AllergyNew.patient_visit_notes' as a PatientVisitNote.
//
// Generated from index 'patient_visit_notes_id_pkey'.
func PatientVisitNoteByID(db XODB, id uint) (*PatientVisitNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, visit_id, patient_id, note, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visit_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pvn := PatientVisitNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pvn.ID, &pvn.VisitID, &pvn.PatientID, &pvn.Note, &pvn.DateAdded, &pvn.AddedBy, &pvn.UpdatedBy, &pvn.Updated)
	if err != nil {
		return nil, err
	}

	return &pvn, nil
}
