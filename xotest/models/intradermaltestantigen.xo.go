// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// IntradermalTestAntigen represents a row from 'AllergyNew.intradermal_test_antigens'.
type IntradermalTestAntigen struct {
	ID        uint          `json:"id"`         // id
	TestID    sql.NullInt64 `json:"test_id"`    // test_id
	AntigenID sql.NullInt64 `json:"antigen_id"` // antigen_id
	PatientID sql.NullInt64 `json:"patient_id"` // patient_id
	EndPoint  sql.NullInt64 `json:"end_point"`  // end_point
	NotTested int8          `json:"not_tested"` // not_tested
	Order     sql.NullInt64 `json:"order"`      // order
	UpdatedBy sql.NullInt64 `json:"updated_by"` // updated_by
	Updated   time.Time     `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IntradermalTestAntigen exists in the database.
func (ita *IntradermalTestAntigen) Exists() bool {
	return ita._exists
}

// Deleted provides information if the IntradermalTestAntigen has been deleted from the database.
func (ita *IntradermalTestAntigen) Deleted() bool {
	return ita._deleted
}

// Insert inserts the IntradermalTestAntigen to the database.
func (ita *IntradermalTestAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ita._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.intradermal_test_antigens (` +
		`test_id, antigen_id, patient_id, end_point, not_tested, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ita.TestID, ita.AntigenID, ita.PatientID, ita.EndPoint, ita.NotTested, ita.Order, ita.UpdatedBy, ita.Updated)
	res, err := db.Exec(sqlstr, ita.TestID, ita.AntigenID, ita.PatientID, ita.EndPoint, ita.NotTested, ita.Order, ita.UpdatedBy, ita.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ita.ID = uint(id)
	ita._exists = true

	return nil
}

// Update updates the IntradermalTestAntigen in the database.
func (ita *IntradermalTestAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ita._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ita._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.intradermal_test_antigens SET ` +
		`test_id = ?, antigen_id = ?, patient_id = ?, end_point = ?, not_tested = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ita.TestID, ita.AntigenID, ita.PatientID, ita.EndPoint, ita.NotTested, ita.Order, ita.UpdatedBy, ita.Updated, ita.ID)
	_, err = db.Exec(sqlstr, ita.TestID, ita.AntigenID, ita.PatientID, ita.EndPoint, ita.NotTested, ita.Order, ita.UpdatedBy, ita.Updated, ita.ID)
	return err
}

// Save saves the IntradermalTestAntigen to the database.
func (ita *IntradermalTestAntigen) Save(db XODB) error {
	if ita.Exists() {
		return ita.Update(db)
	}

	return ita.Insert(db)
}

// Delete deletes the IntradermalTestAntigen from the database.
func (ita *IntradermalTestAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ita._exists {
		return nil
	}

	// if deleted, bail
	if ita._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.intradermal_test_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, ita.ID)
	_, err = db.Exec(sqlstr, ita.ID)
	if err != nil {
		return err
	}

	// set deleted
	ita._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the IntradermalTestAntigen's AntigenID (antigen_id).
//
// Generated from foreign key 'intradermal_test_antigens_antigen'.
func (ita *IntradermalTestAntigen) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(ita.AntigenID.Int64))
}

// Patient returns the Patient associated with the IntradermalTestAntigen's PatientID (patient_id).
//
// Generated from foreign key 'intradermal_test_antigens_patient'.
func (ita *IntradermalTestAntigen) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(ita.PatientID.Int64))
}

// IntradermalTest returns the IntradermalTest associated with the IntradermalTestAntigen's TestID (test_id).
//
// Generated from foreign key 'intradermal_test_antigens_tests'.
func (ita *IntradermalTestAntigen) IntradermalTest(db XODB) (*IntradermalTest, error) {
	return IntradermalTestByID(db, uint(ita.TestID.Int64))
}

// User returns the User associated with the IntradermalTestAntigen's UpdatedBy (updated_by).
//
// Generated from foreign key 'intradermal_test_antigens_updated'.
func (ita *IntradermalTestAntigen) User(db XODB) (*User, error) {
	return UserByID(db, uint(ita.UpdatedBy.Int64))
}

// IntradermalTestAntigensByAntigenID retrieves a row from 'AllergyNew.intradermal_test_antigens' as a IntradermalTestAntigen.
//
// Generated from index 'Antigens'.
func IntradermalTestAntigensByAntigenID(db XODB, antigenID sql.NullInt64) ([]*IntradermalTestAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_id, patient_id, end_point, not_tested, order, updated_by, updated ` +
		`FROM AllergyNew.intradermal_test_antigens ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTestAntigen{}
	for q.Next() {
		ita := IntradermalTestAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ita.ID, &ita.TestID, &ita.AntigenID, &ita.PatientID, &ita.EndPoint, &ita.NotTested, &ita.Order, &ita.UpdatedBy, &ita.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ita)
	}

	return res, nil
}

// IntradermalTestAntigensByPatientID retrieves a row from 'AllergyNew.intradermal_test_antigens' as a IntradermalTestAntigen.
//
// Generated from index 'Patients'.
func IntradermalTestAntigensByPatientID(db XODB, patientID sql.NullInt64) ([]*IntradermalTestAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_id, patient_id, end_point, not_tested, order, updated_by, updated ` +
		`FROM AllergyNew.intradermal_test_antigens ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTestAntigen{}
	for q.Next() {
		ita := IntradermalTestAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ita.ID, &ita.TestID, &ita.AntigenID, &ita.PatientID, &ita.EndPoint, &ita.NotTested, &ita.Order, &ita.UpdatedBy, &ita.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ita)
	}

	return res, nil
}

// IntradermalTestAntigensByTestID retrieves a row from 'AllergyNew.intradermal_test_antigens' as a IntradermalTestAntigen.
//
// Generated from index 'Tests'.
func IntradermalTestAntigensByTestID(db XODB, testID sql.NullInt64) ([]*IntradermalTestAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_id, patient_id, end_point, not_tested, order, updated_by, updated ` +
		`FROM AllergyNew.intradermal_test_antigens ` +
		`WHERE test_id = ?`

	// run query
	XOLog(sqlstr, testID)
	q, err := db.Query(sqlstr, testID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTestAntigen{}
	for q.Next() {
		ita := IntradermalTestAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ita.ID, &ita.TestID, &ita.AntigenID, &ita.PatientID, &ita.EndPoint, &ita.NotTested, &ita.Order, &ita.UpdatedBy, &ita.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ita)
	}

	return res, nil
}

// IntradermalTestAntigenByID retrieves a row from 'AllergyNew.intradermal_test_antigens' as a IntradermalTestAntigen.
//
// Generated from index 'intradermal_test_antigens_id_pkey'.
func IntradermalTestAntigenByID(db XODB, id uint) (*IntradermalTestAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_id, patient_id, end_point, not_tested, order, updated_by, updated ` +
		`FROM AllergyNew.intradermal_test_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ita := IntradermalTestAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ita.ID, &ita.TestID, &ita.AntigenID, &ita.PatientID, &ita.EndPoint, &ita.NotTested, &ita.Order, &ita.UpdatedBy, &ita.Updated)
	if err != nil {
		return nil, err
	}

	return &ita, nil
}

// IntradermalTestAntigensByUpdatedBy retrieves a row from 'AllergyNew.intradermal_test_antigens' as a IntradermalTestAntigen.
//
// Generated from index 'intradermal_test_antigens_updated'.
func IntradermalTestAntigensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*IntradermalTestAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_id, patient_id, end_point, not_tested, order, updated_by, updated ` +
		`FROM AllergyNew.intradermal_test_antigens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTestAntigen{}
	for q.Next() {
		ita := IntradermalTestAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ita.ID, &ita.TestID, &ita.AntigenID, &ita.PatientID, &ita.EndPoint, &ita.NotTested, &ita.Order, &ita.UpdatedBy, &ita.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ita)
	}

	return res, nil
}
