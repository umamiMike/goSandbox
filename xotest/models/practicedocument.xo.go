// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PracticeDocument represents a row from 'AllergyNew.practice_documents'.
type PracticeDocument struct {
	ID           uint           `json:"id"`            // id
	PracticeID   sql.NullInt64  `json:"practice_id"`   // practice_id
	DocumentName sql.NullString `json:"document_name"` // document_name
	Required     sql.NullInt64  `json:"required"`      // required
	Active       sql.NullInt64  `json:"active"`        // active
	UpdatedBy    sql.NullInt64  `json:"updated_by"`    // updated_by
	Updated      time.Time      `json:"updated"`       // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PracticeDocument exists in the database.
func (pd *PracticeDocument) Exists() bool {
	return pd._exists
}

// Deleted provides information if the PracticeDocument has been deleted from the database.
func (pd *PracticeDocument) Deleted() bool {
	return pd._deleted
}

// Insert inserts the PracticeDocument to the database.
func (pd *PracticeDocument) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practice_documents (` +
		`practice_id, document_name, required, active, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pd.PracticeID, pd.DocumentName, pd.Required, pd.Active, pd.UpdatedBy, pd.Updated)
	res, err := db.Exec(sqlstr, pd.PracticeID, pd.DocumentName, pd.Required, pd.Active, pd.UpdatedBy, pd.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pd.ID = uint(id)
	pd._exists = true

	return nil
}

// Update updates the PracticeDocument in the database.
func (pd *PracticeDocument) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practice_documents SET ` +
		`practice_id = ?, document_name = ?, required = ?, active = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pd.PracticeID, pd.DocumentName, pd.Required, pd.Active, pd.UpdatedBy, pd.Updated, pd.ID)
	_, err = db.Exec(sqlstr, pd.PracticeID, pd.DocumentName, pd.Required, pd.Active, pd.UpdatedBy, pd.Updated, pd.ID)
	return err
}

// Save saves the PracticeDocument to the database.
func (pd *PracticeDocument) Save(db XODB) error {
	if pd.Exists() {
		return pd.Update(db)
	}

	return pd.Insert(db)
}

// Delete deletes the PracticeDocument from the database.
func (pd *PracticeDocument) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pd._exists {
		return nil
	}

	// if deleted, bail
	if pd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practice_documents WHERE id = ?`

	// run query
	XOLog(sqlstr, pd.ID)
	_, err = db.Exec(sqlstr, pd.ID)
	if err != nil {
		return err
	}

	// set deleted
	pd._deleted = true

	return nil
}

// PracticeDocumentByID retrieves a row from 'AllergyNew.practice_documents' as a PracticeDocument.
//
// Generated from index 'practice_documents_id_pkey'.
func PracticeDocumentByID(db XODB, id uint) (*PracticeDocument, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, document_name, required, active, updated_by, updated ` +
		`FROM AllergyNew.practice_documents ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pd := PracticeDocument{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pd.ID, &pd.PracticeID, &pd.DocumentName, &pd.Required, &pd.Active, &pd.UpdatedBy, &pd.Updated)
	if err != nil {
		return nil, err
	}

	return &pd, nil
}
