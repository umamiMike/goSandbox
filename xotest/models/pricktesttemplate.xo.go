// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PrickTestTemplate represents a row from 'AllergyNew.prick_test_templates'.
type PrickTestTemplate struct {
	ID         uint           `json:"id"`          // id
	Name       sql.NullString `json:"name"`        // name
	CreateDate mysql.NullTime `json:"create_date"` // create_date
	CreatorID  sql.NullInt64  `json:"creator_id"`  // creator_id
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	LocationID sql.NullInt64  `json:"location_id"` // location_id
	Active     int8           `json:"active"`      // active
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PrickTestTemplate exists in the database.
func (ptt *PrickTestTemplate) Exists() bool {
	return ptt._exists
}

// Deleted provides information if the PrickTestTemplate has been deleted from the database.
func (ptt *PrickTestTemplate) Deleted() bool {
	return ptt._deleted
}

// Insert inserts the PrickTestTemplate to the database.
func (ptt *PrickTestTemplate) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ptt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.prick_test_templates (` +
		`name, create_date, creator_id, practice_id, location_id, active, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ptt.Name, ptt.CreateDate, ptt.CreatorID, ptt.PracticeID, ptt.LocationID, ptt.Active, ptt.UpdatedBy, ptt.Updated)
	res, err := db.Exec(sqlstr, ptt.Name, ptt.CreateDate, ptt.CreatorID, ptt.PracticeID, ptt.LocationID, ptt.Active, ptt.UpdatedBy, ptt.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ptt.ID = uint(id)
	ptt._exists = true

	return nil
}

// Update updates the PrickTestTemplate in the database.
func (ptt *PrickTestTemplate) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ptt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ptt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.prick_test_templates SET ` +
		`name = ?, create_date = ?, creator_id = ?, practice_id = ?, location_id = ?, active = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ptt.Name, ptt.CreateDate, ptt.CreatorID, ptt.PracticeID, ptt.LocationID, ptt.Active, ptt.UpdatedBy, ptt.Updated, ptt.ID)
	_, err = db.Exec(sqlstr, ptt.Name, ptt.CreateDate, ptt.CreatorID, ptt.PracticeID, ptt.LocationID, ptt.Active, ptt.UpdatedBy, ptt.Updated, ptt.ID)
	return err
}

// Save saves the PrickTestTemplate to the database.
func (ptt *PrickTestTemplate) Save(db XODB) error {
	if ptt.Exists() {
		return ptt.Update(db)
	}

	return ptt.Insert(db)
}

// Delete deletes the PrickTestTemplate from the database.
func (ptt *PrickTestTemplate) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ptt._exists {
		return nil
	}

	// if deleted, bail
	if ptt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.prick_test_templates WHERE id = ?`

	// run query
	XOLog(sqlstr, ptt.ID)
	_, err = db.Exec(sqlstr, ptt.ID)
	if err != nil {
		return err
	}

	// set deleted
	ptt._deleted = true

	return nil
}

// UserByCreatorID returns the User associated with the PrickTestTemplate's CreatorID (creator_id).
//
// Generated from foreign key 'prick_test_templates_creator'.
func (ptt *PrickTestTemplate) UserByCreatorID(db XODB) (*User, error) {
	return UserByID(db, uint(ptt.CreatorID.Int64))
}

// PracticeLocation returns the PracticeLocation associated with the PrickTestTemplate's LocationID (location_id).
//
// Generated from foreign key 'prick_test_templates_location'.
func (ptt *PrickTestTemplate) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(ptt.LocationID.Int64))
}

// Practice returns the Practice associated with the PrickTestTemplate's PracticeID (practice_id).
//
// Generated from foreign key 'prick_test_templates_practice'.
func (ptt *PrickTestTemplate) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(ptt.PracticeID.Int64))
}

// UserByUpdatedBy returns the User associated with the PrickTestTemplate's UpdatedBy (updated_by).
//
// Generated from foreign key 'prick_test_templates_updated'.
func (ptt *PrickTestTemplate) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(ptt.UpdatedBy.Int64))
}

// PrickTestTemplatesByCreatorID retrieves a row from 'AllergyNew.prick_test_templates' as a PrickTestTemplate.
//
// Generated from index 'Creators'.
func PrickTestTemplatesByCreatorID(db XODB, creatorID sql.NullInt64) ([]*PrickTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, create_date, creator_id, practice_id, location_id, active, updated_by, updated ` +
		`FROM AllergyNew.prick_test_templates ` +
		`WHERE creator_id = ?`

	// run query
	XOLog(sqlstr, creatorID)
	q, err := db.Query(sqlstr, creatorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestTemplate{}
	for q.Next() {
		ptt := PrickTestTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptt.ID, &ptt.Name, &ptt.CreateDate, &ptt.CreatorID, &ptt.PracticeID, &ptt.LocationID, &ptt.Active, &ptt.UpdatedBy, &ptt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptt)
	}

	return res, nil
}

// PrickTestTemplatesByLocationID retrieves a row from 'AllergyNew.prick_test_templates' as a PrickTestTemplate.
//
// Generated from index 'Locations'.
func PrickTestTemplatesByLocationID(db XODB, locationID sql.NullInt64) ([]*PrickTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, create_date, creator_id, practice_id, location_id, active, updated_by, updated ` +
		`FROM AllergyNew.prick_test_templates ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestTemplate{}
	for q.Next() {
		ptt := PrickTestTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptt.ID, &ptt.Name, &ptt.CreateDate, &ptt.CreatorID, &ptt.PracticeID, &ptt.LocationID, &ptt.Active, &ptt.UpdatedBy, &ptt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptt)
	}

	return res, nil
}

// PrickTestTemplatesByPracticeID retrieves a row from 'AllergyNew.prick_test_templates' as a PrickTestTemplate.
//
// Generated from index 'Practices'.
func PrickTestTemplatesByPracticeID(db XODB, practiceID sql.NullInt64) ([]*PrickTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, create_date, creator_id, practice_id, location_id, active, updated_by, updated ` +
		`FROM AllergyNew.prick_test_templates ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestTemplate{}
	for q.Next() {
		ptt := PrickTestTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptt.ID, &ptt.Name, &ptt.CreateDate, &ptt.CreatorID, &ptt.PracticeID, &ptt.LocationID, &ptt.Active, &ptt.UpdatedBy, &ptt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptt)
	}

	return res, nil
}

// PrickTestTemplateByID retrieves a row from 'AllergyNew.prick_test_templates' as a PrickTestTemplate.
//
// Generated from index 'prick_test_templates_id_pkey'.
func PrickTestTemplateByID(db XODB, id uint) (*PrickTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, create_date, creator_id, practice_id, location_id, active, updated_by, updated ` +
		`FROM AllergyNew.prick_test_templates ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ptt := PrickTestTemplate{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ptt.ID, &ptt.Name, &ptt.CreateDate, &ptt.CreatorID, &ptt.PracticeID, &ptt.LocationID, &ptt.Active, &ptt.UpdatedBy, &ptt.Updated)
	if err != nil {
		return nil, err
	}

	return &ptt, nil
}

// PrickTestTemplatesByUpdatedBy retrieves a row from 'AllergyNew.prick_test_templates' as a PrickTestTemplate.
//
// Generated from index 'prick_test_templates_updated'.
func PrickTestTemplatesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PrickTestTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, create_date, creator_id, practice_id, location_id, active, updated_by, updated ` +
		`FROM AllergyNew.prick_test_templates ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestTemplate{}
	for q.Next() {
		ptt := PrickTestTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptt.ID, &ptt.Name, &ptt.CreateDate, &ptt.CreatorID, &ptt.PracticeID, &ptt.LocationID, &ptt.Active, &ptt.UpdatedBy, &ptt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptt)
	}

	return res, nil
}
