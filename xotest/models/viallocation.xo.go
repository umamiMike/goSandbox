// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// VialLocation represents a row from 'AllergyNew.vial_locations'.
type VialLocation struct {
	ID           uint           `json:"id"`            // id
	VialID       sql.NullInt64  `json:"vial_id"`       // vial_id
	PracticeID   sql.NullInt64  `json:"practice_id"`   // practice_id
	LocationID   sql.NullInt64  `json:"location_id"`   // location_id
	Location     sql.NullString `json:"location"`      // location
	ChangeMethod ChangeMethod   `json:"change_method"` // change_method
	Date         mysql.NullTime `json:"date"`          // date
	InTransit    int8           `json:"in_transit"`    // in_transit
	UpdatedBy    sql.NullInt64  `json:"updated_by"`    // updated_by
	Updated      time.Time      `json:"updated"`       // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialLocation exists in the database.
func (vl *VialLocation) Exists() bool {
	return vl._exists
}

// Deleted provides information if the VialLocation has been deleted from the database.
func (vl *VialLocation) Deleted() bool {
	return vl._deleted
}

// Insert inserts the VialLocation to the database.
func (vl *VialLocation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_locations (` +
		`vial_id, practice_id, location_id, location, change_method, date, in_transit, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vl.VialID, vl.PracticeID, vl.LocationID, vl.Location, vl.ChangeMethod, vl.Date, vl.InTransit, vl.UpdatedBy, vl.Updated)
	res, err := db.Exec(sqlstr, vl.VialID, vl.PracticeID, vl.LocationID, vl.Location, vl.ChangeMethod, vl.Date, vl.InTransit, vl.UpdatedBy, vl.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vl.ID = uint(id)
	vl._exists = true

	return nil
}

// Update updates the VialLocation in the database.
func (vl *VialLocation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_locations SET ` +
		`vial_id = ?, practice_id = ?, location_id = ?, location = ?, change_method = ?, date = ?, in_transit = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vl.VialID, vl.PracticeID, vl.LocationID, vl.Location, vl.ChangeMethod, vl.Date, vl.InTransit, vl.UpdatedBy, vl.Updated, vl.ID)
	_, err = db.Exec(sqlstr, vl.VialID, vl.PracticeID, vl.LocationID, vl.Location, vl.ChangeMethod, vl.Date, vl.InTransit, vl.UpdatedBy, vl.Updated, vl.ID)
	return err
}

// Save saves the VialLocation to the database.
func (vl *VialLocation) Save(db XODB) error {
	if vl.Exists() {
		return vl.Update(db)
	}

	return vl.Insert(db)
}

// Delete deletes the VialLocation from the database.
func (vl *VialLocation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vl._exists {
		return nil
	}

	// if deleted, bail
	if vl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_locations WHERE id = ?`

	// run query
	XOLog(sqlstr, vl.ID)
	_, err = db.Exec(sqlstr, vl.ID)
	if err != nil {
		return err
	}

	// set deleted
	vl._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the VialLocation's LocationID (location_id).
//
// Generated from foreign key 'vial_locations_location'.
func (vl *VialLocation) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(vl.LocationID.Int64))
}

// Practice returns the Practice associated with the VialLocation's PracticeID (practice_id).
//
// Generated from foreign key 'vial_locations_practice'.
func (vl *VialLocation) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(vl.PracticeID.Int64))
}

// User returns the User associated with the VialLocation's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_locations_updated'.
func (vl *VialLocation) User(db XODB) (*User, error) {
	return UserByID(db, uint(vl.UpdatedBy.Int64))
}

// Vial returns the Vial associated with the VialLocation's VialID (vial_id).
//
// Generated from foreign key 'vial_locations_vial'.
func (vl *VialLocation) Vial(db XODB) (*Vial, error) {
	return VialByID(db, uint(vl.VialID.Int64))
}

// VialLocationsByVialID retrieves a row from 'AllergyNew.vial_locations' as a VialLocation.
//
// Generated from index 'Vial_ID'.
func VialLocationsByVialID(db XODB, vialID sql.NullInt64) ([]*VialLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, practice_id, location_id, location, change_method, date, in_transit, updated_by, updated ` +
		`FROM AllergyNew.vial_locations ` +
		`WHERE vial_id = ?`

	// run query
	XOLog(sqlstr, vialID)
	q, err := db.Query(sqlstr, vialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialLocation{}
	for q.Next() {
		vl := VialLocation{
			_exists: true,
		}

		// scan
		err = q.Scan(&vl.ID, &vl.VialID, &vl.PracticeID, &vl.LocationID, &vl.Location, &vl.ChangeMethod, &vl.Date, &vl.InTransit, &vl.UpdatedBy, &vl.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vl)
	}

	return res, nil
}

// VialLocationByID retrieves a row from 'AllergyNew.vial_locations' as a VialLocation.
//
// Generated from index 'vial_locations_id_pkey'.
func VialLocationByID(db XODB, id uint) (*VialLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, practice_id, location_id, location, change_method, date, in_transit, updated_by, updated ` +
		`FROM AllergyNew.vial_locations ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vl := VialLocation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vl.ID, &vl.VialID, &vl.PracticeID, &vl.LocationID, &vl.Location, &vl.ChangeMethod, &vl.Date, &vl.InTransit, &vl.UpdatedBy, &vl.Updated)
	if err != nil {
		return nil, err
	}

	return &vl, nil
}

// VialLocationsByLocationID retrieves a row from 'AllergyNew.vial_locations' as a VialLocation.
//
// Generated from index 'vial_locations_location'.
func VialLocationsByLocationID(db XODB, locationID sql.NullInt64) ([]*VialLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, practice_id, location_id, location, change_method, date, in_transit, updated_by, updated ` +
		`FROM AllergyNew.vial_locations ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialLocation{}
	for q.Next() {
		vl := VialLocation{
			_exists: true,
		}

		// scan
		err = q.Scan(&vl.ID, &vl.VialID, &vl.PracticeID, &vl.LocationID, &vl.Location, &vl.ChangeMethod, &vl.Date, &vl.InTransit, &vl.UpdatedBy, &vl.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vl)
	}

	return res, nil
}

// VialLocationsByPracticeID retrieves a row from 'AllergyNew.vial_locations' as a VialLocation.
//
// Generated from index 'vial_locations_practice'.
func VialLocationsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*VialLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, practice_id, location_id, location, change_method, date, in_transit, updated_by, updated ` +
		`FROM AllergyNew.vial_locations ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialLocation{}
	for q.Next() {
		vl := VialLocation{
			_exists: true,
		}

		// scan
		err = q.Scan(&vl.ID, &vl.VialID, &vl.PracticeID, &vl.LocationID, &vl.Location, &vl.ChangeMethod, &vl.Date, &vl.InTransit, &vl.UpdatedBy, &vl.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vl)
	}

	return res, nil
}

// VialLocationsByUpdatedBy retrieves a row from 'AllergyNew.vial_locations' as a VialLocation.
//
// Generated from index 'vial_locations_updated'.
func VialLocationsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, practice_id, location_id, location, change_method, date, in_transit, updated_by, updated ` +
		`FROM AllergyNew.vial_locations ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialLocation{}
	for q.Next() {
		vl := VialLocation{
			_exists: true,
		}

		// scan
		err = q.Scan(&vl.ID, &vl.VialID, &vl.PracticeID, &vl.LocationID, &vl.Location, &vl.ChangeMethod, &vl.Date, &vl.InTransit, &vl.UpdatedBy, &vl.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vl)
	}

	return res, nil
}
