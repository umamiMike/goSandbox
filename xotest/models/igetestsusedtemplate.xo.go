// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// IgeTestsUsedTemplate represents a row from 'AllergyNew.ige_tests_used_templates'.
type IgeTestsUsedTemplate struct {
	ID         uint          `json:"id"`          // id
	TestID     sql.NullInt64 `json:"test_id"`     // test_id
	TemplateID sql.NullInt64 `json:"template_id"` // template_id
	UpdatedBy  sql.NullInt64 `json:"updated_by"`  // updated_by
	Updated    time.Time     `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IgeTestsUsedTemplate exists in the database.
func (itut *IgeTestsUsedTemplate) Exists() bool {
	return itut._exists
}

// Deleted provides information if the IgeTestsUsedTemplate has been deleted from the database.
func (itut *IgeTestsUsedTemplate) Deleted() bool {
	return itut._deleted
}

// Insert inserts the IgeTestsUsedTemplate to the database.
func (itut *IgeTestsUsedTemplate) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if itut._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.ige_tests_used_templates (` +
		`test_id, template_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, itut.TestID, itut.TemplateID, itut.UpdatedBy, itut.Updated)
	res, err := db.Exec(sqlstr, itut.TestID, itut.TemplateID, itut.UpdatedBy, itut.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	itut.ID = uint(id)
	itut._exists = true

	return nil
}

// Update updates the IgeTestsUsedTemplate in the database.
func (itut *IgeTestsUsedTemplate) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itut._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if itut._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.ige_tests_used_templates SET ` +
		`test_id = ?, template_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, itut.TestID, itut.TemplateID, itut.UpdatedBy, itut.Updated, itut.ID)
	_, err = db.Exec(sqlstr, itut.TestID, itut.TemplateID, itut.UpdatedBy, itut.Updated, itut.ID)
	return err
}

// Save saves the IgeTestsUsedTemplate to the database.
func (itut *IgeTestsUsedTemplate) Save(db XODB) error {
	if itut.Exists() {
		return itut.Update(db)
	}

	return itut.Insert(db)
}

// Delete deletes the IgeTestsUsedTemplate from the database.
func (itut *IgeTestsUsedTemplate) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itut._exists {
		return nil
	}

	// if deleted, bail
	if itut._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.ige_tests_used_templates WHERE id = ?`

	// run query
	XOLog(sqlstr, itut.ID)
	_, err = db.Exec(sqlstr, itut.ID)
	if err != nil {
		return err
	}

	// set deleted
	itut._deleted = true

	return nil
}

// IgeTestsUsedTemplatesByTemplateID retrieves a row from 'AllergyNew.ige_tests_used_templates' as a IgeTestsUsedTemplate.
//
// Generated from index 'Templates'.
func IgeTestsUsedTemplatesByTemplateID(db XODB, templateID sql.NullInt64) ([]*IgeTestsUsedTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, template_id, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_used_templates ` +
		`WHERE template_id = ?`

	// run query
	XOLog(sqlstr, templateID)
	q, err := db.Query(sqlstr, templateID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsUsedTemplate{}
	for q.Next() {
		itut := IgeTestsUsedTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&itut.ID, &itut.TestID, &itut.TemplateID, &itut.UpdatedBy, &itut.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &itut)
	}

	return res, nil
}

// IgeTestsUsedTemplatesByTestID retrieves a row from 'AllergyNew.ige_tests_used_templates' as a IgeTestsUsedTemplate.
//
// Generated from index 'Tests'.
func IgeTestsUsedTemplatesByTestID(db XODB, testID sql.NullInt64) ([]*IgeTestsUsedTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, template_id, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_used_templates ` +
		`WHERE test_id = ?`

	// run query
	XOLog(sqlstr, testID)
	q, err := db.Query(sqlstr, testID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeTestsUsedTemplate{}
	for q.Next() {
		itut := IgeTestsUsedTemplate{
			_exists: true,
		}

		// scan
		err = q.Scan(&itut.ID, &itut.TestID, &itut.TemplateID, &itut.UpdatedBy, &itut.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &itut)
	}

	return res, nil
}

// IgeTestsUsedTemplateByID retrieves a row from 'AllergyNew.ige_tests_used_templates' as a IgeTestsUsedTemplate.
//
// Generated from index 'ige_tests_used_templates_id_pkey'.
func IgeTestsUsedTemplateByID(db XODB, id uint) (*IgeTestsUsedTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, template_id, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_used_templates ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	itut := IgeTestsUsedTemplate{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&itut.ID, &itut.TestID, &itut.TemplateID, &itut.UpdatedBy, &itut.Updated)
	if err != nil {
		return nil, err
	}

	return &itut, nil
}
