// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// ProtoPatientsQuestion represents a row from 'AllergyNew.proto_patients_questions'.
type ProtoPatientsQuestion struct {
	ID           uint           `json:"id"`            // id
	PracticeID   sql.NullInt64  `json:"practice_id"`   // practice_id
	PatientID    sql.NullInt64  `json:"patient_id"`    // patient_id
	QuestionID   sql.NullInt64  `json:"question_id"`   // question_id
	Answer       sql.NullInt64  `json:"answer"`        // answer
	DateRecorded mysql.NullTime `json:"date_recorded"` // date_recorded
	RecordedBy   sql.NullInt64  `json:"recorded_by"`   // recorded_by
	Active       int8           `json:"active"`        // active
	UpdatedBy    sql.NullInt64  `json:"updated_by"`    // updated_by
	Updated      time.Time      `json:"updated"`       // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProtoPatientsQuestion exists in the database.
func (ppq *ProtoPatientsQuestion) Exists() bool {
	return ppq._exists
}

// Deleted provides information if the ProtoPatientsQuestion has been deleted from the database.
func (ppq *ProtoPatientsQuestion) Deleted() bool {
	return ppq._deleted
}

// Insert inserts the ProtoPatientsQuestion to the database.
func (ppq *ProtoPatientsQuestion) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ppq._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.proto_patients_questions (` +
		`practice_id, patient_id, question_id, answer, date_recorded, recorded_by, active, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ppq.PracticeID, ppq.PatientID, ppq.QuestionID, ppq.Answer, ppq.DateRecorded, ppq.RecordedBy, ppq.Active, ppq.UpdatedBy, ppq.Updated)
	res, err := db.Exec(sqlstr, ppq.PracticeID, ppq.PatientID, ppq.QuestionID, ppq.Answer, ppq.DateRecorded, ppq.RecordedBy, ppq.Active, ppq.UpdatedBy, ppq.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ppq.ID = uint(id)
	ppq._exists = true

	return nil
}

// Update updates the ProtoPatientsQuestion in the database.
func (ppq *ProtoPatientsQuestion) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppq._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ppq._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.proto_patients_questions SET ` +
		`practice_id = ?, patient_id = ?, question_id = ?, answer = ?, date_recorded = ?, recorded_by = ?, active = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ppq.PracticeID, ppq.PatientID, ppq.QuestionID, ppq.Answer, ppq.DateRecorded, ppq.RecordedBy, ppq.Active, ppq.UpdatedBy, ppq.Updated, ppq.ID)
	_, err = db.Exec(sqlstr, ppq.PracticeID, ppq.PatientID, ppq.QuestionID, ppq.Answer, ppq.DateRecorded, ppq.RecordedBy, ppq.Active, ppq.UpdatedBy, ppq.Updated, ppq.ID)
	return err
}

// Save saves the ProtoPatientsQuestion to the database.
func (ppq *ProtoPatientsQuestion) Save(db XODB) error {
	if ppq.Exists() {
		return ppq.Update(db)
	}

	return ppq.Insert(db)
}

// Delete deletes the ProtoPatientsQuestion from the database.
func (ppq *ProtoPatientsQuestion) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppq._exists {
		return nil
	}

	// if deleted, bail
	if ppq._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.proto_patients_questions WHERE id = ?`

	// run query
	XOLog(sqlstr, ppq.ID)
	_, err = db.Exec(sqlstr, ppq.ID)
	if err != nil {
		return err
	}

	// set deleted
	ppq._deleted = true

	return nil
}

// Patient returns the Patient associated with the ProtoPatientsQuestion's PatientID (patient_id).
//
// Generated from foreign key 'proto_patients_questions_patient'.
func (ppq *ProtoPatientsQuestion) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(ppq.PatientID.Int64))
}

// Practice returns the Practice associated with the ProtoPatientsQuestion's PracticeID (practice_id).
//
// Generated from foreign key 'proto_patients_questions_practice'.
func (ppq *ProtoPatientsQuestion) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(ppq.PracticeID.Int64))
}

// UserByRecordedBy returns the User associated with the ProtoPatientsQuestion's RecordedBy (recorded_by).
//
// Generated from foreign key 'proto_patients_questions_recorded_by'.
func (ppq *ProtoPatientsQuestion) UserByRecordedBy(db XODB) (*User, error) {
	return UserByID(db, uint(ppq.RecordedBy.Int64))
}

// UserByUpdatedBy returns the User associated with the ProtoPatientsQuestion's UpdatedBy (updated_by).
//
// Generated from foreign key 'proto_patients_questions_updated'.
func (ppq *ProtoPatientsQuestion) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(ppq.UpdatedBy.Int64))
}

// ProtoPatientsQuestionsByPatientID retrieves a row from 'AllergyNew.proto_patients_questions' as a ProtoPatientsQuestion.
//
// Generated from index 'Patients'.
func ProtoPatientsQuestionsByPatientID(db XODB, patientID sql.NullInt64) ([]*ProtoPatientsQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, question_id, answer, date_recorded, recorded_by, active, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_questions ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsQuestion{}
	for q.Next() {
		ppq := ProtoPatientsQuestion{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppq.ID, &ppq.PracticeID, &ppq.PatientID, &ppq.QuestionID, &ppq.Answer, &ppq.DateRecorded, &ppq.RecordedBy, &ppq.Active, &ppq.UpdatedBy, &ppq.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppq)
	}

	return res, nil
}

// ProtoPatientsQuestionsByPracticeID retrieves a row from 'AllergyNew.proto_patients_questions' as a ProtoPatientsQuestion.
//
// Generated from index 'Practices'.
func ProtoPatientsQuestionsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*ProtoPatientsQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, question_id, answer, date_recorded, recorded_by, active, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_questions ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsQuestion{}
	for q.Next() {
		ppq := ProtoPatientsQuestion{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppq.ID, &ppq.PracticeID, &ppq.PatientID, &ppq.QuestionID, &ppq.Answer, &ppq.DateRecorded, &ppq.RecordedBy, &ppq.Active, &ppq.UpdatedBy, &ppq.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppq)
	}

	return res, nil
}

// ProtoPatientsQuestionByID retrieves a row from 'AllergyNew.proto_patients_questions' as a ProtoPatientsQuestion.
//
// Generated from index 'proto_patients_questions_id_pkey'.
func ProtoPatientsQuestionByID(db XODB, id uint) (*ProtoPatientsQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, question_id, answer, date_recorded, recorded_by, active, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_questions ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ppq := ProtoPatientsQuestion{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ppq.ID, &ppq.PracticeID, &ppq.PatientID, &ppq.QuestionID, &ppq.Answer, &ppq.DateRecorded, &ppq.RecordedBy, &ppq.Active, &ppq.UpdatedBy, &ppq.Updated)
	if err != nil {
		return nil, err
	}

	return &ppq, nil
}

// ProtoPatientsQuestionsByRecordedBy retrieves a row from 'AllergyNew.proto_patients_questions' as a ProtoPatientsQuestion.
//
// Generated from index 'proto_patients_questions_recorded_by'.
func ProtoPatientsQuestionsByRecordedBy(db XODB, recordedBy sql.NullInt64) ([]*ProtoPatientsQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, question_id, answer, date_recorded, recorded_by, active, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_questions ` +
		`WHERE recorded_by = ?`

	// run query
	XOLog(sqlstr, recordedBy)
	q, err := db.Query(sqlstr, recordedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsQuestion{}
	for q.Next() {
		ppq := ProtoPatientsQuestion{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppq.ID, &ppq.PracticeID, &ppq.PatientID, &ppq.QuestionID, &ppq.Answer, &ppq.DateRecorded, &ppq.RecordedBy, &ppq.Active, &ppq.UpdatedBy, &ppq.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppq)
	}

	return res, nil
}

// ProtoPatientsQuestionsByUpdatedBy retrieves a row from 'AllergyNew.proto_patients_questions' as a ProtoPatientsQuestion.
//
// Generated from index 'proto_patients_questions_updated'.
func ProtoPatientsQuestionsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*ProtoPatientsQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, question_id, answer, date_recorded, recorded_by, active, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_questions ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsQuestion{}
	for q.Next() {
		ppq := ProtoPatientsQuestion{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppq.ID, &ppq.PracticeID, &ppq.PatientID, &ppq.QuestionID, &ppq.Answer, &ppq.DateRecorded, &ppq.RecordedBy, &ppq.Active, &ppq.UpdatedBy, &ppq.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppq)
	}

	return res, nil
}
