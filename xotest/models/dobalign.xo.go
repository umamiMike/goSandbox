// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// DobAlign is the 'dob_align' enum type from schema 'AllergyNew'.
type DobAlign uint16

const (
	// DobAlignNone is the 'none' DobAlign.
	DobAlignNone = DobAlign(1)

	// DobAlignLeft is the 'left' DobAlign.
	DobAlignLeft = DobAlign(2)

	// DobAlignRight is the 'right' DobAlign.
	DobAlignRight = DobAlign(3)

	// DobAlignCenter is the 'center' DobAlign.
	DobAlignCenter = DobAlign(4)
)

// String returns the string value of the DobAlign.
func (da DobAlign) String() string {
	var enumVal string

	switch da {
	case DobAlignNone:
		enumVal = "none"

	case DobAlignLeft:
		enumVal = "left"

	case DobAlignRight:
		enumVal = "right"

	case DobAlignCenter:
		enumVal = "center"
	}

	return enumVal
}

// MarshalText marshals DobAlign into text.
func (da DobAlign) MarshalText() ([]byte, error) {
	return []byte(da.String()), nil
}

// UnmarshalText unmarshals DobAlign from text.
func (da *DobAlign) UnmarshalText(text []byte) error {
	switch string(text) {
	case "none":
		*da = DobAlignNone

	case "left":
		*da = DobAlignLeft

	case "right":
		*da = DobAlignRight

	case "center":
		*da = DobAlignCenter

	default:
		return errors.New("invalid DobAlign")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for DobAlign.
func (da DobAlign) Value() (driver.Value, error) {
	return da.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for DobAlign.
func (da *DobAlign) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid DobAlign")
	}

	return da.UnmarshalText(buf)
}
