// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// IgeTestClassAntigen represents a row from 'AllergyNew.ige_test_class_antigens'.
type IgeTestClassAntigen struct {
	ID              uint           `json:"id"`               // id
	Class           sql.NullString `json:"class"`            // class
	AntigenStrength sql.NullInt64  `json:"antigen_strength"` // antigen_strength
	UpdatedBy       sql.NullInt64  `json:"updated_by"`       // updated_by
	Updated         time.Time      `json:"updated"`          // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IgeTestClassAntigen exists in the database.
func (itca *IgeTestClassAntigen) Exists() bool {
	return itca._exists
}

// Deleted provides information if the IgeTestClassAntigen has been deleted from the database.
func (itca *IgeTestClassAntigen) Deleted() bool {
	return itca._deleted
}

// Insert inserts the IgeTestClassAntigen to the database.
func (itca *IgeTestClassAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if itca._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.ige_test_class_antigens (` +
		`class, antigen_strength, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, itca.Class, itca.AntigenStrength, itca.UpdatedBy, itca.Updated)
	res, err := db.Exec(sqlstr, itca.Class, itca.AntigenStrength, itca.UpdatedBy, itca.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	itca.ID = uint(id)
	itca._exists = true

	return nil
}

// Update updates the IgeTestClassAntigen in the database.
func (itca *IgeTestClassAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itca._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if itca._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.ige_test_class_antigens SET ` +
		`class = ?, antigen_strength = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, itca.Class, itca.AntigenStrength, itca.UpdatedBy, itca.Updated, itca.ID)
	_, err = db.Exec(sqlstr, itca.Class, itca.AntigenStrength, itca.UpdatedBy, itca.Updated, itca.ID)
	return err
}

// Save saves the IgeTestClassAntigen to the database.
func (itca *IgeTestClassAntigen) Save(db XODB) error {
	if itca.Exists() {
		return itca.Update(db)
	}

	return itca.Insert(db)
}

// Delete deletes the IgeTestClassAntigen from the database.
func (itca *IgeTestClassAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itca._exists {
		return nil
	}

	// if deleted, bail
	if itca._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.ige_test_class_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, itca.ID)
	_, err = db.Exec(sqlstr, itca.ID)
	if err != nil {
		return err
	}

	// set deleted
	itca._deleted = true

	return nil
}

// IgeTestClassAntigenByID retrieves a row from 'AllergyNew.ige_test_class_antigens' as a IgeTestClassAntigen.
//
// Generated from index 'ige_test_class_antigens_id_pkey'.
func IgeTestClassAntigenByID(db XODB, id uint) (*IgeTestClassAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, class, antigen_strength, updated_by, updated ` +
		`FROM AllergyNew.ige_test_class_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	itca := IgeTestClassAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&itca.ID, &itca.Class, &itca.AntigenStrength, &itca.UpdatedBy, &itca.Updated)
	if err != nil {
		return nil, err
	}

	return &itca, nil
}
