// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// AcLog represents a row from 'AllergyNew.ac_logs'.
type AcLog struct {
	ID         uint           `json:"id"`          // id
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at
	DeletedAt  mysql.NullTime `json:"deleted_at"`  // deleted_at
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	LocationID sql.NullInt64  `json:"location_id"` // location_id
	UserID     sql.NullInt64  `json:"user_id"`     // user_id
	SessionID  sql.NullString `json:"session_id"`  // session_id
	URL        sql.NullString `json:"url"`         // url
	Query      sql.NullString `json:"query"`       // query
	Post       sql.NullString `json:"post"`        // post
	Timestamp  mysql.NullTime `json:"timestamp"`   // timestamp
	UUID       sql.NullString `json:"uuid"`        // uuid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AcLog exists in the database.
func (al *AcLog) Exists() bool {
	return al._exists
}

// Deleted provides information if the AcLog has been deleted from the database.
func (al *AcLog) Deleted() bool {
	return al._deleted
}

// Insert inserts the AcLog to the database.
func (al *AcLog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if al._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.ac_logs (` +
		`created_at, updated_at, deleted_at, practice_id, location_id, user_id, session_id, url, query, post, timestamp, uuid` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, al.CreatedAt, al.UpdatedAt, al.DeletedAt, al.PracticeID, al.LocationID, al.UserID, al.SessionID, al.URL, al.Query, al.Post, al.Timestamp, al.UUID)
	res, err := db.Exec(sqlstr, al.CreatedAt, al.UpdatedAt, al.DeletedAt, al.PracticeID, al.LocationID, al.UserID, al.SessionID, al.URL, al.Query, al.Post, al.Timestamp, al.UUID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	al.ID = uint(id)
	al._exists = true

	return nil
}

// Update updates the AcLog in the database.
func (al *AcLog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !al._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if al._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.ac_logs SET ` +
		`created_at = ?, updated_at = ?, deleted_at = ?, practice_id = ?, location_id = ?, user_id = ?, session_id = ?, url = ?, query = ?, post = ?, timestamp = ?, uuid = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, al.CreatedAt, al.UpdatedAt, al.DeletedAt, al.PracticeID, al.LocationID, al.UserID, al.SessionID, al.URL, al.Query, al.Post, al.Timestamp, al.UUID, al.ID)
	_, err = db.Exec(sqlstr, al.CreatedAt, al.UpdatedAt, al.DeletedAt, al.PracticeID, al.LocationID, al.UserID, al.SessionID, al.URL, al.Query, al.Post, al.Timestamp, al.UUID, al.ID)
	return err
}

// Save saves the AcLog to the database.
func (al *AcLog) Save(db XODB) error {
	if al.Exists() {
		return al.Update(db)
	}

	return al.Insert(db)
}

// Delete deletes the AcLog from the database.
func (al *AcLog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !al._exists {
		return nil
	}

	// if deleted, bail
	if al._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.ac_logs WHERE id = ?`

	// run query
	XOLog(sqlstr, al.ID)
	_, err = db.Exec(sqlstr, al.ID)
	if err != nil {
		return err
	}

	// set deleted
	al._deleted = true

	return nil
}

// AcLogByID retrieves a row from 'AllergyNew.ac_logs' as a AcLog.
//
// Generated from index 'ac_logs_id_pkey'.
func AcLogByID(db XODB, id uint) (*AcLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created_at, updated_at, deleted_at, practice_id, location_id, user_id, session_id, url, query, post, timestamp, uuid ` +
		`FROM AllergyNew.ac_logs ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	al := AcLog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&al.ID, &al.CreatedAt, &al.UpdatedAt, &al.DeletedAt, &al.PracticeID, &al.LocationID, &al.UserID, &al.SessionID, &al.URL, &al.Query, &al.Post, &al.Timestamp, &al.UUID)
	if err != nil {
		return nil, err
	}

	return &al, nil
}

// AcLogsByDeletedAt retrieves a row from 'AllergyNew.ac_logs' as a AcLog.
//
// Generated from index 'idx_ac_logs_deleted_at'.
func AcLogsByDeletedAt(db XODB, deletedAt mysql.NullTime) ([]*AcLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created_at, updated_at, deleted_at, practice_id, location_id, user_id, session_id, url, query, post, timestamp, uuid ` +
		`FROM AllergyNew.ac_logs ` +
		`WHERE deleted_at = ?`

	// run query
	XOLog(sqlstr, deletedAt)
	q, err := db.Query(sqlstr, deletedAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AcLog{}
	for q.Next() {
		al := AcLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&al.ID, &al.CreatedAt, &al.UpdatedAt, &al.DeletedAt, &al.PracticeID, &al.LocationID, &al.UserID, &al.SessionID, &al.URL, &al.Query, &al.Post, &al.Timestamp, &al.UUID)
		if err != nil {
			return nil, err
		}

		res = append(res, &al)
	}

	return res, nil
}
