// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// VialNote represents a row from 'AllergyNew.vial_notes'.
type VialNote struct {
	ID         uint           `json:"id"`          // id
	VialID     sql.NullInt64  `json:"vial_id"`     // vial_id
	Note       sql.NullString `json:"note"`        // note
	CreateDate mysql.NullTime `json:"create_date"` // create_date
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	CreatorID  sql.NullInt64  `json:"creator_id"`  // creator_id
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialNote exists in the database.
func (vn *VialNote) Exists() bool {
	return vn._exists
}

// Deleted provides information if the VialNote has been deleted from the database.
func (vn *VialNote) Deleted() bool {
	return vn._deleted
}

// Insert inserts the VialNote to the database.
func (vn *VialNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_notes (` +
		`vial_id, note, create_date, practice_id, creator_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vn.VialID, vn.Note, vn.CreateDate, vn.PracticeID, vn.CreatorID, vn.UpdatedBy, vn.Updated)
	res, err := db.Exec(sqlstr, vn.VialID, vn.Note, vn.CreateDate, vn.PracticeID, vn.CreatorID, vn.UpdatedBy, vn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vn.ID = uint(id)
	vn._exists = true

	return nil
}

// Update updates the VialNote in the database.
func (vn *VialNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_notes SET ` +
		`vial_id = ?, note = ?, create_date = ?, practice_id = ?, creator_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vn.VialID, vn.Note, vn.CreateDate, vn.PracticeID, vn.CreatorID, vn.UpdatedBy, vn.Updated, vn.ID)
	_, err = db.Exec(sqlstr, vn.VialID, vn.Note, vn.CreateDate, vn.PracticeID, vn.CreatorID, vn.UpdatedBy, vn.Updated, vn.ID)
	return err
}

// Save saves the VialNote to the database.
func (vn *VialNote) Save(db XODB) error {
	if vn.Exists() {
		return vn.Update(db)
	}

	return vn.Insert(db)
}

// Delete deletes the VialNote from the database.
func (vn *VialNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vn._exists {
		return nil
	}

	// if deleted, bail
	if vn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, vn.ID)
	_, err = db.Exec(sqlstr, vn.ID)
	if err != nil {
		return err
	}

	// set deleted
	vn._deleted = true

	return nil
}

// UserByCreatorID returns the User associated with the VialNote's CreatorID (creator_id).
//
// Generated from foreign key 'vial_notes_creator'.
func (vn *VialNote) UserByCreatorID(db XODB) (*User, error) {
	return UserByID(db, uint(vn.CreatorID.Int64))
}

// UserByUpdatedBy returns the User associated with the VialNote's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_notes_updated'.
func (vn *VialNote) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(vn.UpdatedBy.Int64))
}

// Vial returns the Vial associated with the VialNote's VialID (vial_id).
//
// Generated from foreign key 'vial_notes_vial'.
func (vn *VialNote) Vial(db XODB) (*Vial, error) {
	return VialByID(db, uint(vn.VialID.Int64))
}

// VialNotesByCreatorID retrieves a row from 'AllergyNew.vial_notes' as a VialNote.
//
// Generated from index 'Creator'.
func VialNotesByCreatorID(db XODB, creatorID sql.NullInt64) ([]*VialNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, note, create_date, practice_id, creator_id, updated_by, updated ` +
		`FROM AllergyNew.vial_notes ` +
		`WHERE creator_id = ?`

	// run query
	XOLog(sqlstr, creatorID)
	q, err := db.Query(sqlstr, creatorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialNote{}
	for q.Next() {
		vn := VialNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&vn.ID, &vn.VialID, &vn.Note, &vn.CreateDate, &vn.PracticeID, &vn.CreatorID, &vn.UpdatedBy, &vn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vn)
	}

	return res, nil
}

// VialNotesByVialID retrieves a row from 'AllergyNew.vial_notes' as a VialNote.
//
// Generated from index 'Vial_ID'.
func VialNotesByVialID(db XODB, vialID sql.NullInt64) ([]*VialNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, note, create_date, practice_id, creator_id, updated_by, updated ` +
		`FROM AllergyNew.vial_notes ` +
		`WHERE vial_id = ?`

	// run query
	XOLog(sqlstr, vialID)
	q, err := db.Query(sqlstr, vialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialNote{}
	for q.Next() {
		vn := VialNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&vn.ID, &vn.VialID, &vn.Note, &vn.CreateDate, &vn.PracticeID, &vn.CreatorID, &vn.UpdatedBy, &vn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vn)
	}

	return res, nil
}

// VialNoteByID retrieves a row from 'AllergyNew.vial_notes' as a VialNote.
//
// Generated from index 'vial_notes_id_pkey'.
func VialNoteByID(db XODB, id uint) (*VialNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, note, create_date, practice_id, creator_id, updated_by, updated ` +
		`FROM AllergyNew.vial_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vn := VialNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vn.ID, &vn.VialID, &vn.Note, &vn.CreateDate, &vn.PracticeID, &vn.CreatorID, &vn.UpdatedBy, &vn.Updated)
	if err != nil {
		return nil, err
	}

	return &vn, nil
}

// VialNotesByUpdatedBy retrieves a row from 'AllergyNew.vial_notes' as a VialNote.
//
// Generated from index 'vial_notes_updated'.
func VialNotesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, note, create_date, practice_id, creator_id, updated_by, updated ` +
		`FROM AllergyNew.vial_notes ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialNote{}
	for q.Next() {
		vn := VialNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&vn.ID, &vn.VialID, &vn.Note, &vn.CreateDate, &vn.PracticeID, &vn.CreatorID, &vn.UpdatedBy, &vn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vn)
	}

	return res, nil
}
