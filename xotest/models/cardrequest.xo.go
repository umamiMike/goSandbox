// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// CardRequest represents a row from 'AllergyNew.card_requests'.
type CardRequest struct {
	ID          uint           `json:"id"`           // id
	PracticeID  sql.NullInt64  `json:"practice_id"`  // practice_id
	LocationID  sql.NullInt64  `json:"location_id"`  // location_id
	PatientID   sql.NullInt64  `json:"patient_id"`   // patient_id
	UserID      sql.NullInt64  `json:"user_id"`      // user_id
	RequestDate mysql.NullTime `json:"request_date"` // request_date
	PrintDate   mysql.NullTime `json:"print_date"`   // print_date
	MailDate    mysql.NullTime `json:"mail_date"`    // mail_date
	CancelDate  mysql.NullTime `json:"cancel_date"`  // cancel_date
	Notes       sql.NullString `json:"notes"`        // notes
	Status      Status         `json:"status"`       // status
	UpdatedBy   sql.NullInt64  `json:"updated_by"`   // updated_by
	Updated     time.Time      `json:"updated"`      // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CardRequest exists in the database.
func (cr *CardRequest) Exists() bool {
	return cr._exists
}

// Deleted provides information if the CardRequest has been deleted from the database.
func (cr *CardRequest) Deleted() bool {
	return cr._deleted
}

// Insert inserts the CardRequest to the database.
func (cr *CardRequest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.card_requests (` +
		`practice_id, location_id, patient_id, user_id, request_date, print_date, mail_date, cancel_date, notes, status, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cr.PracticeID, cr.LocationID, cr.PatientID, cr.UserID, cr.RequestDate, cr.PrintDate, cr.MailDate, cr.CancelDate, cr.Notes, cr.Status, cr.UpdatedBy, cr.Updated)
	res, err := db.Exec(sqlstr, cr.PracticeID, cr.LocationID, cr.PatientID, cr.UserID, cr.RequestDate, cr.PrintDate, cr.MailDate, cr.CancelDate, cr.Notes, cr.Status, cr.UpdatedBy, cr.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cr.ID = uint(id)
	cr._exists = true

	return nil
}

// Update updates the CardRequest in the database.
func (cr *CardRequest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.card_requests SET ` +
		`practice_id = ?, location_id = ?, patient_id = ?, user_id = ?, request_date = ?, print_date = ?, mail_date = ?, cancel_date = ?, notes = ?, status = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, cr.PracticeID, cr.LocationID, cr.PatientID, cr.UserID, cr.RequestDate, cr.PrintDate, cr.MailDate, cr.CancelDate, cr.Notes, cr.Status, cr.UpdatedBy, cr.Updated, cr.ID)
	_, err = db.Exec(sqlstr, cr.PracticeID, cr.LocationID, cr.PatientID, cr.UserID, cr.RequestDate, cr.PrintDate, cr.MailDate, cr.CancelDate, cr.Notes, cr.Status, cr.UpdatedBy, cr.Updated, cr.ID)
	return err
}

// Save saves the CardRequest to the database.
func (cr *CardRequest) Save(db XODB) error {
	if cr.Exists() {
		return cr.Update(db)
	}

	return cr.Insert(db)
}

// Delete deletes the CardRequest from the database.
func (cr *CardRequest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cr._exists {
		return nil
	}

	// if deleted, bail
	if cr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.card_requests WHERE id = ?`

	// run query
	XOLog(sqlstr, cr.ID)
	_, err = db.Exec(sqlstr, cr.ID)
	if err != nil {
		return err
	}

	// set deleted
	cr._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the CardRequest's LocationID (location_id).
//
// Generated from foreign key 'card_requests_location'.
func (cr *CardRequest) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(cr.LocationID.Int64))
}

// Patient returns the Patient associated with the CardRequest's PatientID (patient_id).
//
// Generated from foreign key 'card_requests_patient'.
func (cr *CardRequest) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(cr.PatientID.Int64))
}

// Practice returns the Practice associated with the CardRequest's PracticeID (practice_id).
//
// Generated from foreign key 'card_requests_practice'.
func (cr *CardRequest) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(cr.PracticeID.Int64))
}

// UserByUpdatedBy returns the User associated with the CardRequest's UpdatedBy (updated_by).
//
// Generated from foreign key 'card_requests_updated'.
func (cr *CardRequest) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(cr.UpdatedBy.Int64))
}

// UserByUserID returns the User associated with the CardRequest's UserID (user_id).
//
// Generated from foreign key 'card_requests_user'.
func (cr *CardRequest) UserByUserID(db XODB) (*User, error) {
	return UserByID(db, uint(cr.UserID.Int64))
}

// CardRequestsByLocationID retrieves a row from 'AllergyNew.card_requests' as a CardRequest.
//
// Generated from index 'Locations'.
func CardRequestsByLocationID(db XODB, locationID sql.NullInt64) ([]*CardRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, user_id, request_date, print_date, mail_date, cancel_date, notes, status, updated_by, updated ` +
		`FROM AllergyNew.card_requests ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CardRequest{}
	for q.Next() {
		cr := CardRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&cr.ID, &cr.PracticeID, &cr.LocationID, &cr.PatientID, &cr.UserID, &cr.RequestDate, &cr.PrintDate, &cr.MailDate, &cr.CancelDate, &cr.Notes, &cr.Status, &cr.UpdatedBy, &cr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &cr)
	}

	return res, nil
}

// CardRequestsByPatientID retrieves a row from 'AllergyNew.card_requests' as a CardRequest.
//
// Generated from index 'Patients'.
func CardRequestsByPatientID(db XODB, patientID sql.NullInt64) ([]*CardRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, user_id, request_date, print_date, mail_date, cancel_date, notes, status, updated_by, updated ` +
		`FROM AllergyNew.card_requests ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CardRequest{}
	for q.Next() {
		cr := CardRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&cr.ID, &cr.PracticeID, &cr.LocationID, &cr.PatientID, &cr.UserID, &cr.RequestDate, &cr.PrintDate, &cr.MailDate, &cr.CancelDate, &cr.Notes, &cr.Status, &cr.UpdatedBy, &cr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &cr)
	}

	return res, nil
}

// CardRequestsByPracticeID retrieves a row from 'AllergyNew.card_requests' as a CardRequest.
//
// Generated from index 'Practices'.
func CardRequestsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*CardRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, user_id, request_date, print_date, mail_date, cancel_date, notes, status, updated_by, updated ` +
		`FROM AllergyNew.card_requests ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CardRequest{}
	for q.Next() {
		cr := CardRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&cr.ID, &cr.PracticeID, &cr.LocationID, &cr.PatientID, &cr.UserID, &cr.RequestDate, &cr.PrintDate, &cr.MailDate, &cr.CancelDate, &cr.Notes, &cr.Status, &cr.UpdatedBy, &cr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &cr)
	}

	return res, nil
}

// CardRequestsByUserID retrieves a row from 'AllergyNew.card_requests' as a CardRequest.
//
// Generated from index 'Users'.
func CardRequestsByUserID(db XODB, userID sql.NullInt64) ([]*CardRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, user_id, request_date, print_date, mail_date, cancel_date, notes, status, updated_by, updated ` +
		`FROM AllergyNew.card_requests ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CardRequest{}
	for q.Next() {
		cr := CardRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&cr.ID, &cr.PracticeID, &cr.LocationID, &cr.PatientID, &cr.UserID, &cr.RequestDate, &cr.PrintDate, &cr.MailDate, &cr.CancelDate, &cr.Notes, &cr.Status, &cr.UpdatedBy, &cr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &cr)
	}

	return res, nil
}

// CardRequestByID retrieves a row from 'AllergyNew.card_requests' as a CardRequest.
//
// Generated from index 'card_requests_id_pkey'.
func CardRequestByID(db XODB, id uint) (*CardRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, user_id, request_date, print_date, mail_date, cancel_date, notes, status, updated_by, updated ` +
		`FROM AllergyNew.card_requests ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	cr := CardRequest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cr.ID, &cr.PracticeID, &cr.LocationID, &cr.PatientID, &cr.UserID, &cr.RequestDate, &cr.PrintDate, &cr.MailDate, &cr.CancelDate, &cr.Notes, &cr.Status, &cr.UpdatedBy, &cr.Updated)
	if err != nil {
		return nil, err
	}

	return &cr, nil
}

// CardRequestsByUpdatedBy retrieves a row from 'AllergyNew.card_requests' as a CardRequest.
//
// Generated from index 'card_requests_updated'.
func CardRequestsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*CardRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, user_id, request_date, print_date, mail_date, cancel_date, notes, status, updated_by, updated ` +
		`FROM AllergyNew.card_requests ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*CardRequest{}
	for q.Next() {
		cr := CardRequest{
			_exists: true,
		}

		// scan
		err = q.Scan(&cr.ID, &cr.PracticeID, &cr.LocationID, &cr.PatientID, &cr.UserID, &cr.RequestDate, &cr.PrintDate, &cr.MailDate, &cr.CancelDate, &cr.Notes, &cr.Status, &cr.UpdatedBy, &cr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &cr)
	}

	return res, nil
}
