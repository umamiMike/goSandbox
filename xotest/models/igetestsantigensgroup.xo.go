// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// IgeTestsAntigensGroup represents a row from 'AllergyNew.ige_tests_antigens_groups'.
type IgeTestsAntigensGroup struct {
	ID           uint           `json:"id"`            // id
	TestID       uint           `json:"test_id"`       // test_id
	TemplateID   sql.NullInt64  `json:"template_id"`   // template_id
	TemplateName sql.NullString `json:"template_name"` // template_name
	UpdatedBy    sql.NullInt64  `json:"updated_by"`    // updated_by
	Updated      time.Time      `json:"updated"`       // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IgeTestsAntigensGroup exists in the database.
func (itag *IgeTestsAntigensGroup) Exists() bool {
	return itag._exists
}

// Deleted provides information if the IgeTestsAntigensGroup has been deleted from the database.
func (itag *IgeTestsAntigensGroup) Deleted() bool {
	return itag._deleted
}

// Insert inserts the IgeTestsAntigensGroup to the database.
func (itag *IgeTestsAntigensGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if itag._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.ige_tests_antigens_groups (` +
		`test_id, template_id, template_name, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, itag.TestID, itag.TemplateID, itag.TemplateName, itag.UpdatedBy, itag.Updated)
	res, err := db.Exec(sqlstr, itag.TestID, itag.TemplateID, itag.TemplateName, itag.UpdatedBy, itag.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	itag.ID = uint(id)
	itag._exists = true

	return nil
}

// Update updates the IgeTestsAntigensGroup in the database.
func (itag *IgeTestsAntigensGroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itag._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if itag._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.ige_tests_antigens_groups SET ` +
		`test_id = ?, template_id = ?, template_name = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, itag.TestID, itag.TemplateID, itag.TemplateName, itag.UpdatedBy, itag.Updated, itag.ID)
	_, err = db.Exec(sqlstr, itag.TestID, itag.TemplateID, itag.TemplateName, itag.UpdatedBy, itag.Updated, itag.ID)
	return err
}

// Save saves the IgeTestsAntigensGroup to the database.
func (itag *IgeTestsAntigensGroup) Save(db XODB) error {
	if itag.Exists() {
		return itag.Update(db)
	}

	return itag.Insert(db)
}

// Delete deletes the IgeTestsAntigensGroup from the database.
func (itag *IgeTestsAntigensGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !itag._exists {
		return nil
	}

	// if deleted, bail
	if itag._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.ige_tests_antigens_groups WHERE id = ?`

	// run query
	XOLog(sqlstr, itag.ID)
	_, err = db.Exec(sqlstr, itag.ID)
	if err != nil {
		return err
	}

	// set deleted
	itag._deleted = true

	return nil
}

// IgeTestsAntigensGroupByID retrieves a row from 'AllergyNew.ige_tests_antigens_groups' as a IgeTestsAntigensGroup.
//
// Generated from index 'ige_tests_antigens_groups_id_pkey'.
func IgeTestsAntigensGroupByID(db XODB, id uint) (*IgeTestsAntigensGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, template_id, template_name, updated_by, updated ` +
		`FROM AllergyNew.ige_tests_antigens_groups ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	itag := IgeTestsAntigensGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&itag.ID, &itag.TestID, &itag.TemplateID, &itag.TemplateName, &itag.UpdatedBy, &itag.Updated)
	if err != nil {
		return nil, err
	}

	return &itag, nil
}
