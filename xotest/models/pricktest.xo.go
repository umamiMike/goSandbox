// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PrickTest represents a row from 'AllergyNew.prick_tests'.
type PrickTest struct {
	ID                 uint           `json:"id"`                  // id
	PracticeID         sql.NullInt64  `json:"practice_id"`         // practice_id
	LocationID         sql.NullInt64  `json:"location_id"`         // location_id
	PatientID          sql.NullInt64  `json:"patient_id"`          // patient_id
	OrderID            sql.NullInt64  `json:"order_id"`            // order_id
	TestDate           mysql.NullTime `json:"test_date"`           // test_date
	TesterID           sql.NullInt64  `json:"tester_id"`           // tester_id
	TemplateID         sql.NullInt64  `json:"template_id"`         // template_id
	VitalsID           sql.NullInt64  `json:"vitals_id"`           // vitals_id
	Pregnant           sql.NullInt64  `json:"pregnant"`            // pregnant
	BetaBlocker        sql.NullInt64  `json:"beta_blocker"`        // beta_blocker
	SeasonalAllergies  sql.NullInt64  `json:"seasonal_allergies"`  // seasonal_allergies
	Status             Status         `json:"status"`              // status
	RecommendTreatment sql.NullInt64  `json:"recommend_treatment"` // recommend_treatment
	RecommendID        sql.NullInt64  `json:"recommend_id"`        // recommend_id
	BillableEventID    sql.NullInt64  `json:"billable_event_id"`   // billable_event_id
	Signed             int8           `json:"signed"`              // signed
	SignedDate         mysql.NullTime `json:"signed_date"`         // signed_date
	SignedBy           sql.NullInt64  `json:"signed_by"`           // signed_by
	Pft                sql.NullString `json:"pft"`                 // pft
	Notes              sql.NullString `json:"notes"`               // notes
	EmrOrdersID        sql.NullInt64  `json:"emr_orders_id"`       // emr_orders_id
	UpdatedBy          sql.NullInt64  `json:"updated_by"`          // updated_by
	Updated            time.Time      `json:"updated"`             // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PrickTest exists in the database.
func (pt *PrickTest) Exists() bool {
	return pt._exists
}

// Deleted provides information if the PrickTest has been deleted from the database.
func (pt *PrickTest) Deleted() bool {
	return pt._deleted
}

// Insert inserts the PrickTest to the database.
func (pt *PrickTest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.prick_tests (` +
		`practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pt.PracticeID, pt.LocationID, pt.PatientID, pt.OrderID, pt.TestDate, pt.TesterID, pt.TemplateID, pt.VitalsID, pt.Pregnant, pt.BetaBlocker, pt.SeasonalAllergies, pt.Status, pt.RecommendTreatment, pt.RecommendID, pt.BillableEventID, pt.Signed, pt.SignedDate, pt.SignedBy, pt.Pft, pt.Notes, pt.EmrOrdersID, pt.UpdatedBy, pt.Updated)
	res, err := db.Exec(sqlstr, pt.PracticeID, pt.LocationID, pt.PatientID, pt.OrderID, pt.TestDate, pt.TesterID, pt.TemplateID, pt.VitalsID, pt.Pregnant, pt.BetaBlocker, pt.SeasonalAllergies, pt.Status, pt.RecommendTreatment, pt.RecommendID, pt.BillableEventID, pt.Signed, pt.SignedDate, pt.SignedBy, pt.Pft, pt.Notes, pt.EmrOrdersID, pt.UpdatedBy, pt.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pt.ID = uint(id)
	pt._exists = true

	return nil
}

// Update updates the PrickTest in the database.
func (pt *PrickTest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.prick_tests SET ` +
		`practice_id = ?, location_id = ?, patient_id = ?, order_id = ?, test_date = ?, tester_id = ?, template_id = ?, vitals_id = ?, pregnant = ?, beta_blocker = ?, seasonal_allergies = ?, status = ?, recommend_treatment = ?, recommend_id = ?, billable_event_id = ?, signed = ?, signed_date = ?, signed_by = ?, pft = ?, notes = ?, emr_orders_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pt.PracticeID, pt.LocationID, pt.PatientID, pt.OrderID, pt.TestDate, pt.TesterID, pt.TemplateID, pt.VitalsID, pt.Pregnant, pt.BetaBlocker, pt.SeasonalAllergies, pt.Status, pt.RecommendTreatment, pt.RecommendID, pt.BillableEventID, pt.Signed, pt.SignedDate, pt.SignedBy, pt.Pft, pt.Notes, pt.EmrOrdersID, pt.UpdatedBy, pt.Updated, pt.ID)
	_, err = db.Exec(sqlstr, pt.PracticeID, pt.LocationID, pt.PatientID, pt.OrderID, pt.TestDate, pt.TesterID, pt.TemplateID, pt.VitalsID, pt.Pregnant, pt.BetaBlocker, pt.SeasonalAllergies, pt.Status, pt.RecommendTreatment, pt.RecommendID, pt.BillableEventID, pt.Signed, pt.SignedDate, pt.SignedBy, pt.Pft, pt.Notes, pt.EmrOrdersID, pt.UpdatedBy, pt.Updated, pt.ID)
	return err
}

// Save saves the PrickTest to the database.
func (pt *PrickTest) Save(db XODB) error {
	if pt.Exists() {
		return pt.Update(db)
	}

	return pt.Insert(db)
}

// Delete deletes the PrickTest from the database.
func (pt *PrickTest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pt._exists {
		return nil
	}

	// if deleted, bail
	if pt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.prick_tests WHERE id = ?`

	// run query
	XOLog(sqlstr, pt.ID)
	_, err = db.Exec(sqlstr, pt.ID)
	if err != nil {
		return err
	}

	// set deleted
	pt._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the PrickTest's LocationID (location_id).
//
// Generated from foreign key 'prick_tests_location'.
func (pt *PrickTest) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(pt.LocationID.Int64))
}

// Order returns the Order associated with the PrickTest's OrderID (order_id).
//
// Generated from foreign key 'prick_tests_order'.
func (pt *PrickTest) Order(db XODB) (*Order, error) {
	return OrderByID(db, uint(pt.OrderID.Int64))
}

// Patient returns the Patient associated with the PrickTest's PatientID (patient_id).
//
// Generated from foreign key 'prick_tests_patient'.
func (pt *PrickTest) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(pt.PatientID.Int64))
}

// Practice returns the Practice associated with the PrickTest's PracticeID (practice_id).
//
// Generated from foreign key 'prick_tests_practice'.
func (pt *PrickTest) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(pt.PracticeID.Int64))
}

// PrickTestTemplate returns the PrickTestTemplate associated with the PrickTest's TemplateID (template_id).
//
// Generated from foreign key 'prick_tests_template'.
func (pt *PrickTest) PrickTestTemplate(db XODB) (*PrickTestTemplate, error) {
	return PrickTestTemplateByID(db, uint(pt.TemplateID.Int64))
}

// UserByTesterID returns the User associated with the PrickTest's TesterID (tester_id).
//
// Generated from foreign key 'prick_tests_tester'.
func (pt *PrickTest) UserByTesterID(db XODB) (*User, error) {
	return UserByID(db, uint(pt.TesterID.Int64))
}

// UserByUpdatedBy returns the User associated with the PrickTest's UpdatedBy (updated_by).
//
// Generated from foreign key 'prick_tests_updated'.
func (pt *PrickTest) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(pt.UpdatedBy.Int64))
}

// Vital returns the Vital associated with the PrickTest's VitalsID (vitals_id).
//
// Generated from foreign key 'prick_tests_vitals'.
func (pt *PrickTest) Vital(db XODB) (*Vital, error) {
	return VitalByID(db, uint(pt.VitalsID.Int64))
}

// PrickTestsByLocationID retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'Locations'.
func PrickTestsByLocationID(db XODB, locationID sql.NullInt64) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PrickTestsByOrderID retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'Orders'.
func PrickTestsByOrderID(db XODB, orderID sql.NullInt64) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE order_id = ?`

	// run query
	XOLog(sqlstr, orderID)
	q, err := db.Query(sqlstr, orderID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PrickTestsByPatientID retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'Patients'.
func PrickTestsByPatientID(db XODB, patientID sql.NullInt64) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PrickTestsByPracticeID retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'Practices'.
func PrickTestsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PrickTestsByTestDate retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'prick_test_date'.
func PrickTestsByTestDate(db XODB, testDate mysql.NullTime) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE test_date = ?`

	// run query
	XOLog(sqlstr, testDate)
	q, err := db.Query(sqlstr, testDate)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PrickTestsByStatus retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'prick_test_status'.
func PrickTestsByStatus(db XODB, status Status) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE status = ?`

	// run query
	XOLog(sqlstr, status)
	q, err := db.Query(sqlstr, status)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PrickTestByID retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'prick_tests_id_pkey'.
func PrickTestByID(db XODB, id uint) (*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pt := PrickTest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
	if err != nil {
		return nil, err
	}

	return &pt, nil
}

// PrickTestsByTemplateID retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'prick_tests_template'.
func PrickTestsByTemplateID(db XODB, templateID sql.NullInt64) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE template_id = ?`

	// run query
	XOLog(sqlstr, templateID)
	q, err := db.Query(sqlstr, templateID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PrickTestsByTesterID retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'prick_tests_tester'.
func PrickTestsByTesterID(db XODB, testerID sql.NullInt64) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE tester_id = ?`

	// run query
	XOLog(sqlstr, testerID)
	q, err := db.Query(sqlstr, testerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PrickTestsByUpdatedBy retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'prick_tests_updated'.
func PrickTestsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PrickTestsByVitalsID retrieves a row from 'AllergyNew.prick_tests' as a PrickTest.
//
// Generated from index 'prick_tests_vitals'.
func PrickTestsByVitalsID(db XODB, vitalsID sql.NullInt64) ([]*PrickTest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, patient_id, order_id, test_date, tester_id, template_id, vitals_id, pregnant, beta_blocker, seasonal_allergies, status, recommend_treatment, recommend_id, billable_event_id, signed, signed_date, signed_by, pft, notes, emr_orders_id, updated_by, updated ` +
		`FROM AllergyNew.prick_tests ` +
		`WHERE vitals_id = ?`

	// run query
	XOLog(sqlstr, vitalsID)
	q, err := db.Query(sqlstr, vitalsID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTest{}
	for q.Next() {
		pt := PrickTest{
			_exists: true,
		}

		// scan
		err = q.Scan(&pt.ID, &pt.PracticeID, &pt.LocationID, &pt.PatientID, &pt.OrderID, &pt.TestDate, &pt.TesterID, &pt.TemplateID, &pt.VitalsID, &pt.Pregnant, &pt.BetaBlocker, &pt.SeasonalAllergies, &pt.Status, &pt.RecommendTreatment, &pt.RecommendID, &pt.BillableEventID, &pt.Signed, &pt.SignedDate, &pt.SignedBy, &pt.Pft, &pt.Notes, &pt.EmrOrdersID, &pt.UpdatedBy, &pt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}
