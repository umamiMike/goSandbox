// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// ProtoPatientsGen represents a row from 'AllergyNew.proto_patients_gens'.
type ProtoPatientsGen struct {
	ID            uint           `json:"id"`             // id
	PracticeID    sql.NullInt64  `json:"practice_id"`    // practice_id
	PatientID     sql.NullInt64  `json:"patient_id"`     // patient_id
	TestID        sql.NullInt64  `json:"test_id"`        // test_id
	TestType      TestType       `json:"test_type"`      // test_type
	DateGenerated mysql.NullTime `json:"date_generated"` // date_generated
	GeneratedBy   sql.NullInt64  `json:"generated_by"`   // generated_by
	UpdatedBy     sql.NullInt64  `json:"updated_by"`     // updated_by
	Updated       time.Time      `json:"updated"`        // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProtoPatientsGen exists in the database.
func (ppg *ProtoPatientsGen) Exists() bool {
	return ppg._exists
}

// Deleted provides information if the ProtoPatientsGen has been deleted from the database.
func (ppg *ProtoPatientsGen) Deleted() bool {
	return ppg._deleted
}

// Insert inserts the ProtoPatientsGen to the database.
func (ppg *ProtoPatientsGen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ppg._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.proto_patients_gens (` +
		`practice_id, patient_id, test_id, test_type, date_generated, generated_by, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ppg.PracticeID, ppg.PatientID, ppg.TestID, ppg.TestType, ppg.DateGenerated, ppg.GeneratedBy, ppg.UpdatedBy, ppg.Updated)
	res, err := db.Exec(sqlstr, ppg.PracticeID, ppg.PatientID, ppg.TestID, ppg.TestType, ppg.DateGenerated, ppg.GeneratedBy, ppg.UpdatedBy, ppg.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ppg.ID = uint(id)
	ppg._exists = true

	return nil
}

// Update updates the ProtoPatientsGen in the database.
func (ppg *ProtoPatientsGen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppg._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ppg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.proto_patients_gens SET ` +
		`practice_id = ?, patient_id = ?, test_id = ?, test_type = ?, date_generated = ?, generated_by = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ppg.PracticeID, ppg.PatientID, ppg.TestID, ppg.TestType, ppg.DateGenerated, ppg.GeneratedBy, ppg.UpdatedBy, ppg.Updated, ppg.ID)
	_, err = db.Exec(sqlstr, ppg.PracticeID, ppg.PatientID, ppg.TestID, ppg.TestType, ppg.DateGenerated, ppg.GeneratedBy, ppg.UpdatedBy, ppg.Updated, ppg.ID)
	return err
}

// Save saves the ProtoPatientsGen to the database.
func (ppg *ProtoPatientsGen) Save(db XODB) error {
	if ppg.Exists() {
		return ppg.Update(db)
	}

	return ppg.Insert(db)
}

// Delete deletes the ProtoPatientsGen from the database.
func (ppg *ProtoPatientsGen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppg._exists {
		return nil
	}

	// if deleted, bail
	if ppg._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.proto_patients_gens WHERE id = ?`

	// run query
	XOLog(sqlstr, ppg.ID)
	_, err = db.Exec(sqlstr, ppg.ID)
	if err != nil {
		return err
	}

	// set deleted
	ppg._deleted = true

	return nil
}

// UserByGeneratedBy returns the User associated with the ProtoPatientsGen's GeneratedBy (generated_by).
//
// Generated from foreign key 'proto_patients_gens_generated_by'.
func (ppg *ProtoPatientsGen) UserByGeneratedBy(db XODB) (*User, error) {
	return UserByID(db, uint(ppg.GeneratedBy.Int64))
}

// Patient returns the Patient associated with the ProtoPatientsGen's PatientID (patient_id).
//
// Generated from foreign key 'proto_patients_gens_patient'.
func (ppg *ProtoPatientsGen) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(ppg.PatientID.Int64))
}

// Practice returns the Practice associated with the ProtoPatientsGen's PracticeID (practice_id).
//
// Generated from foreign key 'proto_patients_gens_practice'.
func (ppg *ProtoPatientsGen) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(ppg.PracticeID.Int64))
}

// UserByUpdatedBy returns the User associated with the ProtoPatientsGen's UpdatedBy (updated_by).
//
// Generated from foreign key 'proto_patients_gens_updated'.
func (ppg *ProtoPatientsGen) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(ppg.UpdatedBy.Int64))
}

// ProtoPatientsGensByPatientID retrieves a row from 'AllergyNew.proto_patients_gens' as a ProtoPatientsGen.
//
// Generated from index 'Patients'.
func ProtoPatientsGensByPatientID(db XODB, patientID sql.NullInt64) ([]*ProtoPatientsGen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, test_id, test_type, date_generated, generated_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_gens ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsGen{}
	for q.Next() {
		ppg := ProtoPatientsGen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppg.ID, &ppg.PracticeID, &ppg.PatientID, &ppg.TestID, &ppg.TestType, &ppg.DateGenerated, &ppg.GeneratedBy, &ppg.UpdatedBy, &ppg.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppg)
	}

	return res, nil
}

// ProtoPatientsGensByPracticeID retrieves a row from 'AllergyNew.proto_patients_gens' as a ProtoPatientsGen.
//
// Generated from index 'Practices'.
func ProtoPatientsGensByPracticeID(db XODB, practiceID sql.NullInt64) ([]*ProtoPatientsGen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, test_id, test_type, date_generated, generated_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_gens ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsGen{}
	for q.Next() {
		ppg := ProtoPatientsGen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppg.ID, &ppg.PracticeID, &ppg.PatientID, &ppg.TestID, &ppg.TestType, &ppg.DateGenerated, &ppg.GeneratedBy, &ppg.UpdatedBy, &ppg.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppg)
	}

	return res, nil
}

// ProtoPatientsGensByGeneratedBy retrieves a row from 'AllergyNew.proto_patients_gens' as a ProtoPatientsGen.
//
// Generated from index 'proto_patients_gens_generated_by'.
func ProtoPatientsGensByGeneratedBy(db XODB, generatedBy sql.NullInt64) ([]*ProtoPatientsGen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, test_id, test_type, date_generated, generated_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_gens ` +
		`WHERE generated_by = ?`

	// run query
	XOLog(sqlstr, generatedBy)
	q, err := db.Query(sqlstr, generatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsGen{}
	for q.Next() {
		ppg := ProtoPatientsGen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppg.ID, &ppg.PracticeID, &ppg.PatientID, &ppg.TestID, &ppg.TestType, &ppg.DateGenerated, &ppg.GeneratedBy, &ppg.UpdatedBy, &ppg.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppg)
	}

	return res, nil
}

// ProtoPatientsGenByID retrieves a row from 'AllergyNew.proto_patients_gens' as a ProtoPatientsGen.
//
// Generated from index 'proto_patients_gens_id_pkey'.
func ProtoPatientsGenByID(db XODB, id uint) (*ProtoPatientsGen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, test_id, test_type, date_generated, generated_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_gens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ppg := ProtoPatientsGen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ppg.ID, &ppg.PracticeID, &ppg.PatientID, &ppg.TestID, &ppg.TestType, &ppg.DateGenerated, &ppg.GeneratedBy, &ppg.UpdatedBy, &ppg.Updated)
	if err != nil {
		return nil, err
	}

	return &ppg, nil
}

// ProtoPatientsGensByUpdatedBy retrieves a row from 'AllergyNew.proto_patients_gens' as a ProtoPatientsGen.
//
// Generated from index 'proto_patients_gens_updated'.
func ProtoPatientsGensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*ProtoPatientsGen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, test_id, test_type, date_generated, generated_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_gens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsGen{}
	for q.Next() {
		ppg := ProtoPatientsGen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppg.ID, &ppg.PracticeID, &ppg.PatientID, &ppg.TestID, &ppg.TestType, &ppg.DateGenerated, &ppg.GeneratedBy, &ppg.UpdatedBy, &ppg.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppg)
	}

	return res, nil
}
