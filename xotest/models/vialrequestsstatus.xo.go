// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialRequestsStatus represents a row from 'AllergyNew.vial_requests_statuses'.
type VialRequestsStatus struct {
	ID        uint          `json:"id"`         // id
	Status    string        `json:"status"`     // status
	Order     sql.NullInt64 `json:"order"`      // order
	UpdatedBy sql.NullInt64 `json:"updated_by"` // updated_by
	Updated   time.Time     `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialRequestsStatus exists in the database.
func (vrs *VialRequestsStatus) Exists() bool {
	return vrs._exists
}

// Deleted provides information if the VialRequestsStatus has been deleted from the database.
func (vrs *VialRequestsStatus) Deleted() bool {
	return vrs._deleted
}

// Insert inserts the VialRequestsStatus to the database.
func (vrs *VialRequestsStatus) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vrs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_requests_statuses (` +
		`status, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vrs.Status, vrs.Order, vrs.UpdatedBy, vrs.Updated)
	res, err := db.Exec(sqlstr, vrs.Status, vrs.Order, vrs.UpdatedBy, vrs.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vrs.ID = uint(id)
	vrs._exists = true

	return nil
}

// Update updates the VialRequestsStatus in the database.
func (vrs *VialRequestsStatus) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vrs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_requests_statuses SET ` +
		`status = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vrs.Status, vrs.Order, vrs.UpdatedBy, vrs.Updated, vrs.ID)
	_, err = db.Exec(sqlstr, vrs.Status, vrs.Order, vrs.UpdatedBy, vrs.Updated, vrs.ID)
	return err
}

// Save saves the VialRequestsStatus to the database.
func (vrs *VialRequestsStatus) Save(db XODB) error {
	if vrs.Exists() {
		return vrs.Update(db)
	}

	return vrs.Insert(db)
}

// Delete deletes the VialRequestsStatus from the database.
func (vrs *VialRequestsStatus) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrs._exists {
		return nil
	}

	// if deleted, bail
	if vrs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_requests_statuses WHERE id = ?`

	// run query
	XOLog(sqlstr, vrs.ID)
	_, err = db.Exec(sqlstr, vrs.ID)
	if err != nil {
		return err
	}

	// set deleted
	vrs._deleted = true

	return nil
}

// VialRequestsStatusesByOrder retrieves a row from 'AllergyNew.vial_requests_statuses' as a VialRequestsStatus.
//
// Generated from index 'Order'.
func VialRequestsStatusesByOrder(db XODB, order sql.NullInt64) ([]*VialRequestsStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, status, order, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_statuses ` +
		`WHERE order = ?`

	// run query
	XOLog(sqlstr, order)
	q, err := db.Query(sqlstr, order)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsStatus{}
	for q.Next() {
		vrs := VialRequestsStatus{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrs.ID, &vrs.Status, &vrs.Order, &vrs.UpdatedBy, &vrs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrs)
	}

	return res, nil
}

// VialRequestsStatusesByStatus retrieves a row from 'AllergyNew.vial_requests_statuses' as a VialRequestsStatus.
//
// Generated from index 'vial_requests_status_statuses'.
func VialRequestsStatusesByStatus(db XODB, status string) ([]*VialRequestsStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, status, order, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_statuses ` +
		`WHERE status = ?`

	// run query
	XOLog(sqlstr, status)
	q, err := db.Query(sqlstr, status)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsStatus{}
	for q.Next() {
		vrs := VialRequestsStatus{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrs.ID, &vrs.Status, &vrs.Order, &vrs.UpdatedBy, &vrs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrs)
	}

	return res, nil
}

// VialRequestsStatusByID retrieves a row from 'AllergyNew.vial_requests_statuses' as a VialRequestsStatus.
//
// Generated from index 'vial_requests_statuses_id_pkey'.
func VialRequestsStatusByID(db XODB, id uint) (*VialRequestsStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, status, order, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_statuses ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vrs := VialRequestsStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vrs.ID, &vrs.Status, &vrs.Order, &vrs.UpdatedBy, &vrs.Updated)
	if err != nil {
		return nil, err
	}

	return &vrs, nil
}
