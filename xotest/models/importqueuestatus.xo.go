// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// ImportQueueStatus represents a row from 'AllergyNew.import_queue_status'.
type ImportQueueStatus struct {
	ID      int  `json:"id"`      // id
	Running bool `json:"running"` // running
	Async   bool `json:"async"`   // async
	Workers int  `json:"workers"` // workers

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ImportQueueStatus exists in the database.
func (iqs *ImportQueueStatus) Exists() bool {
	return iqs._exists
}

// Deleted provides information if the ImportQueueStatus has been deleted from the database.
func (iqs *ImportQueueStatus) Deleted() bool {
	return iqs._deleted
}

// Insert inserts the ImportQueueStatus to the database.
func (iqs *ImportQueueStatus) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if iqs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.import_queue_status (` +
		`running, async, workers` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, iqs.Running, iqs.Async, iqs.Workers)
	res, err := db.Exec(sqlstr, iqs.Running, iqs.Async, iqs.Workers)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	iqs.ID = int(id)
	iqs._exists = true

	return nil
}

// Update updates the ImportQueueStatus in the database.
func (iqs *ImportQueueStatus) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if iqs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.import_queue_status SET ` +
		`running = ?, async = ?, workers = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, iqs.Running, iqs.Async, iqs.Workers, iqs.ID)
	_, err = db.Exec(sqlstr, iqs.Running, iqs.Async, iqs.Workers, iqs.ID)
	return err
}

// Save saves the ImportQueueStatus to the database.
func (iqs *ImportQueueStatus) Save(db XODB) error {
	if iqs.Exists() {
		return iqs.Update(db)
	}

	return iqs.Insert(db)
}

// Delete deletes the ImportQueueStatus from the database.
func (iqs *ImportQueueStatus) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !iqs._exists {
		return nil
	}

	// if deleted, bail
	if iqs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.import_queue_status WHERE id = ?`

	// run query
	XOLog(sqlstr, iqs.ID)
	_, err = db.Exec(sqlstr, iqs.ID)
	if err != nil {
		return err
	}

	// set deleted
	iqs._deleted = true

	return nil
}

// Importqueuestatus represents a row from 'AllergyNew.importQueueStatus'.
type Importqueuestatus struct {
	Running bool `json:"running"` // running
	Async   bool `json:"async"`   // async
	Workers int  `json:"workers"` // workers
}

// ImportQueueStatusByID retrieves a row from 'AllergyNew.import_queue_status' as a ImportQueueStatus.
//
// Generated from index 'import_queue_status_id_pkey'.
func ImportQueueStatusByID(db XODB, id int) (*ImportQueueStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, running, async, workers ` +
		`FROM AllergyNew.import_queue_status ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	iqs := ImportQueueStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&iqs.ID, &iqs.Running, &iqs.Async, &iqs.Workers)
	if err != nil {
		return nil, err
	}

	return &iqs, nil
}
