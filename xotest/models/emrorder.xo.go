// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// EmrOrder represents a row from 'AllergyNew.emr_orders'.
type EmrOrder struct {
	ID                   int            `json:"id"`                    // id
	PatientID            uint           `json:"patient_id"`            // patient_id
	OrderID              sql.NullString `json:"order_id"`              // order_id
	ProcedureCode        sql.NullString `json:"procedure_code"`        // procedure_code
	ProcedureCodeset     sql.NullString `json:"procedure_codeset"`     // procedure_codeset
	ProcedureDescription sql.NullString `json:"procedure_description"` // procedure_description
	VisitNumber          sql.NullString `json:"visit_number"`          // visit_number
	Resulted             sql.NullInt64  `json:"resulted"`              // resulted
	Cancelled            sql.NullInt64  `json:"cancelled"`             // cancelled
	Updated              time.Time      `json:"updated"`               // updated
	UpdatedBy            sql.NullInt64  `json:"updated_by"`            // updated_by

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EmrOrder exists in the database.
func (eo *EmrOrder) Exists() bool {
	return eo._exists
}

// Deleted provides information if the EmrOrder has been deleted from the database.
func (eo *EmrOrder) Deleted() bool {
	return eo._deleted
}

// Insert inserts the EmrOrder to the database.
func (eo *EmrOrder) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if eo._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.emr_orders (` +
		`patient_id, order_id, procedure_code, procedure_codeset, procedure_description, visit_number, resulted, cancelled, updated, updated_by` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, eo.PatientID, eo.OrderID, eo.ProcedureCode, eo.ProcedureCodeset, eo.ProcedureDescription, eo.VisitNumber, eo.Resulted, eo.Cancelled, eo.Updated, eo.UpdatedBy)
	res, err := db.Exec(sqlstr, eo.PatientID, eo.OrderID, eo.ProcedureCode, eo.ProcedureCodeset, eo.ProcedureDescription, eo.VisitNumber, eo.Resulted, eo.Cancelled, eo.Updated, eo.UpdatedBy)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	eo.ID = int(id)
	eo._exists = true

	return nil
}

// Update updates the EmrOrder in the database.
func (eo *EmrOrder) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eo._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if eo._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.emr_orders SET ` +
		`patient_id = ?, order_id = ?, procedure_code = ?, procedure_codeset = ?, procedure_description = ?, visit_number = ?, resulted = ?, cancelled = ?, updated = ?, updated_by = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, eo.PatientID, eo.OrderID, eo.ProcedureCode, eo.ProcedureCodeset, eo.ProcedureDescription, eo.VisitNumber, eo.Resulted, eo.Cancelled, eo.Updated, eo.UpdatedBy, eo.ID)
	_, err = db.Exec(sqlstr, eo.PatientID, eo.OrderID, eo.ProcedureCode, eo.ProcedureCodeset, eo.ProcedureDescription, eo.VisitNumber, eo.Resulted, eo.Cancelled, eo.Updated, eo.UpdatedBy, eo.ID)
	return err
}

// Save saves the EmrOrder to the database.
func (eo *EmrOrder) Save(db XODB) error {
	if eo.Exists() {
		return eo.Update(db)
	}

	return eo.Insert(db)
}

// Delete deletes the EmrOrder from the database.
func (eo *EmrOrder) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eo._exists {
		return nil
	}

	// if deleted, bail
	if eo._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.emr_orders WHERE id = ?`

	// run query
	XOLog(sqlstr, eo.ID)
	_, err = db.Exec(sqlstr, eo.ID)
	if err != nil {
		return err
	}

	// set deleted
	eo._deleted = true

	return nil
}

// EmrOrderByID retrieves a row from 'AllergyNew.emr_orders' as a EmrOrder.
//
// Generated from index 'emr_orders_id_pkey'.
func EmrOrderByID(db XODB, id int) (*EmrOrder, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, order_id, procedure_code, procedure_codeset, procedure_description, visit_number, resulted, cancelled, updated, updated_by ` +
		`FROM AllergyNew.emr_orders ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	eo := EmrOrder{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&eo.ID, &eo.PatientID, &eo.OrderID, &eo.ProcedureCode, &eo.ProcedureCodeset, &eo.ProcedureDescription, &eo.VisitNumber, &eo.Resulted, &eo.Cancelled, &eo.Updated, &eo.UpdatedBy)
	if err != nil {
		return nil, err
	}

	return &eo, nil
}
