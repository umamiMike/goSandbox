// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// PracticeSetting represents a row from 'AllergyNew.practice_settings'.
type PracticeSetting struct {
	ID         uint           `json:"id"`          // id
	PracticeID uint           `json:"practice_id"` // practice_id
	Setting    sql.NullString `json:"setting"`     // setting
	Value      sql.NullString `json:"value"`       // value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PracticeSetting exists in the database.
func (ps *PracticeSetting) Exists() bool {
	return ps._exists
}

// Deleted provides information if the PracticeSetting has been deleted from the database.
func (ps *PracticeSetting) Deleted() bool {
	return ps._deleted
}

// Insert inserts the PracticeSetting to the database.
func (ps *PracticeSetting) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ps._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practice_settings (` +
		`practice_id, setting, value` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ps.PracticeID, ps.Setting, ps.Value)
	res, err := db.Exec(sqlstr, ps.PracticeID, ps.Setting, ps.Value)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ps.ID = uint(id)
	ps._exists = true

	return nil
}

// Update updates the PracticeSetting in the database.
func (ps *PracticeSetting) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ps._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ps._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practice_settings SET ` +
		`practice_id = ?, setting = ?, value = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ps.PracticeID, ps.Setting, ps.Value, ps.ID)
	_, err = db.Exec(sqlstr, ps.PracticeID, ps.Setting, ps.Value, ps.ID)
	return err
}

// Save saves the PracticeSetting to the database.
func (ps *PracticeSetting) Save(db XODB) error {
	if ps.Exists() {
		return ps.Update(db)
	}

	return ps.Insert(db)
}

// Delete deletes the PracticeSetting from the database.
func (ps *PracticeSetting) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ps._exists {
		return nil
	}

	// if deleted, bail
	if ps._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practice_settings WHERE id = ?`

	// run query
	XOLog(sqlstr, ps.ID)
	_, err = db.Exec(sqlstr, ps.ID)
	if err != nil {
		return err
	}

	// set deleted
	ps._deleted = true

	return nil
}

// PracticeSettingsByPracticeID retrieves a row from 'AllergyNew.practice_settings' as a PracticeSetting.
//
// Generated from index 'Practice'.
func PracticeSettingsByPracticeID(db XODB, practiceID uint) ([]*PracticeSetting, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, setting, value ` +
		`FROM AllergyNew.practice_settings ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticeSetting{}
	for q.Next() {
		ps := PracticeSetting{
			_exists: true,
		}

		// scan
		err = q.Scan(&ps.ID, &ps.PracticeID, &ps.Setting, &ps.Value)
		if err != nil {
			return nil, err
		}

		res = append(res, &ps)
	}

	return res, nil
}

// PracticeSettingByID retrieves a row from 'AllergyNew.practice_settings' as a PracticeSetting.
//
// Generated from index 'practice_settings_id_pkey'.
func PracticeSettingByID(db XODB, id uint) (*PracticeSetting, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, setting, value ` +
		`FROM AllergyNew.practice_settings ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ps := PracticeSetting{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ps.ID, &ps.PracticeID, &ps.Setting, &ps.Value)
	if err != nil {
		return nil, err
	}

	return &ps, nil
}
