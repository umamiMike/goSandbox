// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PracticesPartner represents a row from 'AllergyNew.practices_partners'.
type PracticesPartner struct {
	ID                uint           `json:"id"`                  // id
	PracticeID        sql.NullInt64  `json:"practice_id"`         // practice_id
	PartnerPracticeID sql.NullInt64  `json:"partner_practice_id"` // partner_practice_id
	DateAdded         mysql.NullTime `json:"date_added"`          // date_added
	Enabled           int8           `json:"enabled"`             // enabled
	UpdatedBy         sql.NullInt64  `json:"updated_by"`          // updated_by
	Updated           time.Time      `json:"updated"`             // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PracticesPartner exists in the database.
func (pp *PracticesPartner) Exists() bool {
	return pp._exists
}

// Deleted provides information if the PracticesPartner has been deleted from the database.
func (pp *PracticesPartner) Deleted() bool {
	return pp._deleted
}

// Insert inserts the PracticesPartner to the database.
func (pp *PracticesPartner) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practices_partners (` +
		`practice_id, partner_practice_id, date_added, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pp.PracticeID, pp.PartnerPracticeID, pp.DateAdded, pp.Enabled, pp.UpdatedBy, pp.Updated)
	res, err := db.Exec(sqlstr, pp.PracticeID, pp.PartnerPracticeID, pp.DateAdded, pp.Enabled, pp.UpdatedBy, pp.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pp.ID = uint(id)
	pp._exists = true

	return nil
}

// Update updates the PracticesPartner in the database.
func (pp *PracticesPartner) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practices_partners SET ` +
		`practice_id = ?, partner_practice_id = ?, date_added = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pp.PracticeID, pp.PartnerPracticeID, pp.DateAdded, pp.Enabled, pp.UpdatedBy, pp.Updated, pp.ID)
	_, err = db.Exec(sqlstr, pp.PracticeID, pp.PartnerPracticeID, pp.DateAdded, pp.Enabled, pp.UpdatedBy, pp.Updated, pp.ID)
	return err
}

// Save saves the PracticesPartner to the database.
func (pp *PracticesPartner) Save(db XODB) error {
	if pp.Exists() {
		return pp.Update(db)
	}

	return pp.Insert(db)
}

// Delete deletes the PracticesPartner from the database.
func (pp *PracticesPartner) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pp._exists {
		return nil
	}

	// if deleted, bail
	if pp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practices_partners WHERE id = ?`

	// run query
	XOLog(sqlstr, pp.ID)
	_, err = db.Exec(sqlstr, pp.ID)
	if err != nil {
		return err
	}

	// set deleted
	pp._deleted = true

	return nil
}

// PracticeByPartnerPracticeID returns the Practice associated with the PracticesPartner's PartnerPracticeID (partner_practice_id).
//
// Generated from foreign key 'practices_partners_partner_practice'.
func (pp *PracticesPartner) PracticeByPartnerPracticeID(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(pp.PartnerPracticeID.Int64))
}

// PracticeByPracticeID returns the Practice associated with the PracticesPartner's PracticeID (practice_id).
//
// Generated from foreign key 'practices_partners_practice'.
func (pp *PracticesPartner) PracticeByPracticeID(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(pp.PracticeID.Int64))
}

// User returns the User associated with the PracticesPartner's UpdatedBy (updated_by).
//
// Generated from foreign key 'practices_partners_updated'.
func (pp *PracticesPartner) User(db XODB) (*User, error) {
	return UserByID(db, uint(pp.UpdatedBy.Int64))
}

// PracticesPartnersByPartnerPracticeID retrieves a row from 'AllergyNew.practices_partners' as a PracticesPartner.
//
// Generated from index 'Partner Practices'.
func PracticesPartnersByPartnerPracticeID(db XODB, partnerPracticeID sql.NullInt64) ([]*PracticesPartner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, partner_practice_id, date_added, enabled, updated_by, updated ` +
		`FROM AllergyNew.practices_partners ` +
		`WHERE partner_practice_id = ?`

	// run query
	XOLog(sqlstr, partnerPracticeID)
	q, err := db.Query(sqlstr, partnerPracticeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticesPartner{}
	for q.Next() {
		pp := PracticesPartner{
			_exists: true,
		}

		// scan
		err = q.Scan(&pp.ID, &pp.PracticeID, &pp.PartnerPracticeID, &pp.DateAdded, &pp.Enabled, &pp.UpdatedBy, &pp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pp)
	}

	return res, nil
}

// PracticesPartnersByPracticeID retrieves a row from 'AllergyNew.practices_partners' as a PracticesPartner.
//
// Generated from index 'Practices'.
func PracticesPartnersByPracticeID(db XODB, practiceID sql.NullInt64) ([]*PracticesPartner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, partner_practice_id, date_added, enabled, updated_by, updated ` +
		`FROM AllergyNew.practices_partners ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticesPartner{}
	for q.Next() {
		pp := PracticesPartner{
			_exists: true,
		}

		// scan
		err = q.Scan(&pp.ID, &pp.PracticeID, &pp.PartnerPracticeID, &pp.DateAdded, &pp.Enabled, &pp.UpdatedBy, &pp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pp)
	}

	return res, nil
}

// PracticesPartnerByID retrieves a row from 'AllergyNew.practices_partners' as a PracticesPartner.
//
// Generated from index 'practices_partners_id_pkey'.
func PracticesPartnerByID(db XODB, id uint) (*PracticesPartner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, partner_practice_id, date_added, enabled, updated_by, updated ` +
		`FROM AllergyNew.practices_partners ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pp := PracticesPartner{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pp.ID, &pp.PracticeID, &pp.PartnerPracticeID, &pp.DateAdded, &pp.Enabled, &pp.UpdatedBy, &pp.Updated)
	if err != nil {
		return nil, err
	}

	return &pp, nil
}

// PracticesPartnersByUpdatedBy retrieves a row from 'AllergyNew.practices_partners' as a PracticesPartner.
//
// Generated from index 'practices_partners_updated'.
func PracticesPartnersByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PracticesPartner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, partner_practice_id, date_added, enabled, updated_by, updated ` +
		`FROM AllergyNew.practices_partners ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticesPartner{}
	for q.Next() {
		pp := PracticesPartner{
			_exists: true,
		}

		// scan
		err = q.Scan(&pp.ID, &pp.PracticeID, &pp.PartnerPracticeID, &pp.DateAdded, &pp.Enabled, &pp.UpdatedBy, &pp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pp)
	}

	return res, nil
}
