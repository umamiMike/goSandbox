// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// NameAlign is the 'name_align' enum type from schema 'AllergyNew'.
type NameAlign uint16

const (
	// NameAlignNone is the 'none' NameAlign.
	NameAlignNone = NameAlign(1)

	// NameAlignLeft is the 'left' NameAlign.
	NameAlignLeft = NameAlign(2)

	// NameAlignRight is the 'right' NameAlign.
	NameAlignRight = NameAlign(3)

	// NameAlignCenter is the 'center' NameAlign.
	NameAlignCenter = NameAlign(4)
)

// String returns the string value of the NameAlign.
func (na NameAlign) String() string {
	var enumVal string

	switch na {
	case NameAlignNone:
		enumVal = "none"

	case NameAlignLeft:
		enumVal = "left"

	case NameAlignRight:
		enumVal = "right"

	case NameAlignCenter:
		enumVal = "center"
	}

	return enumVal
}

// MarshalText marshals NameAlign into text.
func (na NameAlign) MarshalText() ([]byte, error) {
	return []byte(na.String()), nil
}

// UnmarshalText unmarshals NameAlign from text.
func (na *NameAlign) UnmarshalText(text []byte) error {
	switch string(text) {
	case "none":
		*na = NameAlignNone

	case "left":
		*na = NameAlignLeft

	case "right":
		*na = NameAlignRight

	case "center":
		*na = NameAlignCenter

	default:
		return errors.New("invalid NameAlign")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for NameAlign.
func (na NameAlign) Value() (driver.Value, error) {
	return na.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for NameAlign.
func (na *NameAlign) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid NameAlign")
	}

	return na.UnmarshalText(buf)
}
