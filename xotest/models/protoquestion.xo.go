// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// ProtoQuestion represents a row from 'AllergyNew.proto_questions'.
type ProtoQuestion struct {
	ID         uint           `json:"id"`          // id
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	AntigenID  sql.NullInt64  `json:"antigen_id"`  // antigen_id
	Question   sql.NullString `json:"question"`    // question
	Response   sql.NullInt64  `json:"response"`    // response
	Behavior   sql.NullString `json:"behavior"`    // behavior
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProtoQuestion exists in the database.
func (pq *ProtoQuestion) Exists() bool {
	return pq._exists
}

// Deleted provides information if the ProtoQuestion has been deleted from the database.
func (pq *ProtoQuestion) Deleted() bool {
	return pq._deleted
}

// Insert inserts the ProtoQuestion to the database.
func (pq *ProtoQuestion) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pq._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.proto_questions (` +
		`practice_id, antigen_id, question, response, behavior, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pq.PracticeID, pq.AntigenID, pq.Question, pq.Response, pq.Behavior, pq.UpdatedBy, pq.Updated)
	res, err := db.Exec(sqlstr, pq.PracticeID, pq.AntigenID, pq.Question, pq.Response, pq.Behavior, pq.UpdatedBy, pq.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pq.ID = uint(id)
	pq._exists = true

	return nil
}

// Update updates the ProtoQuestion in the database.
func (pq *ProtoQuestion) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pq._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pq._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.proto_questions SET ` +
		`practice_id = ?, antigen_id = ?, question = ?, response = ?, behavior = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pq.PracticeID, pq.AntigenID, pq.Question, pq.Response, pq.Behavior, pq.UpdatedBy, pq.Updated, pq.ID)
	_, err = db.Exec(sqlstr, pq.PracticeID, pq.AntigenID, pq.Question, pq.Response, pq.Behavior, pq.UpdatedBy, pq.Updated, pq.ID)
	return err
}

// Save saves the ProtoQuestion to the database.
func (pq *ProtoQuestion) Save(db XODB) error {
	if pq.Exists() {
		return pq.Update(db)
	}

	return pq.Insert(db)
}

// Delete deletes the ProtoQuestion from the database.
func (pq *ProtoQuestion) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pq._exists {
		return nil
	}

	// if deleted, bail
	if pq._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.proto_questions WHERE id = ?`

	// run query
	XOLog(sqlstr, pq.ID)
	_, err = db.Exec(sqlstr, pq.ID)
	if err != nil {
		return err
	}

	// set deleted
	pq._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the ProtoQuestion's AntigenID (antigen_id).
//
// Generated from foreign key 'proto_questions_antigens'.
func (pq *ProtoQuestion) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(pq.AntigenID.Int64))
}

// Practice returns the Practice associated with the ProtoQuestion's PracticeID (practice_id).
//
// Generated from foreign key 'proto_questions_practice'.
func (pq *ProtoQuestion) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(pq.PracticeID.Int64))
}

// User returns the User associated with the ProtoQuestion's UpdatedBy (updated_by).
//
// Generated from foreign key 'proto_questions_updated'.
func (pq *ProtoQuestion) User(db XODB) (*User, error) {
	return UserByID(db, uint(pq.UpdatedBy.Int64))
}

// ProtoQuestionsByAntigenID retrieves a row from 'AllergyNew.proto_questions' as a ProtoQuestion.
//
// Generated from index 'Antigens'.
func ProtoQuestionsByAntigenID(db XODB, antigenID sql.NullInt64) ([]*ProtoQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, antigen_id, question, response, behavior, updated_by, updated ` +
		`FROM AllergyNew.proto_questions ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoQuestion{}
	for q.Next() {
		pq := ProtoQuestion{
			_exists: true,
		}

		// scan
		err = q.Scan(&pq.ID, &pq.PracticeID, &pq.AntigenID, &pq.Question, &pq.Response, &pq.Behavior, &pq.UpdatedBy, &pq.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pq)
	}

	return res, nil
}

// ProtoQuestionsByPracticeID retrieves a row from 'AllergyNew.proto_questions' as a ProtoQuestion.
//
// Generated from index 'Practices'.
func ProtoQuestionsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*ProtoQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, antigen_id, question, response, behavior, updated_by, updated ` +
		`FROM AllergyNew.proto_questions ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoQuestion{}
	for q.Next() {
		pq := ProtoQuestion{
			_exists: true,
		}

		// scan
		err = q.Scan(&pq.ID, &pq.PracticeID, &pq.AntigenID, &pq.Question, &pq.Response, &pq.Behavior, &pq.UpdatedBy, &pq.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pq)
	}

	return res, nil
}

// ProtoQuestionByID retrieves a row from 'AllergyNew.proto_questions' as a ProtoQuestion.
//
// Generated from index 'proto_questions_id_pkey'.
func ProtoQuestionByID(db XODB, id uint) (*ProtoQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, antigen_id, question, response, behavior, updated_by, updated ` +
		`FROM AllergyNew.proto_questions ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pq := ProtoQuestion{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pq.ID, &pq.PracticeID, &pq.AntigenID, &pq.Question, &pq.Response, &pq.Behavior, &pq.UpdatedBy, &pq.Updated)
	if err != nil {
		return nil, err
	}

	return &pq, nil
}

// ProtoQuestionsByUpdatedBy retrieves a row from 'AllergyNew.proto_questions' as a ProtoQuestion.
//
// Generated from index 'proto_questions_updated'.
func ProtoQuestionsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*ProtoQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, antigen_id, question, response, behavior, updated_by, updated ` +
		`FROM AllergyNew.proto_questions ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoQuestion{}
	for q.Next() {
		pq := ProtoQuestion{
			_exists: true,
		}

		// scan
		err = q.Scan(&pq.ID, &pq.PracticeID, &pq.AntigenID, &pq.Question, &pq.Response, &pq.Behavior, &pq.UpdatedBy, &pq.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pq)
	}

	return res, nil
}
