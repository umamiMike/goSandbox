// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialRequestsAntigen represents a row from 'AllergyNew.vial_requests_antigens'.
type VialRequestsAntigen struct {
	ID                 uint            `json:"id"`                   // id
	RequestID          sql.NullInt64   `json:"request_id"`           // request_id
	AntigenID          sql.NullInt64   `json:"antigen_id"`           // antigen_id
	ProcessedAntigenID sql.NullInt64   `json:"processed_antigen_id"` // processed_antigen_id
	VialTypeID         sql.NullInt64   `json:"vial_type_id"`         // vial_type_id
	PatientID          sql.NullInt64   `json:"patient_id"`           // patient_id
	Strength           sql.NullInt64   `json:"strength"`             // strength
	Volume             sql.NullFloat64 `json:"volume"`               // volume
	Enabled            int8            `json:"enabled"`              // enabled
	UpdatedBy          sql.NullInt64   `json:"updated_by"`           // updated_by
	Updated            time.Time       `json:"updated"`              // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialRequestsAntigen exists in the database.
func (vra *VialRequestsAntigen) Exists() bool {
	return vra._exists
}

// Deleted provides information if the VialRequestsAntigen has been deleted from the database.
func (vra *VialRequestsAntigen) Deleted() bool {
	return vra._deleted
}

// Insert inserts the VialRequestsAntigen to the database.
func (vra *VialRequestsAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vra._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_requests_antigens (` +
		`request_id, antigen_id, processed_antigen_id, vial_type_id, patient_id, strength, volume, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vra.RequestID, vra.AntigenID, vra.ProcessedAntigenID, vra.VialTypeID, vra.PatientID, vra.Strength, vra.Volume, vra.Enabled, vra.UpdatedBy, vra.Updated)
	res, err := db.Exec(sqlstr, vra.RequestID, vra.AntigenID, vra.ProcessedAntigenID, vra.VialTypeID, vra.PatientID, vra.Strength, vra.Volume, vra.Enabled, vra.UpdatedBy, vra.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vra.ID = uint(id)
	vra._exists = true

	return nil
}

// Update updates the VialRequestsAntigen in the database.
func (vra *VialRequestsAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vra._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vra._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_requests_antigens SET ` +
		`request_id = ?, antigen_id = ?, processed_antigen_id = ?, vial_type_id = ?, patient_id = ?, strength = ?, volume = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vra.RequestID, vra.AntigenID, vra.ProcessedAntigenID, vra.VialTypeID, vra.PatientID, vra.Strength, vra.Volume, vra.Enabled, vra.UpdatedBy, vra.Updated, vra.ID)
	_, err = db.Exec(sqlstr, vra.RequestID, vra.AntigenID, vra.ProcessedAntigenID, vra.VialTypeID, vra.PatientID, vra.Strength, vra.Volume, vra.Enabled, vra.UpdatedBy, vra.Updated, vra.ID)
	return err
}

// Save saves the VialRequestsAntigen to the database.
func (vra *VialRequestsAntigen) Save(db XODB) error {
	if vra.Exists() {
		return vra.Update(db)
	}

	return vra.Insert(db)
}

// Delete deletes the VialRequestsAntigen from the database.
func (vra *VialRequestsAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vra._exists {
		return nil
	}

	// if deleted, bail
	if vra._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_requests_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, vra.ID)
	_, err = db.Exec(sqlstr, vra.ID)
	if err != nil {
		return err
	}

	// set deleted
	vra._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the VialRequestsAntigen's AntigenID (antigen_id).
//
// Generated from foreign key 'vial_requests_antigens_antigens'.
func (vra *VialRequestsAntigen) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(vra.AntigenID.Int64))
}

// Patient returns the Patient associated with the VialRequestsAntigen's PatientID (patient_id).
//
// Generated from foreign key 'vial_requests_antigens_patients'.
func (vra *VialRequestsAntigen) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(vra.PatientID.Int64))
}

// ProcessedAntigen returns the ProcessedAntigen associated with the VialRequestsAntigen's ProcessedAntigenID (processed_antigen_id).
//
// Generated from foreign key 'vial_requests_antigens_processed_antigens'.
func (vra *VialRequestsAntigen) ProcessedAntigen(db XODB) (*ProcessedAntigen, error) {
	return ProcessedAntigenByID(db, uint(vra.ProcessedAntigenID.Int64))
}

// VialRequest returns the VialRequest associated with the VialRequestsAntigen's RequestID (request_id).
//
// Generated from foreign key 'vial_requests_antigens_requests'.
func (vra *VialRequestsAntigen) VialRequest(db XODB) (*VialRequest, error) {
	return VialRequestByID(db, uint(vra.RequestID.Int64))
}

// User returns the User associated with the VialRequestsAntigen's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_requests_antigens_updated'.
func (vra *VialRequestsAntigen) User(db XODB) (*User, error) {
	return UserByID(db, uint(vra.UpdatedBy.Int64))
}

// VialType returns the VialType associated with the VialRequestsAntigen's VialTypeID (vial_type_id).
//
// Generated from foreign key 'vial_requests_antigens_vial_types'.
func (vra *VialRequestsAntigen) VialType(db XODB) (*VialType, error) {
	return VialTypeByID(db, uint(vra.VialTypeID.Int64))
}

// VialRequestsAntigensByAntigenID retrieves a row from 'AllergyNew.vial_requests_antigens' as a VialRequestsAntigen.
//
// Generated from index 'Antigens'.
func VialRequestsAntigensByAntigenID(db XODB, antigenID sql.NullInt64) ([]*VialRequestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, antigen_id, processed_antigen_id, vial_type_id, patient_id, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_antigens ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsAntigen{}
	for q.Next() {
		vra := VialRequestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&vra.ID, &vra.RequestID, &vra.AntigenID, &vra.ProcessedAntigenID, &vra.VialTypeID, &vra.PatientID, &vra.Strength, &vra.Volume, &vra.Enabled, &vra.UpdatedBy, &vra.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vra)
	}

	return res, nil
}

// VialRequestsAntigensByPatientID retrieves a row from 'AllergyNew.vial_requests_antigens' as a VialRequestsAntigen.
//
// Generated from index 'Patients'.
func VialRequestsAntigensByPatientID(db XODB, patientID sql.NullInt64) ([]*VialRequestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, antigen_id, processed_antigen_id, vial_type_id, patient_id, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_antigens ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsAntigen{}
	for q.Next() {
		vra := VialRequestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&vra.ID, &vra.RequestID, &vra.AntigenID, &vra.ProcessedAntigenID, &vra.VialTypeID, &vra.PatientID, &vra.Strength, &vra.Volume, &vra.Enabled, &vra.UpdatedBy, &vra.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vra)
	}

	return res, nil
}

// VialRequestsAntigensByProcessedAntigenID retrieves a row from 'AllergyNew.vial_requests_antigens' as a VialRequestsAntigen.
//
// Generated from index 'Processed_Antigens'.
func VialRequestsAntigensByProcessedAntigenID(db XODB, processedAntigenID sql.NullInt64) ([]*VialRequestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, antigen_id, processed_antigen_id, vial_type_id, patient_id, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_antigens ` +
		`WHERE processed_antigen_id = ?`

	// run query
	XOLog(sqlstr, processedAntigenID)
	q, err := db.Query(sqlstr, processedAntigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsAntigen{}
	for q.Next() {
		vra := VialRequestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&vra.ID, &vra.RequestID, &vra.AntigenID, &vra.ProcessedAntigenID, &vra.VialTypeID, &vra.PatientID, &vra.Strength, &vra.Volume, &vra.Enabled, &vra.UpdatedBy, &vra.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vra)
	}

	return res, nil
}

// VialRequestsAntigensByRequestID retrieves a row from 'AllergyNew.vial_requests_antigens' as a VialRequestsAntigen.
//
// Generated from index 'Requests'.
func VialRequestsAntigensByRequestID(db XODB, requestID sql.NullInt64) ([]*VialRequestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, antigen_id, processed_antigen_id, vial_type_id, patient_id, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_antigens ` +
		`WHERE request_id = ?`

	// run query
	XOLog(sqlstr, requestID)
	q, err := db.Query(sqlstr, requestID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsAntigen{}
	for q.Next() {
		vra := VialRequestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&vra.ID, &vra.RequestID, &vra.AntigenID, &vra.ProcessedAntigenID, &vra.VialTypeID, &vra.PatientID, &vra.Strength, &vra.Volume, &vra.Enabled, &vra.UpdatedBy, &vra.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vra)
	}

	return res, nil
}

// VialRequestsAntigensByVialTypeID retrieves a row from 'AllergyNew.vial_requests_antigens' as a VialRequestsAntigen.
//
// Generated from index 'Vial_Types'.
func VialRequestsAntigensByVialTypeID(db XODB, vialTypeID sql.NullInt64) ([]*VialRequestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, antigen_id, processed_antigen_id, vial_type_id, patient_id, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_antigens ` +
		`WHERE vial_type_id = ?`

	// run query
	XOLog(sqlstr, vialTypeID)
	q, err := db.Query(sqlstr, vialTypeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsAntigen{}
	for q.Next() {
		vra := VialRequestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&vra.ID, &vra.RequestID, &vra.AntigenID, &vra.ProcessedAntigenID, &vra.VialTypeID, &vra.PatientID, &vra.Strength, &vra.Volume, &vra.Enabled, &vra.UpdatedBy, &vra.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vra)
	}

	return res, nil
}

// VialRequestsAntigenByID retrieves a row from 'AllergyNew.vial_requests_antigens' as a VialRequestsAntigen.
//
// Generated from index 'vial_requests_antigens_id_pkey'.
func VialRequestsAntigenByID(db XODB, id uint) (*VialRequestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, antigen_id, processed_antigen_id, vial_type_id, patient_id, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vra := VialRequestsAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vra.ID, &vra.RequestID, &vra.AntigenID, &vra.ProcessedAntigenID, &vra.VialTypeID, &vra.PatientID, &vra.Strength, &vra.Volume, &vra.Enabled, &vra.UpdatedBy, &vra.Updated)
	if err != nil {
		return nil, err
	}

	return &vra, nil
}

// VialRequestsAntigensByUpdatedBy retrieves a row from 'AllergyNew.vial_requests_antigens' as a VialRequestsAntigen.
//
// Generated from index 'vial_requests_antigens_updated'.
func VialRequestsAntigensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialRequestsAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, antigen_id, processed_antigen_id, vial_type_id, patient_id, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_antigens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsAntigen{}
	for q.Next() {
		vra := VialRequestsAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&vra.ID, &vra.RequestID, &vra.AntigenID, &vra.ProcessedAntigenID, &vra.VialTypeID, &vra.PatientID, &vra.Strength, &vra.Volume, &vra.Enabled, &vra.UpdatedBy, &vra.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vra)
	}

	return res, nil
}
