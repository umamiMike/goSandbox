// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PatientAlert represents a row from 'AllergyNew.patient_alerts'.
type PatientAlert struct {
	ID         uint           `json:"id"`          // id
	PatientID  sql.NullInt64  `json:"patient_id"`  // patient_id
	Note       sql.NullString `json:"note"`        // note
	LocationID sql.NullInt64  `json:"location_id"` // location_id
	DateAdded  mysql.NullTime `json:"date_added"`  // date_added
	AddedBy    sql.NullInt64  `json:"added_by"`    // added_by
	Active     sql.NullInt64  `json:"active"`      // active
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientAlert exists in the database.
func (pa *PatientAlert) Exists() bool {
	return pa._exists
}

// Deleted provides information if the PatientAlert has been deleted from the database.
func (pa *PatientAlert) Deleted() bool {
	return pa._deleted
}

// Insert inserts the PatientAlert to the database.
func (pa *PatientAlert) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_alerts (` +
		`patient_id, note, location_id, date_added, added_by, active, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pa.PatientID, pa.Note, pa.LocationID, pa.DateAdded, pa.AddedBy, pa.Active, pa.UpdatedBy, pa.Updated)
	res, err := db.Exec(sqlstr, pa.PatientID, pa.Note, pa.LocationID, pa.DateAdded, pa.AddedBy, pa.Active, pa.UpdatedBy, pa.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pa.ID = uint(id)
	pa._exists = true

	return nil
}

// Update updates the PatientAlert in the database.
func (pa *PatientAlert) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_alerts SET ` +
		`patient_id = ?, note = ?, location_id = ?, date_added = ?, added_by = ?, active = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pa.PatientID, pa.Note, pa.LocationID, pa.DateAdded, pa.AddedBy, pa.Active, pa.UpdatedBy, pa.Updated, pa.ID)
	_, err = db.Exec(sqlstr, pa.PatientID, pa.Note, pa.LocationID, pa.DateAdded, pa.AddedBy, pa.Active, pa.UpdatedBy, pa.Updated, pa.ID)
	return err
}

// Save saves the PatientAlert to the database.
func (pa *PatientAlert) Save(db XODB) error {
	if pa.Exists() {
		return pa.Update(db)
	}

	return pa.Insert(db)
}

// Delete deletes the PatientAlert from the database.
func (pa *PatientAlert) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pa._exists {
		return nil
	}

	// if deleted, bail
	if pa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_alerts WHERE id = ?`

	// run query
	XOLog(sqlstr, pa.ID)
	_, err = db.Exec(sqlstr, pa.ID)
	if err != nil {
		return err
	}

	// set deleted
	pa._deleted = true

	return nil
}

// PatientAlertsByPatientID retrieves a row from 'AllergyNew.patient_alerts' as a PatientAlert.
//
// Generated from index 'Patients'.
func PatientAlertsByPatientID(db XODB, patientID sql.NullInt64) ([]*PatientAlert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, note, location_id, date_added, added_by, active, updated_by, updated ` +
		`FROM AllergyNew.patient_alerts ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientAlert{}
	for q.Next() {
		pa := PatientAlert{
			_exists: true,
		}

		// scan
		err = q.Scan(&pa.ID, &pa.PatientID, &pa.Note, &pa.LocationID, &pa.DateAdded, &pa.AddedBy, &pa.Active, &pa.UpdatedBy, &pa.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pa)
	}

	return res, nil
}

// PatientAlertByID retrieves a row from 'AllergyNew.patient_alerts' as a PatientAlert.
//
// Generated from index 'patient_alerts_id_pkey'.
func PatientAlertByID(db XODB, id uint) (*PatientAlert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, note, location_id, date_added, added_by, active, updated_by, updated ` +
		`FROM AllergyNew.patient_alerts ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pa := PatientAlert{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pa.ID, &pa.PatientID, &pa.Note, &pa.LocationID, &pa.DateAdded, &pa.AddedBy, &pa.Active, &pa.UpdatedBy, &pa.Updated)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}
