// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialStatus represents a row from 'AllergyNew.vial_statuses'.
type VialStatus struct {
	ID        uint           `json:"id"`         // id
	Status    sql.NullString `json:"status"`     // status
	OnSummary sql.NullInt64  `json:"on_summary"` // on_summary
	Order     int            `json:"order"`      // order
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialStatus exists in the database.
func (vs *VialStatus) Exists() bool {
	return vs._exists
}

// Deleted provides information if the VialStatus has been deleted from the database.
func (vs *VialStatus) Deleted() bool {
	return vs._deleted
}

// Insert inserts the VialStatus to the database.
func (vs *VialStatus) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_statuses (` +
		`status, on_summary, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vs.Status, vs.OnSummary, vs.Order, vs.UpdatedBy, vs.Updated)
	res, err := db.Exec(sqlstr, vs.Status, vs.OnSummary, vs.Order, vs.UpdatedBy, vs.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vs.ID = uint(id)
	vs._exists = true

	return nil
}

// Update updates the VialStatus in the database.
func (vs *VialStatus) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_statuses SET ` +
		`status = ?, on_summary = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vs.Status, vs.OnSummary, vs.Order, vs.UpdatedBy, vs.Updated, vs.ID)
	_, err = db.Exec(sqlstr, vs.Status, vs.OnSummary, vs.Order, vs.UpdatedBy, vs.Updated, vs.ID)
	return err
}

// Save saves the VialStatus to the database.
func (vs *VialStatus) Save(db XODB) error {
	if vs.Exists() {
		return vs.Update(db)
	}

	return vs.Insert(db)
}

// Delete deletes the VialStatus from the database.
func (vs *VialStatus) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vs._exists {
		return nil
	}

	// if deleted, bail
	if vs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_statuses WHERE id = ?`

	// run query
	XOLog(sqlstr, vs.ID)
	_, err = db.Exec(sqlstr, vs.ID)
	if err != nil {
		return err
	}

	// set deleted
	vs._deleted = true

	return nil
}

// UserByUpdatedBy returns the User associated with the VialStatus's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_statuses_updated'.
func (vs *VialStatus) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(vs.UpdatedBy.Int64))
}

// UserByUpdatedBy returns the User associated with the VialStatus's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_statuses_updated_by'.
func (vs *VialStatus) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(vs.UpdatedBy.Int64))
}

// VialStatusesByOrder retrieves a row from 'AllergyNew.vial_statuses' as a VialStatus.
//
// Generated from index 'Order'.
func VialStatusesByOrder(db XODB, order int) ([]*VialStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, status, on_summary, order, updated_by, updated ` +
		`FROM AllergyNew.vial_statuses ` +
		`WHERE order = ?`

	// run query
	XOLog(sqlstr, order)
	q, err := db.Query(sqlstr, order)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialStatus{}
	for q.Next() {
		vs := VialStatus{
			_exists: true,
		}

		// scan
		err = q.Scan(&vs.ID, &vs.Status, &vs.OnSummary, &vs.Order, &vs.UpdatedBy, &vs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vs)
	}

	return res, nil
}

// VialStatusByID retrieves a row from 'AllergyNew.vial_statuses' as a VialStatus.
//
// Generated from index 'vial_statuses_id_pkey'.
func VialStatusByID(db XODB, id uint) (*VialStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, status, on_summary, order, updated_by, updated ` +
		`FROM AllergyNew.vial_statuses ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vs := VialStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vs.ID, &vs.Status, &vs.OnSummary, &vs.Order, &vs.UpdatedBy, &vs.Updated)
	if err != nil {
		return nil, err
	}

	return &vs, nil
}

// VialStatusesByUpdatedBy retrieves a row from 'AllergyNew.vial_statuses' as a VialStatus.
//
// Generated from index 'vial_statuses_updated_by'.
func VialStatusesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, status, on_summary, order, updated_by, updated ` +
		`FROM AllergyNew.vial_statuses ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialStatus{}
	for q.Next() {
		vs := VialStatus{
			_exists: true,
		}

		// scan
		err = q.Scan(&vs.ID, &vs.Status, &vs.OnSummary, &vs.Order, &vs.UpdatedBy, &vs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vs)
	}

	return res, nil
}
