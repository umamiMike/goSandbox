// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// LocalReactionsSymptom represents a row from 'AllergyNew.local_reactions_symptoms'.
type LocalReactionsSymptom struct {
	ID         uint           `json:"id"`          // id
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	Symptom    sql.NullString `json:"symptom"`     // symptom
	Order      sql.NullInt64  `json:"order"`       // order
	Enabled    sql.NullInt64  `json:"enabled"`     // enabled
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LocalReactionsSymptom exists in the database.
func (lrs *LocalReactionsSymptom) Exists() bool {
	return lrs._exists
}

// Deleted provides information if the LocalReactionsSymptom has been deleted from the database.
func (lrs *LocalReactionsSymptom) Deleted() bool {
	return lrs._deleted
}

// Insert inserts the LocalReactionsSymptom to the database.
func (lrs *LocalReactionsSymptom) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if lrs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.local_reactions_symptoms (` +
		`practice_id, symptom, order, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, lrs.PracticeID, lrs.Symptom, lrs.Order, lrs.Enabled, lrs.UpdatedBy, lrs.Updated)
	res, err := db.Exec(sqlstr, lrs.PracticeID, lrs.Symptom, lrs.Order, lrs.Enabled, lrs.UpdatedBy, lrs.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	lrs.ID = uint(id)
	lrs._exists = true

	return nil
}

// Update updates the LocalReactionsSymptom in the database.
func (lrs *LocalReactionsSymptom) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lrs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if lrs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.local_reactions_symptoms SET ` +
		`practice_id = ?, symptom = ?, order = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, lrs.PracticeID, lrs.Symptom, lrs.Order, lrs.Enabled, lrs.UpdatedBy, lrs.Updated, lrs.ID)
	_, err = db.Exec(sqlstr, lrs.PracticeID, lrs.Symptom, lrs.Order, lrs.Enabled, lrs.UpdatedBy, lrs.Updated, lrs.ID)
	return err
}

// Save saves the LocalReactionsSymptom to the database.
func (lrs *LocalReactionsSymptom) Save(db XODB) error {
	if lrs.Exists() {
		return lrs.Update(db)
	}

	return lrs.Insert(db)
}

// Delete deletes the LocalReactionsSymptom from the database.
func (lrs *LocalReactionsSymptom) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lrs._exists {
		return nil
	}

	// if deleted, bail
	if lrs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.local_reactions_symptoms WHERE id = ?`

	// run query
	XOLog(sqlstr, lrs.ID)
	_, err = db.Exec(sqlstr, lrs.ID)
	if err != nil {
		return err
	}

	// set deleted
	lrs._deleted = true

	return nil
}

// LocalReactionsSymptomsByOrder retrieves a row from 'AllergyNew.local_reactions_symptoms' as a LocalReactionsSymptom.
//
// Generated from index 'Display_Order'.
func LocalReactionsSymptomsByOrder(db XODB, order sql.NullInt64) ([]*LocalReactionsSymptom, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, symptom, order, enabled, updated_by, updated ` +
		`FROM AllergyNew.local_reactions_symptoms ` +
		`WHERE order = ?`

	// run query
	XOLog(sqlstr, order)
	q, err := db.Query(sqlstr, order)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*LocalReactionsSymptom{}
	for q.Next() {
		lrs := LocalReactionsSymptom{
			_exists: true,
		}

		// scan
		err = q.Scan(&lrs.ID, &lrs.PracticeID, &lrs.Symptom, &lrs.Order, &lrs.Enabled, &lrs.UpdatedBy, &lrs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &lrs)
	}

	return res, nil
}

// LocalReactionsSymptomByID retrieves a row from 'AllergyNew.local_reactions_symptoms' as a LocalReactionsSymptom.
//
// Generated from index 'local_reactions_symptoms_id_pkey'.
func LocalReactionsSymptomByID(db XODB, id uint) (*LocalReactionsSymptom, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, symptom, order, enabled, updated_by, updated ` +
		`FROM AllergyNew.local_reactions_symptoms ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	lrs := LocalReactionsSymptom{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&lrs.ID, &lrs.PracticeID, &lrs.Symptom, &lrs.Order, &lrs.Enabled, &lrs.UpdatedBy, &lrs.Updated)
	if err != nil {
		return nil, err
	}

	return &lrs, nil
}
