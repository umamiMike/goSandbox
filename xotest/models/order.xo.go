// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// Order represents a row from 'AllergyNew.orders'.
type Order struct {
	ID               uint           `json:"id"`                 // id
	PracticeID       sql.NullInt64  `json:"practice_id"`        // practice_id
	PatientID        sql.NullInt64  `json:"patient_id"`         // patient_id
	SourceOrderID    sql.NullString `json:"source_order_id"`    // source_order_id
	SourceFilePath   sql.NullString `json:"source_file_path"`   // source_file_path
	DateAdded        mysql.NullTime `json:"date_added"`         // date_added
	ProviderID       sql.NullInt64  `json:"provider_id"`        // provider_id
	Cpt              sql.NullString `json:"cpt"`                // cpt
	DateAccepted     mysql.NullTime `json:"date_accepted"`      // date_accepted
	AcceptingUserID  sql.NullInt64  `json:"accepting_user_id"`  // accepting_user_id
	DateScheduled    mysql.NullTime `json:"date_scheduled"`     // date_scheduled
	SchedulingUserID sql.NullInt64  `json:"scheduling_user_id"` // scheduling_user_id
	DateRemoved      mysql.NullTime `json:"date_removed"`       // date_removed
	RemovingUserID   sql.NullInt64  `json:"removing_user_id"`   // removing_user_id
	DateCompleted    mysql.NullTime `json:"date_completed"`     // date_completed
	CompletingUserID sql.NullInt64  `json:"completing_user_id"` // completing_user_id
	Status           Status         `json:"status"`             // status
	UpdatedBy        sql.NullInt64  `json:"updated_by"`         // updated_by
	Updated          time.Time      `json:"updated"`            // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Order exists in the database.
func (o *Order) Exists() bool {
	return o._exists
}

// Deleted provides information if the Order has been deleted from the database.
func (o *Order) Deleted() bool {
	return o._deleted
}

// Insert inserts the Order to the database.
func (o *Order) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.orders (` +
		`practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, o.PracticeID, o.PatientID, o.SourceOrderID, o.SourceFilePath, o.DateAdded, o.ProviderID, o.Cpt, o.DateAccepted, o.AcceptingUserID, o.DateScheduled, o.SchedulingUserID, o.DateRemoved, o.RemovingUserID, o.DateCompleted, o.CompletingUserID, o.Status, o.UpdatedBy, o.Updated)
	res, err := db.Exec(sqlstr, o.PracticeID, o.PatientID, o.SourceOrderID, o.SourceFilePath, o.DateAdded, o.ProviderID, o.Cpt, o.DateAccepted, o.AcceptingUserID, o.DateScheduled, o.SchedulingUserID, o.DateRemoved, o.RemovingUserID, o.DateCompleted, o.CompletingUserID, o.Status, o.UpdatedBy, o.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	o.ID = uint(id)
	o._exists = true

	return nil
}

// Update updates the Order in the database.
func (o *Order) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if o._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.orders SET ` +
		`practice_id = ?, patient_id = ?, source_order_id = ?, source_file_path = ?, date_added = ?, provider_id = ?, cpt = ?, date_accepted = ?, accepting_user_id = ?, date_scheduled = ?, scheduling_user_id = ?, date_removed = ?, removing_user_id = ?, date_completed = ?, completing_user_id = ?, status = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, o.PracticeID, o.PatientID, o.SourceOrderID, o.SourceFilePath, o.DateAdded, o.ProviderID, o.Cpt, o.DateAccepted, o.AcceptingUserID, o.DateScheduled, o.SchedulingUserID, o.DateRemoved, o.RemovingUserID, o.DateCompleted, o.CompletingUserID, o.Status, o.UpdatedBy, o.Updated, o.ID)
	_, err = db.Exec(sqlstr, o.PracticeID, o.PatientID, o.SourceOrderID, o.SourceFilePath, o.DateAdded, o.ProviderID, o.Cpt, o.DateAccepted, o.AcceptingUserID, o.DateScheduled, o.SchedulingUserID, o.DateRemoved, o.RemovingUserID, o.DateCompleted, o.CompletingUserID, o.Status, o.UpdatedBy, o.Updated, o.ID)
	return err
}

// Save saves the Order to the database.
func (o *Order) Save(db XODB) error {
	if o.Exists() {
		return o.Update(db)
	}

	return o.Insert(db)
}

// Delete deletes the Order from the database.
func (o *Order) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return nil
	}

	// if deleted, bail
	if o._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.orders WHERE id = ?`

	// run query
	XOLog(sqlstr, o.ID)
	_, err = db.Exec(sqlstr, o.ID)
	if err != nil {
		return err
	}

	// set deleted
	o._deleted = true

	return nil
}

// UserByAcceptingUserID returns the User associated with the Order's AcceptingUserID (accepting_user_id).
//
// Generated from foreign key 'orders_accepting'.
func (o *Order) UserByAcceptingUserID(db XODB) (*User, error) {
	return UserByID(db, uint(o.AcceptingUserID.Int64))
}

// UserByCompletingUserID returns the User associated with the Order's CompletingUserID (completing_user_id).
//
// Generated from foreign key 'orders_completing'.
func (o *Order) UserByCompletingUserID(db XODB) (*User, error) {
	return UserByID(db, uint(o.CompletingUserID.Int64))
}

// Patient returns the Patient associated with the Order's PatientID (patient_id).
//
// Generated from foreign key 'orders_patients'.
func (o *Order) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(o.PatientID.Int64))
}

// Practice returns the Practice associated with the Order's PracticeID (practice_id).
//
// Generated from foreign key 'orders_practice'.
func (o *Order) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(o.PracticeID.Int64))
}

// OrdersProvider returns the OrdersProvider associated with the Order's ProviderID (provider_id).
//
// Generated from foreign key 'orders_providers'.
func (o *Order) OrdersProvider(db XODB) (*OrdersProvider, error) {
	return OrdersProviderByID(db, uint(o.ProviderID.Int64))
}

// UserByRemovingUserID returns the User associated with the Order's RemovingUserID (removing_user_id).
//
// Generated from foreign key 'orders_removing'.
func (o *Order) UserByRemovingUserID(db XODB) (*User, error) {
	return UserByID(db, uint(o.RemovingUserID.Int64))
}

// UserBySchedulingUserID returns the User associated with the Order's SchedulingUserID (scheduling_user_id).
//
// Generated from foreign key 'orders_scheduling'.
func (o *Order) UserBySchedulingUserID(db XODB) (*User, error) {
	return UserByID(db, uint(o.SchedulingUserID.Int64))
}

// UserByUpdatedBy returns the User associated with the Order's UpdatedBy (updated_by).
//
// Generated from foreign key 'orders_updated'.
func (o *Order) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(o.UpdatedBy.Int64))
}

// OrdersByPatientID retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'Patients'.
func OrdersByPatientID(db XODB, patientID sql.NullInt64) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersByPracticeID retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'Practices'.
func OrdersByPracticeID(db XODB, practiceID sql.NullInt64) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersByProviderID retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'Providers'.
func OrdersByProviderID(db XODB, providerID sql.NullInt64) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE provider_id = ?`

	// run query
	XOLog(sqlstr, providerID)
	q, err := db.Query(sqlstr, providerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersBySourceOrderID retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'Source_Orders'.
func OrdersBySourceOrderID(db XODB, sourceOrderID sql.NullString) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE source_order_id = ?`

	// run query
	XOLog(sqlstr, sourceOrderID)
	q, err := db.Query(sqlstr, sourceOrderID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersByAcceptingUserID retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'orders_accepting'.
func OrdersByAcceptingUserID(db XODB, acceptingUserID sql.NullInt64) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE accepting_user_id = ?`

	// run query
	XOLog(sqlstr, acceptingUserID)
	q, err := db.Query(sqlstr, acceptingUserID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersByCompletingUserID retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'orders_completing'.
func OrdersByCompletingUserID(db XODB, completingUserID sql.NullInt64) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE completing_user_id = ?`

	// run query
	XOLog(sqlstr, completingUserID)
	q, err := db.Query(sqlstr, completingUserID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrderByID retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'orders_id_pkey'.
func OrderByID(db XODB, id uint) (*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	o := Order{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
	if err != nil {
		return nil, err
	}

	return &o, nil
}

// OrdersByRemovingUserID retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'orders_removing'.
func OrdersByRemovingUserID(db XODB, removingUserID sql.NullInt64) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE removing_user_id = ?`

	// run query
	XOLog(sqlstr, removingUserID)
	q, err := db.Query(sqlstr, removingUserID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersBySchedulingUserID retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'orders_scheduling'.
func OrdersBySchedulingUserID(db XODB, schedulingUserID sql.NullInt64) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE scheduling_user_id = ?`

	// run query
	XOLog(sqlstr, schedulingUserID)
	q, err := db.Query(sqlstr, schedulingUserID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersByUpdatedBy retrieves a row from 'AllergyNew.orders' as a Order.
//
// Generated from index 'orders_updated'.
func OrdersByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_order_id, source_file_path, date_added, provider_id, cpt, date_accepted, accepting_user_id, date_scheduled, scheduling_user_id, date_removed, removing_user_id, date_completed, completing_user_id, status, updated_by, updated ` +
		`FROM AllergyNew.orders ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.PracticeID, &o.PatientID, &o.SourceOrderID, &o.SourceFilePath, &o.DateAdded, &o.ProviderID, &o.Cpt, &o.DateAccepted, &o.AcceptingUserID, &o.DateScheduled, &o.SchedulingUserID, &o.DateRemoved, &o.RemovingUserID, &o.DateCompleted, &o.CompletingUserID, &o.Status, &o.UpdatedBy, &o.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}
