// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// DatabaseUpdate represents a row from 'AllergyNew.database_updates'.
type DatabaseUpdate struct {
	Version     string    `json:"version"`      // version
	DateApplied time.Time `json:"date_applied"` // date_applied

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DatabaseUpdate exists in the database.
func (du *DatabaseUpdate) Exists() bool {
	return du._exists
}

// Deleted provides information if the DatabaseUpdate has been deleted from the database.
func (du *DatabaseUpdate) Deleted() bool {
	return du._deleted
}

// Insert inserts the DatabaseUpdate to the database.
func (du *DatabaseUpdate) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if du._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO AllergyNew.database_updates (` +
		`version, date_applied` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, du.Version, du.DateApplied)
	_, err = db.Exec(sqlstr, du.Version, du.DateApplied)
	if err != nil {
		return err
	}

	// set existence
	du._exists = true

	return nil
}

// Update updates the DatabaseUpdate in the database.
func (du *DatabaseUpdate) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !du._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if du._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.database_updates SET ` +
		`date_applied = ?` +
		` WHERE version = ?`

	// run query
	XOLog(sqlstr, du.DateApplied, du.Version)
	_, err = db.Exec(sqlstr, du.DateApplied, du.Version)
	return err
}

// Save saves the DatabaseUpdate to the database.
func (du *DatabaseUpdate) Save(db XODB) error {
	if du.Exists() {
		return du.Update(db)
	}

	return du.Insert(db)
}

// Delete deletes the DatabaseUpdate from the database.
func (du *DatabaseUpdate) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !du._exists {
		return nil
	}

	// if deleted, bail
	if du._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.database_updates WHERE version = ?`

	// run query
	XOLog(sqlstr, du.Version)
	_, err = db.Exec(sqlstr, du.Version)
	if err != nil {
		return err
	}

	// set deleted
	du._deleted = true

	return nil
}

// DatabaseUpdateByVersion retrieves a row from 'AllergyNew.database_updates' as a DatabaseUpdate.
//
// Generated from index 'database_updates_version_pkey'.
func DatabaseUpdateByVersion(db XODB, version string) (*DatabaseUpdate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`version, date_applied ` +
		`FROM AllergyNew.database_updates ` +
		`WHERE version = ?`

	// run query
	XOLog(sqlstr, version)
	du := DatabaseUpdate{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, version).Scan(&du.Version, &du.DateApplied)
	if err != nil {
		return nil, err
	}

	return &du, nil
}
