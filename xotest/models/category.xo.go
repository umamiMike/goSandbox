// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Category is the 'category' enum type from schema 'AllergyNew'.
type Category uint16

const (
	// CategoryHub is the 'hub' Category.
	CategoryHub = Category(1)

	// CategoryPartner is the 'partner' Category.
	CategoryPartner = Category(2)

	// CategoryFuel is the 'fuel' Category.
	CategoryFuel = Category(3)
)

// String returns the string value of the Category.
func (c Category) String() string {
	var enumVal string

	switch c {
	case CategoryHub:
		enumVal = "hub"

	case CategoryPartner:
		enumVal = "partner"

	case CategoryFuel:
		enumVal = "fuel"
	}

	return enumVal
}

// MarshalText marshals Category into text.
func (c Category) MarshalText() ([]byte, error) {
	return []byte(c.String()), nil
}

// UnmarshalText unmarshals Category from text.
func (c *Category) UnmarshalText(text []byte) error {
	switch string(text) {
	case "hub":
		*c = CategoryHub

	case "partner":
		*c = CategoryPartner

	case "fuel":
		*c = CategoryFuel

	default:
		return errors.New("invalid Category")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Category.
func (c Category) Value() (driver.Value, error) {
	return c.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Category.
func (c *Category) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Category")
	}

	return c.UnmarshalText(buf)
}
