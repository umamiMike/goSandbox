// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// AntigensTemplatesAntigen represents a row from 'AllergyNew.antigens_templates_antigens'.
type AntigensTemplatesAntigen struct {
	ID          uint           `json:"id"`           // id
	TemplateID  sql.NullInt64  `json:"template_id"`  // template_id
	Name        sql.NullString `json:"name"`         // name
	AntigenName sql.NullString `json:"antigen_name"` // antigen_name
	Title       sql.NullString `json:"title"`        // title
	PrintOrder  int            `json:"print_order"`  // print_order
	Order       int            `json:"order"`        // order
	Enabled     int8           `json:"enabled"`      // enabled
	UpdatedBy   sql.NullInt64  `json:"updated_by"`   // updated_by
	Updated     time.Time      `json:"updated"`      // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AntigensTemplatesAntigen exists in the database.
func (ata *AntigensTemplatesAntigen) Exists() bool {
	return ata._exists
}

// Deleted provides information if the AntigensTemplatesAntigen has been deleted from the database.
func (ata *AntigensTemplatesAntigen) Deleted() bool {
	return ata._deleted
}

// Insert inserts the AntigensTemplatesAntigen to the database.
func (ata *AntigensTemplatesAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ata._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.antigens_templates_antigens (` +
		`template_id, name, antigen_name, title, print_order, order, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ata.TemplateID, ata.Name, ata.AntigenName, ata.Title, ata.PrintOrder, ata.Order, ata.Enabled, ata.UpdatedBy, ata.Updated)
	res, err := db.Exec(sqlstr, ata.TemplateID, ata.Name, ata.AntigenName, ata.Title, ata.PrintOrder, ata.Order, ata.Enabled, ata.UpdatedBy, ata.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ata.ID = uint(id)
	ata._exists = true

	return nil
}

// Update updates the AntigensTemplatesAntigen in the database.
func (ata *AntigensTemplatesAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ata._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ata._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.antigens_templates_antigens SET ` +
		`template_id = ?, name = ?, antigen_name = ?, title = ?, print_order = ?, order = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ata.TemplateID, ata.Name, ata.AntigenName, ata.Title, ata.PrintOrder, ata.Order, ata.Enabled, ata.UpdatedBy, ata.Updated, ata.ID)
	_, err = db.Exec(sqlstr, ata.TemplateID, ata.Name, ata.AntigenName, ata.Title, ata.PrintOrder, ata.Order, ata.Enabled, ata.UpdatedBy, ata.Updated, ata.ID)
	return err
}

// Save saves the AntigensTemplatesAntigen to the database.
func (ata *AntigensTemplatesAntigen) Save(db XODB) error {
	if ata.Exists() {
		return ata.Update(db)
	}

	return ata.Insert(db)
}

// Delete deletes the AntigensTemplatesAntigen from the database.
func (ata *AntigensTemplatesAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ata._exists {
		return nil
	}

	// if deleted, bail
	if ata._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.antigens_templates_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, ata.ID)
	_, err = db.Exec(sqlstr, ata.ID)
	if err != nil {
		return err
	}

	// set deleted
	ata._deleted = true

	return nil
}

// AntigensTemplate returns the AntigensTemplate associated with the AntigensTemplatesAntigen's TemplateID (template_id).
//
// Generated from foreign key 'antigens_templates_antigens_templates'.
func (ata *AntigensTemplatesAntigen) AntigensTemplate(db XODB) (*AntigensTemplate, error) {
	return AntigensTemplateByID(db, uint(ata.TemplateID.Int64))
}

// AntigensTemplatesAntigensByTemplateID retrieves a row from 'AllergyNew.antigens_templates_antigens' as a AntigensTemplatesAntigen.
//
// Generated from index 'Templates'.
func AntigensTemplatesAntigensByTemplateID(db XODB, templateID sql.NullInt64) ([]*AntigensTemplatesAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, template_id, name, antigen_name, title, print_order, order, enabled, updated_by, updated ` +
		`FROM AllergyNew.antigens_templates_antigens ` +
		`WHERE template_id = ?`

	// run query
	XOLog(sqlstr, templateID)
	q, err := db.Query(sqlstr, templateID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AntigensTemplatesAntigen{}
	for q.Next() {
		ata := AntigensTemplatesAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ata.ID, &ata.TemplateID, &ata.Name, &ata.AntigenName, &ata.Title, &ata.PrintOrder, &ata.Order, &ata.Enabled, &ata.UpdatedBy, &ata.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ata)
	}

	return res, nil
}

// AntigensTemplatesAntigenByID retrieves a row from 'AllergyNew.antigens_templates_antigens' as a AntigensTemplatesAntigen.
//
// Generated from index 'antigens_templates_antigens_id_pkey'.
func AntigensTemplatesAntigenByID(db XODB, id uint) (*AntigensTemplatesAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, template_id, name, antigen_name, title, print_order, order, enabled, updated_by, updated ` +
		`FROM AllergyNew.antigens_templates_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ata := AntigensTemplatesAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ata.ID, &ata.TemplateID, &ata.Name, &ata.AntigenName, &ata.Title, &ata.PrintOrder, &ata.Order, &ata.Enabled, &ata.UpdatedBy, &ata.Updated)
	if err != nil {
		return nil, err
	}

	return &ata, nil
}
