// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialRequestsHistory represents a row from 'AllergyNew.vial_requests_history'.
type VialRequestsHistory struct {
	ID              uint          `json:"id"`                // id
	ParentRequestID sql.NullInt64 `json:"parent_request_id"` // parent_request_id
	RequestID       sql.NullInt64 `json:"request_id"`        // request_id
	Active          sql.NullInt64 `json:"active"`            // active
	UpdatedBy       sql.NullInt64 `json:"updated_by"`        // updated_by
	Updated         time.Time     `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialRequestsHistory exists in the database.
func (vrh *VialRequestsHistory) Exists() bool {
	return vrh._exists
}

// Deleted provides information if the VialRequestsHistory has been deleted from the database.
func (vrh *VialRequestsHistory) Deleted() bool {
	return vrh._deleted
}

// Insert inserts the VialRequestsHistory to the database.
func (vrh *VialRequestsHistory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vrh._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_requests_history (` +
		`parent_request_id, request_id, active, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vrh.ParentRequestID, vrh.RequestID, vrh.Active, vrh.UpdatedBy, vrh.Updated)
	res, err := db.Exec(sqlstr, vrh.ParentRequestID, vrh.RequestID, vrh.Active, vrh.UpdatedBy, vrh.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vrh.ID = uint(id)
	vrh._exists = true

	return nil
}

// Update updates the VialRequestsHistory in the database.
func (vrh *VialRequestsHistory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrh._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vrh._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_requests_history SET ` +
		`parent_request_id = ?, request_id = ?, active = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vrh.ParentRequestID, vrh.RequestID, vrh.Active, vrh.UpdatedBy, vrh.Updated, vrh.ID)
	_, err = db.Exec(sqlstr, vrh.ParentRequestID, vrh.RequestID, vrh.Active, vrh.UpdatedBy, vrh.Updated, vrh.ID)
	return err
}

// Save saves the VialRequestsHistory to the database.
func (vrh *VialRequestsHistory) Save(db XODB) error {
	if vrh.Exists() {
		return vrh.Update(db)
	}

	return vrh.Insert(db)
}

// Delete deletes the VialRequestsHistory from the database.
func (vrh *VialRequestsHistory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrh._exists {
		return nil
	}

	// if deleted, bail
	if vrh._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_requests_history WHERE id = ?`

	// run query
	XOLog(sqlstr, vrh.ID)
	_, err = db.Exec(sqlstr, vrh.ID)
	if err != nil {
		return err
	}

	// set deleted
	vrh._deleted = true

	return nil
}

// VialRequestByParentRequestID returns the VialRequest associated with the VialRequestsHistory's ParentRequestID (parent_request_id).
//
// Generated from foreign key 'vial_request_history_parent_requests'.
func (vrh *VialRequestsHistory) VialRequestByParentRequestID(db XODB) (*VialRequest, error) {
	return VialRequestByID(db, uint(vrh.ParentRequestID.Int64))
}

// VialRequestByRequestID returns the VialRequest associated with the VialRequestsHistory's RequestID (request_id).
//
// Generated from foreign key 'vial_request_history_requests'.
func (vrh *VialRequestsHistory) VialRequestByRequestID(db XODB) (*VialRequest, error) {
	return VialRequestByID(db, uint(vrh.RequestID.Int64))
}

// VialRequestsHistoriesByParentRequestID retrieves a row from 'AllergyNew.vial_requests_history' as a VialRequestsHistory.
//
// Generated from index 'Parent_VialRequest_ID'.
func VialRequestsHistoriesByParentRequestID(db XODB, parentRequestID sql.NullInt64) ([]*VialRequestsHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_request_id, request_id, active, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_history ` +
		`WHERE parent_request_id = ?`

	// run query
	XOLog(sqlstr, parentRequestID)
	q, err := db.Query(sqlstr, parentRequestID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsHistory{}
	for q.Next() {
		vrh := VialRequestsHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrh.ID, &vrh.ParentRequestID, &vrh.RequestID, &vrh.Active, &vrh.UpdatedBy, &vrh.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrh)
	}

	return res, nil
}

// VialRequestsHistoriesByRequestID retrieves a row from 'AllergyNew.vial_requests_history' as a VialRequestsHistory.
//
// Generated from index 'Request_ID'.
func VialRequestsHistoriesByRequestID(db XODB, requestID sql.NullInt64) ([]*VialRequestsHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_request_id, request_id, active, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_history ` +
		`WHERE request_id = ?`

	// run query
	XOLog(sqlstr, requestID)
	q, err := db.Query(sqlstr, requestID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsHistory{}
	for q.Next() {
		vrh := VialRequestsHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrh.ID, &vrh.ParentRequestID, &vrh.RequestID, &vrh.Active, &vrh.UpdatedBy, &vrh.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrh)
	}

	return res, nil
}

// VialRequestsHistoryByID retrieves a row from 'AllergyNew.vial_requests_history' as a VialRequestsHistory.
//
// Generated from index 'vial_requests_history_id_pkey'.
func VialRequestsHistoryByID(db XODB, id uint) (*VialRequestsHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_request_id, request_id, active, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_history ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vrh := VialRequestsHistory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vrh.ID, &vrh.ParentRequestID, &vrh.RequestID, &vrh.Active, &vrh.UpdatedBy, &vrh.Updated)
	if err != nil {
		return nil, err
	}

	return &vrh, nil
}
