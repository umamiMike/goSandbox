// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// ProtoPatientsCounty represents a row from 'AllergyNew.proto_patients_counties'.
type ProtoPatientsCounty struct {
	ID             uint           `json:"id"`               // id
	PracticeID     sql.NullInt64  `json:"practice_id"`      // practice_id
	PatientID      sql.NullInt64  `json:"patient_id"`       // patient_id
	HomeCountyName sql.NullString `json:"home_county_name"` // home_county_name
	HomeCountyID   sql.NullInt64  `json:"home_county_id"`   // home_county_id
	WorkCountyName sql.NullString `json:"work_county_name"` // work_county_name
	WorkCountyID   sql.NullInt64  `json:"work_county_id"`   // work_county_id
	DateRecorded   mysql.NullTime `json:"date_recorded"`    // date_recorded
	RecordedBy     sql.NullInt64  `json:"recorded_by"`      // recorded_by
	UpdatedBy      sql.NullInt64  `json:"updated_by"`       // updated_by
	Updated        time.Time      `json:"updated"`          // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProtoPatientsCounty exists in the database.
func (ppc *ProtoPatientsCounty) Exists() bool {
	return ppc._exists
}

// Deleted provides information if the ProtoPatientsCounty has been deleted from the database.
func (ppc *ProtoPatientsCounty) Deleted() bool {
	return ppc._deleted
}

// Insert inserts the ProtoPatientsCounty to the database.
func (ppc *ProtoPatientsCounty) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ppc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.proto_patients_counties (` +
		`practice_id, patient_id, home_county_name, home_county_id, work_county_name, work_county_id, date_recorded, recorded_by, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ppc.PracticeID, ppc.PatientID, ppc.HomeCountyName, ppc.HomeCountyID, ppc.WorkCountyName, ppc.WorkCountyID, ppc.DateRecorded, ppc.RecordedBy, ppc.UpdatedBy, ppc.Updated)
	res, err := db.Exec(sqlstr, ppc.PracticeID, ppc.PatientID, ppc.HomeCountyName, ppc.HomeCountyID, ppc.WorkCountyName, ppc.WorkCountyID, ppc.DateRecorded, ppc.RecordedBy, ppc.UpdatedBy, ppc.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ppc.ID = uint(id)
	ppc._exists = true

	return nil
}

// Update updates the ProtoPatientsCounty in the database.
func (ppc *ProtoPatientsCounty) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ppc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.proto_patients_counties SET ` +
		`practice_id = ?, patient_id = ?, home_county_name = ?, home_county_id = ?, work_county_name = ?, work_county_id = ?, date_recorded = ?, recorded_by = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ppc.PracticeID, ppc.PatientID, ppc.HomeCountyName, ppc.HomeCountyID, ppc.WorkCountyName, ppc.WorkCountyID, ppc.DateRecorded, ppc.RecordedBy, ppc.UpdatedBy, ppc.Updated, ppc.ID)
	_, err = db.Exec(sqlstr, ppc.PracticeID, ppc.PatientID, ppc.HomeCountyName, ppc.HomeCountyID, ppc.WorkCountyName, ppc.WorkCountyID, ppc.DateRecorded, ppc.RecordedBy, ppc.UpdatedBy, ppc.Updated, ppc.ID)
	return err
}

// Save saves the ProtoPatientsCounty to the database.
func (ppc *ProtoPatientsCounty) Save(db XODB) error {
	if ppc.Exists() {
		return ppc.Update(db)
	}

	return ppc.Insert(db)
}

// Delete deletes the ProtoPatientsCounty from the database.
func (ppc *ProtoPatientsCounty) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppc._exists {
		return nil
	}

	// if deleted, bail
	if ppc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.proto_patients_counties WHERE id = ?`

	// run query
	XOLog(sqlstr, ppc.ID)
	_, err = db.Exec(sqlstr, ppc.ID)
	if err != nil {
		return err
	}

	// set deleted
	ppc._deleted = true

	return nil
}

// Patient returns the Patient associated with the ProtoPatientsCounty's PatientID (patient_id).
//
// Generated from foreign key 'proto_patients_counties_patient'.
func (ppc *ProtoPatientsCounty) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(ppc.PatientID.Int64))
}

// Practice returns the Practice associated with the ProtoPatientsCounty's PracticeID (practice_id).
//
// Generated from foreign key 'proto_patients_counties_practice'.
func (ppc *ProtoPatientsCounty) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(ppc.PracticeID.Int64))
}

// UserByRecordedBy returns the User associated with the ProtoPatientsCounty's RecordedBy (recorded_by).
//
// Generated from foreign key 'proto_patients_counties_recorded'.
func (ppc *ProtoPatientsCounty) UserByRecordedBy(db XODB) (*User, error) {
	return UserByID(db, uint(ppc.RecordedBy.Int64))
}

// UserByUpdatedBy returns the User associated with the ProtoPatientsCounty's UpdatedBy (updated_by).
//
// Generated from foreign key 'proto_patients_counties_updated'.
func (ppc *ProtoPatientsCounty) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(ppc.UpdatedBy.Int64))
}

// ProtoPatientsCountiesByPatientID retrieves a row from 'AllergyNew.proto_patients_counties' as a ProtoPatientsCounty.
//
// Generated from index 'Patients'.
func ProtoPatientsCountiesByPatientID(db XODB, patientID sql.NullInt64) ([]*ProtoPatientsCounty, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, home_county_name, home_county_id, work_county_name, work_county_id, date_recorded, recorded_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_counties ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsCounty{}
	for q.Next() {
		ppc := ProtoPatientsCounty{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppc.ID, &ppc.PracticeID, &ppc.PatientID, &ppc.HomeCountyName, &ppc.HomeCountyID, &ppc.WorkCountyName, &ppc.WorkCountyID, &ppc.DateRecorded, &ppc.RecordedBy, &ppc.UpdatedBy, &ppc.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppc)
	}

	return res, nil
}

// ProtoPatientsCountiesByPracticeID retrieves a row from 'AllergyNew.proto_patients_counties' as a ProtoPatientsCounty.
//
// Generated from index 'Practices'.
func ProtoPatientsCountiesByPracticeID(db XODB, practiceID sql.NullInt64) ([]*ProtoPatientsCounty, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, home_county_name, home_county_id, work_county_name, work_county_id, date_recorded, recorded_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_counties ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsCounty{}
	for q.Next() {
		ppc := ProtoPatientsCounty{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppc.ID, &ppc.PracticeID, &ppc.PatientID, &ppc.HomeCountyName, &ppc.HomeCountyID, &ppc.WorkCountyName, &ppc.WorkCountyID, &ppc.DateRecorded, &ppc.RecordedBy, &ppc.UpdatedBy, &ppc.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppc)
	}

	return res, nil
}

// ProtoPatientsCountyByID retrieves a row from 'AllergyNew.proto_patients_counties' as a ProtoPatientsCounty.
//
// Generated from index 'proto_patients_counties_id_pkey'.
func ProtoPatientsCountyByID(db XODB, id uint) (*ProtoPatientsCounty, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, home_county_name, home_county_id, work_county_name, work_county_id, date_recorded, recorded_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_counties ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ppc := ProtoPatientsCounty{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ppc.ID, &ppc.PracticeID, &ppc.PatientID, &ppc.HomeCountyName, &ppc.HomeCountyID, &ppc.WorkCountyName, &ppc.WorkCountyID, &ppc.DateRecorded, &ppc.RecordedBy, &ppc.UpdatedBy, &ppc.Updated)
	if err != nil {
		return nil, err
	}

	return &ppc, nil
}

// ProtoPatientsCountiesByRecordedBy retrieves a row from 'AllergyNew.proto_patients_counties' as a ProtoPatientsCounty.
//
// Generated from index 'proto_patients_counties_recorded'.
func ProtoPatientsCountiesByRecordedBy(db XODB, recordedBy sql.NullInt64) ([]*ProtoPatientsCounty, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, home_county_name, home_county_id, work_county_name, work_county_id, date_recorded, recorded_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_counties ` +
		`WHERE recorded_by = ?`

	// run query
	XOLog(sqlstr, recordedBy)
	q, err := db.Query(sqlstr, recordedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsCounty{}
	for q.Next() {
		ppc := ProtoPatientsCounty{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppc.ID, &ppc.PracticeID, &ppc.PatientID, &ppc.HomeCountyName, &ppc.HomeCountyID, &ppc.WorkCountyName, &ppc.WorkCountyID, &ppc.DateRecorded, &ppc.RecordedBy, &ppc.UpdatedBy, &ppc.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppc)
	}

	return res, nil
}

// ProtoPatientsCountiesByUpdatedBy retrieves a row from 'AllergyNew.proto_patients_counties' as a ProtoPatientsCounty.
//
// Generated from index 'proto_patients_counties_updated'.
func ProtoPatientsCountiesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*ProtoPatientsCounty, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, home_county_name, home_county_id, work_county_name, work_county_id, date_recorded, recorded_by, updated_by, updated ` +
		`FROM AllergyNew.proto_patients_counties ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPatientsCounty{}
	for q.Next() {
		ppc := ProtoPatientsCounty{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppc.ID, &ppc.PracticeID, &ppc.PatientID, &ppc.HomeCountyName, &ppc.HomeCountyID, &ppc.WorkCountyName, &ppc.WorkCountyID, &ppc.DateRecorded, &ppc.RecordedBy, &ppc.UpdatedBy, &ppc.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppc)
	}

	return res, nil
}
