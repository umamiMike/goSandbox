// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// IgeLab represents a row from 'AllergyNew.ige_labs'.
type IgeLab struct {
	ID               uint          `json:"id"`                 // id
	SourcePracticeID sql.NullInt64 `json:"source_practice_id"` // source_practice_id
	TargetPracticeID sql.NullInt64 `json:"target_practice_id"` // target_practice_id
	TargetLocationID sql.NullInt64 `json:"target_location_id"` // target_location_id
	UpdatedBy        sql.NullInt64 `json:"updated_by"`         // updated_by
	Updated          time.Time     `json:"updated"`            // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IgeLab exists in the database.
func (il *IgeLab) Exists() bool {
	return il._exists
}

// Deleted provides information if the IgeLab has been deleted from the database.
func (il *IgeLab) Deleted() bool {
	return il._deleted
}

// Insert inserts the IgeLab to the database.
func (il *IgeLab) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if il._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.ige_labs (` +
		`source_practice_id, target_practice_id, target_location_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, il.SourcePracticeID, il.TargetPracticeID, il.TargetLocationID, il.UpdatedBy, il.Updated)
	res, err := db.Exec(sqlstr, il.SourcePracticeID, il.TargetPracticeID, il.TargetLocationID, il.UpdatedBy, il.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	il.ID = uint(id)
	il._exists = true

	return nil
}

// Update updates the IgeLab in the database.
func (il *IgeLab) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !il._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if il._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.ige_labs SET ` +
		`source_practice_id = ?, target_practice_id = ?, target_location_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, il.SourcePracticeID, il.TargetPracticeID, il.TargetLocationID, il.UpdatedBy, il.Updated, il.ID)
	_, err = db.Exec(sqlstr, il.SourcePracticeID, il.TargetPracticeID, il.TargetLocationID, il.UpdatedBy, il.Updated, il.ID)
	return err
}

// Save saves the IgeLab to the database.
func (il *IgeLab) Save(db XODB) error {
	if il.Exists() {
		return il.Update(db)
	}

	return il.Insert(db)
}

// Delete deletes the IgeLab from the database.
func (il *IgeLab) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !il._exists {
		return nil
	}

	// if deleted, bail
	if il._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.ige_labs WHERE id = ?`

	// run query
	XOLog(sqlstr, il.ID)
	_, err = db.Exec(sqlstr, il.ID)
	if err != nil {
		return err
	}

	// set deleted
	il._deleted = true

	return nil
}

// IgeLabsBySourcePracticeID retrieves a row from 'AllergyNew.ige_labs' as a IgeLab.
//
// Generated from index 'Practice IDs'.
func IgeLabsBySourcePracticeID(db XODB, sourcePracticeID sql.NullInt64) ([]*IgeLab, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, source_practice_id, target_practice_id, target_location_id, updated_by, updated ` +
		`FROM AllergyNew.ige_labs ` +
		`WHERE source_practice_id = ?`

	// run query
	XOLog(sqlstr, sourcePracticeID)
	q, err := db.Query(sqlstr, sourcePracticeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IgeLab{}
	for q.Next() {
		il := IgeLab{
			_exists: true,
		}

		// scan
		err = q.Scan(&il.ID, &il.SourcePracticeID, &il.TargetPracticeID, &il.TargetLocationID, &il.UpdatedBy, &il.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &il)
	}

	return res, nil
}

// IgeLabByID retrieves a row from 'AllergyNew.ige_labs' as a IgeLab.
//
// Generated from index 'ige_labs_id_pkey'.
func IgeLabByID(db XODB, id uint) (*IgeLab, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, source_practice_id, target_practice_id, target_location_id, updated_by, updated ` +
		`FROM AllergyNew.ige_labs ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	il := IgeLab{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&il.ID, &il.SourcePracticeID, &il.TargetPracticeID, &il.TargetLocationID, &il.UpdatedBy, &il.Updated)
	if err != nil {
		return nil, err
	}

	return &il, nil
}
