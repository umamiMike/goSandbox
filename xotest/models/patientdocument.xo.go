// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PatientDocument represents a row from 'AllergyNew.patient_documents'.
type PatientDocument struct {
	ID         uint          `json:"id"`          // id
	PatientID  sql.NullInt64 `json:"patient_id"`  // patient_id
	DocumentID sql.NullInt64 `json:"document_id"` // document_id
	Processed  sql.NullInt64 `json:"processed"`   // processed
	UpdatedBy  sql.NullInt64 `json:"updated_by"`  // updated_by
	Updated    time.Time     `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientDocument exists in the database.
func (pd *PatientDocument) Exists() bool {
	return pd._exists
}

// Deleted provides information if the PatientDocument has been deleted from the database.
func (pd *PatientDocument) Deleted() bool {
	return pd._deleted
}

// Insert inserts the PatientDocument to the database.
func (pd *PatientDocument) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_documents (` +
		`patient_id, document_id, processed, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pd.PatientID, pd.DocumentID, pd.Processed, pd.UpdatedBy, pd.Updated)
	res, err := db.Exec(sqlstr, pd.PatientID, pd.DocumentID, pd.Processed, pd.UpdatedBy, pd.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pd.ID = uint(id)
	pd._exists = true

	return nil
}

// Update updates the PatientDocument in the database.
func (pd *PatientDocument) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_documents SET ` +
		`patient_id = ?, document_id = ?, processed = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pd.PatientID, pd.DocumentID, pd.Processed, pd.UpdatedBy, pd.Updated, pd.ID)
	_, err = db.Exec(sqlstr, pd.PatientID, pd.DocumentID, pd.Processed, pd.UpdatedBy, pd.Updated, pd.ID)
	return err
}

// Save saves the PatientDocument to the database.
func (pd *PatientDocument) Save(db XODB) error {
	if pd.Exists() {
		return pd.Update(db)
	}

	return pd.Insert(db)
}

// Delete deletes the PatientDocument from the database.
func (pd *PatientDocument) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pd._exists {
		return nil
	}

	// if deleted, bail
	if pd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_documents WHERE id = ?`

	// run query
	XOLog(sqlstr, pd.ID)
	_, err = db.Exec(sqlstr, pd.ID)
	if err != nil {
		return err
	}

	// set deleted
	pd._deleted = true

	return nil
}

// PatientDocumentsByDocumentID retrieves a row from 'AllergyNew.patient_documents' as a PatientDocument.
//
// Generated from index 'Documents'.
func PatientDocumentsByDocumentID(db XODB, documentID sql.NullInt64) ([]*PatientDocument, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, document_id, processed, updated_by, updated ` +
		`FROM AllergyNew.patient_documents ` +
		`WHERE document_id = ?`

	// run query
	XOLog(sqlstr, documentID)
	q, err := db.Query(sqlstr, documentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientDocument{}
	for q.Next() {
		pd := PatientDocument{
			_exists: true,
		}

		// scan
		err = q.Scan(&pd.ID, &pd.PatientID, &pd.DocumentID, &pd.Processed, &pd.UpdatedBy, &pd.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pd)
	}

	return res, nil
}

// PatientDocumentsByPatientID retrieves a row from 'AllergyNew.patient_documents' as a PatientDocument.
//
// Generated from index 'Patients'.
func PatientDocumentsByPatientID(db XODB, patientID sql.NullInt64) ([]*PatientDocument, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, document_id, processed, updated_by, updated ` +
		`FROM AllergyNew.patient_documents ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientDocument{}
	for q.Next() {
		pd := PatientDocument{
			_exists: true,
		}

		// scan
		err = q.Scan(&pd.ID, &pd.PatientID, &pd.DocumentID, &pd.Processed, &pd.UpdatedBy, &pd.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pd)
	}

	return res, nil
}

// PatientDocumentByID retrieves a row from 'AllergyNew.patient_documents' as a PatientDocument.
//
// Generated from index 'patient_documents_id_pkey'.
func PatientDocumentByID(db XODB, id uint) (*PatientDocument, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, document_id, processed, updated_by, updated ` +
		`FROM AllergyNew.patient_documents ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pd := PatientDocument{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pd.ID, &pd.PatientID, &pd.DocumentID, &pd.Processed, &pd.UpdatedBy, &pd.Updated)
	if err != nil {
		return nil, err
	}

	return &pd, nil
}
