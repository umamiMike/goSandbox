// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// PatientEmr represents a row from 'AllergyNew.patient_emrs'.
type PatientEmr struct {
	ID           uint           `json:"id"`             // id
	PatientID    sql.NullInt64  `json:"patient_id"`     // patient_id
	EmrID        sql.NullInt64  `json:"emr_id"`         // emr_id
	PatientEmrID sql.NullString `json:"patient_emr_id"` // patient_emr_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientEmr exists in the database.
func (pe *PatientEmr) Exists() bool {
	return pe._exists
}

// Deleted provides information if the PatientEmr has been deleted from the database.
func (pe *PatientEmr) Deleted() bool {
	return pe._deleted
}

// Insert inserts the PatientEmr to the database.
func (pe *PatientEmr) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_emrs (` +
		`patient_id, emr_id, patient_emr_id` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pe.PatientID, pe.EmrID, pe.PatientEmrID)
	res, err := db.Exec(sqlstr, pe.PatientID, pe.EmrID, pe.PatientEmrID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pe.ID = uint(id)
	pe._exists = true

	return nil
}

// Update updates the PatientEmr in the database.
func (pe *PatientEmr) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pe._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pe._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_emrs SET ` +
		`patient_id = ?, emr_id = ?, patient_emr_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pe.PatientID, pe.EmrID, pe.PatientEmrID, pe.ID)
	_, err = db.Exec(sqlstr, pe.PatientID, pe.EmrID, pe.PatientEmrID, pe.ID)
	return err
}

// Save saves the PatientEmr to the database.
func (pe *PatientEmr) Save(db XODB) error {
	if pe.Exists() {
		return pe.Update(db)
	}

	return pe.Insert(db)
}

// Delete deletes the PatientEmr from the database.
func (pe *PatientEmr) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pe._exists {
		return nil
	}

	// if deleted, bail
	if pe._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_emrs WHERE id = ?`

	// run query
	XOLog(sqlstr, pe.ID)
	_, err = db.Exec(sqlstr, pe.ID)
	if err != nil {
		return err
	}

	// set deleted
	pe._deleted = true

	return nil
}

// PatientEmrsByPatientID retrieves a row from 'AllergyNew.patient_emrs' as a PatientEmr.
//
// Generated from index 'Patients'.
func PatientEmrsByPatientID(db XODB, patientID sql.NullInt64) ([]*PatientEmr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, emr_id, patient_emr_id ` +
		`FROM AllergyNew.patient_emrs ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientEmr{}
	for q.Next() {
		pe := PatientEmr{
			_exists: true,
		}

		// scan
		err = q.Scan(&pe.ID, &pe.PatientID, &pe.EmrID, &pe.PatientEmrID)
		if err != nil {
			return nil, err
		}

		res = append(res, &pe)
	}

	return res, nil
}

// PatientEmrByID retrieves a row from 'AllergyNew.patient_emrs' as a PatientEmr.
//
// Generated from index 'patient_emrs_id_pkey'.
func PatientEmrByID(db XODB, id uint) (*PatientEmr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, emr_id, patient_emr_id ` +
		`FROM AllergyNew.patient_emrs ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pe := PatientEmr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pe.ID, &pe.PatientID, &pe.EmrID, &pe.PatientEmrID)
	if err != nil {
		return nil, err
	}

	return &pe, nil
}
