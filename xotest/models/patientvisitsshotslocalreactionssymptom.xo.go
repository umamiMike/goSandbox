// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PatientVisitsShotsLocalReactionsSymptom represents a row from 'AllergyNew.patient_visits_shots_local_reactions_symptoms'.
type PatientVisitsShotsLocalReactionsSymptom struct {
	ID         uint          `json:"id"`          // id
	ReactionID sql.NullInt64 `json:"reaction_id"` // reaction_id
	SymptomID  sql.NullInt64 `json:"symptom_id"`  // symptom_id
	UpdatedBy  sql.NullInt64 `json:"updated_by"`  // updated_by
	Updated    time.Time     `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientVisitsShotsLocalReactionsSymptom exists in the database.
func (pvslrs *PatientVisitsShotsLocalReactionsSymptom) Exists() bool {
	return pvslrs._exists
}

// Deleted provides information if the PatientVisitsShotsLocalReactionsSymptom has been deleted from the database.
func (pvslrs *PatientVisitsShotsLocalReactionsSymptom) Deleted() bool {
	return pvslrs._deleted
}

// Insert inserts the PatientVisitsShotsLocalReactionsSymptom to the database.
func (pvslrs *PatientVisitsShotsLocalReactionsSymptom) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pvslrs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_visits_shots_local_reactions_symptoms (` +
		`reaction_id, symptom_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pvslrs.ReactionID, pvslrs.SymptomID, pvslrs.UpdatedBy, pvslrs.Updated)
	res, err := db.Exec(sqlstr, pvslrs.ReactionID, pvslrs.SymptomID, pvslrs.UpdatedBy, pvslrs.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pvslrs.ID = uint(id)
	pvslrs._exists = true

	return nil
}

// Update updates the PatientVisitsShotsLocalReactionsSymptom in the database.
func (pvslrs *PatientVisitsShotsLocalReactionsSymptom) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvslrs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pvslrs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_visits_shots_local_reactions_symptoms SET ` +
		`reaction_id = ?, symptom_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pvslrs.ReactionID, pvslrs.SymptomID, pvslrs.UpdatedBy, pvslrs.Updated, pvslrs.ID)
	_, err = db.Exec(sqlstr, pvslrs.ReactionID, pvslrs.SymptomID, pvslrs.UpdatedBy, pvslrs.Updated, pvslrs.ID)
	return err
}

// Save saves the PatientVisitsShotsLocalReactionsSymptom to the database.
func (pvslrs *PatientVisitsShotsLocalReactionsSymptom) Save(db XODB) error {
	if pvslrs.Exists() {
		return pvslrs.Update(db)
	}

	return pvslrs.Insert(db)
}

// Delete deletes the PatientVisitsShotsLocalReactionsSymptom from the database.
func (pvslrs *PatientVisitsShotsLocalReactionsSymptom) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvslrs._exists {
		return nil
	}

	// if deleted, bail
	if pvslrs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_visits_shots_local_reactions_symptoms WHERE id = ?`

	// run query
	XOLog(sqlstr, pvslrs.ID)
	_, err = db.Exec(sqlstr, pvslrs.ID)
	if err != nil {
		return err
	}

	// set deleted
	pvslrs._deleted = true

	return nil
}

// PatientVisitsShotsLocalReactionsSymptomsByReactionID retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions_symptoms' as a PatientVisitsShotsLocalReactionsSymptom.
//
// Generated from index 'Reaction'.
func PatientVisitsShotsLocalReactionsSymptomsByReactionID(db XODB, reactionID sql.NullInt64) ([]*PatientVisitsShotsLocalReactionsSymptom, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, reaction_id, symptom_id, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions_symptoms ` +
		`WHERE reaction_id = ?`

	// run query
	XOLog(sqlstr, reactionID)
	q, err := db.Query(sqlstr, reactionID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShotsLocalReactionsSymptom{}
	for q.Next() {
		pvslrs := PatientVisitsShotsLocalReactionsSymptom{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvslrs.ID, &pvslrs.ReactionID, &pvslrs.SymptomID, &pvslrs.UpdatedBy, &pvslrs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvslrs)
	}

	return res, nil
}

// PatientVisitsShotsLocalReactionsSymptomsBySymptomID retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions_symptoms' as a PatientVisitsShotsLocalReactionsSymptom.
//
// Generated from index 'Symptom'.
func PatientVisitsShotsLocalReactionsSymptomsBySymptomID(db XODB, symptomID sql.NullInt64) ([]*PatientVisitsShotsLocalReactionsSymptom, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, reaction_id, symptom_id, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions_symptoms ` +
		`WHERE symptom_id = ?`

	// run query
	XOLog(sqlstr, symptomID)
	q, err := db.Query(sqlstr, symptomID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShotsLocalReactionsSymptom{}
	for q.Next() {
		pvslrs := PatientVisitsShotsLocalReactionsSymptom{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvslrs.ID, &pvslrs.ReactionID, &pvslrs.SymptomID, &pvslrs.UpdatedBy, &pvslrs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvslrs)
	}

	return res, nil
}

// PatientVisitsShotsLocalReactionsSymptomByID retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions_symptoms' as a PatientVisitsShotsLocalReactionsSymptom.
//
// Generated from index 'patient_visits_shots_local_reactions_symptoms_id_pkey'.
func PatientVisitsShotsLocalReactionsSymptomByID(db XODB, id uint) (*PatientVisitsShotsLocalReactionsSymptom, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, reaction_id, symptom_id, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions_symptoms ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pvslrs := PatientVisitsShotsLocalReactionsSymptom{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pvslrs.ID, &pvslrs.ReactionID, &pvslrs.SymptomID, &pvslrs.UpdatedBy, &pvslrs.Updated)
	if err != nil {
		return nil, err
	}

	return &pvslrs, nil
}
