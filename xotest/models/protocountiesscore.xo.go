// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// ProtoCountiesScore represents a row from 'AllergyNew.proto_counties_scores'.
type ProtoCountiesScore struct {
	ID         uint          `json:"id"`          // id
	CountyID   sql.NullInt64 `json:"county_id"`   // county_id
	PracticeID sql.NullInt64 `json:"practice_id"` // practice_id
	AntigenID  sql.NullInt64 `json:"antigen_id"`  // antigen_id
	Score      float32       `json:"score"`       // score
	UpdatedBy  sql.NullInt64 `json:"updated_by"`  // updated_by
	Updated    time.Time     `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProtoCountiesScore exists in the database.
func (pcs *ProtoCountiesScore) Exists() bool {
	return pcs._exists
}

// Deleted provides information if the ProtoCountiesScore has been deleted from the database.
func (pcs *ProtoCountiesScore) Deleted() bool {
	return pcs._deleted
}

// Insert inserts the ProtoCountiesScore to the database.
func (pcs *ProtoCountiesScore) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pcs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.proto_counties_scores (` +
		`county_id, practice_id, antigen_id, score, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pcs.CountyID, pcs.PracticeID, pcs.AntigenID, pcs.Score, pcs.UpdatedBy, pcs.Updated)
	res, err := db.Exec(sqlstr, pcs.CountyID, pcs.PracticeID, pcs.AntigenID, pcs.Score, pcs.UpdatedBy, pcs.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pcs.ID = uint(id)
	pcs._exists = true

	return nil
}

// Update updates the ProtoCountiesScore in the database.
func (pcs *ProtoCountiesScore) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pcs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pcs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.proto_counties_scores SET ` +
		`county_id = ?, practice_id = ?, antigen_id = ?, score = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pcs.CountyID, pcs.PracticeID, pcs.AntigenID, pcs.Score, pcs.UpdatedBy, pcs.Updated, pcs.ID)
	_, err = db.Exec(sqlstr, pcs.CountyID, pcs.PracticeID, pcs.AntigenID, pcs.Score, pcs.UpdatedBy, pcs.Updated, pcs.ID)
	return err
}

// Save saves the ProtoCountiesScore to the database.
func (pcs *ProtoCountiesScore) Save(db XODB) error {
	if pcs.Exists() {
		return pcs.Update(db)
	}

	return pcs.Insert(db)
}

// Delete deletes the ProtoCountiesScore from the database.
func (pcs *ProtoCountiesScore) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pcs._exists {
		return nil
	}

	// if deleted, bail
	if pcs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.proto_counties_scores WHERE id = ?`

	// run query
	XOLog(sqlstr, pcs.ID)
	_, err = db.Exec(sqlstr, pcs.ID)
	if err != nil {
		return err
	}

	// set deleted
	pcs._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the ProtoCountiesScore's AntigenID (antigen_id).
//
// Generated from foreign key 'proto_counties_scores_antigens'.
func (pcs *ProtoCountiesScore) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(pcs.AntigenID.Int64))
}

// ProtoCounty returns the ProtoCounty associated with the ProtoCountiesScore's CountyID (county_id).
//
// Generated from foreign key 'proto_counties_scores_county'.
func (pcs *ProtoCountiesScore) ProtoCounty(db XODB) (*ProtoCounty, error) {
	return ProtoCountyByID(db, uint(pcs.CountyID.Int64))
}

// Practice returns the Practice associated with the ProtoCountiesScore's PracticeID (practice_id).
//
// Generated from foreign key 'proto_counties_scores_practice'.
func (pcs *ProtoCountiesScore) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(pcs.PracticeID.Int64))
}

// User returns the User associated with the ProtoCountiesScore's UpdatedBy (updated_by).
//
// Generated from foreign key 'proto_counties_scores_updated'.
func (pcs *ProtoCountiesScore) User(db XODB) (*User, error) {
	return UserByID(db, uint(pcs.UpdatedBy.Int64))
}

// ProtoCountiesScoresByAntigenID retrieves a row from 'AllergyNew.proto_counties_scores' as a ProtoCountiesScore.
//
// Generated from index 'Antigens'.
func ProtoCountiesScoresByAntigenID(db XODB, antigenID sql.NullInt64) ([]*ProtoCountiesScore, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, county_id, practice_id, antigen_id, score, updated_by, updated ` +
		`FROM AllergyNew.proto_counties_scores ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoCountiesScore{}
	for q.Next() {
		pcs := ProtoCountiesScore{
			_exists: true,
		}

		// scan
		err = q.Scan(&pcs.ID, &pcs.CountyID, &pcs.PracticeID, &pcs.AntigenID, &pcs.Score, &pcs.UpdatedBy, &pcs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pcs)
	}

	return res, nil
}

// ProtoCountiesScoresByCountyID retrieves a row from 'AllergyNew.proto_counties_scores' as a ProtoCountiesScore.
//
// Generated from index 'Counties'.
func ProtoCountiesScoresByCountyID(db XODB, countyID sql.NullInt64) ([]*ProtoCountiesScore, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, county_id, practice_id, antigen_id, score, updated_by, updated ` +
		`FROM AllergyNew.proto_counties_scores ` +
		`WHERE county_id = ?`

	// run query
	XOLog(sqlstr, countyID)
	q, err := db.Query(sqlstr, countyID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoCountiesScore{}
	for q.Next() {
		pcs := ProtoCountiesScore{
			_exists: true,
		}

		// scan
		err = q.Scan(&pcs.ID, &pcs.CountyID, &pcs.PracticeID, &pcs.AntigenID, &pcs.Score, &pcs.UpdatedBy, &pcs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pcs)
	}

	return res, nil
}

// ProtoCountiesScoresByPracticeID retrieves a row from 'AllergyNew.proto_counties_scores' as a ProtoCountiesScore.
//
// Generated from index 'Practices'.
func ProtoCountiesScoresByPracticeID(db XODB, practiceID sql.NullInt64) ([]*ProtoCountiesScore, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, county_id, practice_id, antigen_id, score, updated_by, updated ` +
		`FROM AllergyNew.proto_counties_scores ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoCountiesScore{}
	for q.Next() {
		pcs := ProtoCountiesScore{
			_exists: true,
		}

		// scan
		err = q.Scan(&pcs.ID, &pcs.CountyID, &pcs.PracticeID, &pcs.AntigenID, &pcs.Score, &pcs.UpdatedBy, &pcs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pcs)
	}

	return res, nil
}

// ProtoCountiesScoreByID retrieves a row from 'AllergyNew.proto_counties_scores' as a ProtoCountiesScore.
//
// Generated from index 'proto_counties_scores_id_pkey'.
func ProtoCountiesScoreByID(db XODB, id uint) (*ProtoCountiesScore, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, county_id, practice_id, antigen_id, score, updated_by, updated ` +
		`FROM AllergyNew.proto_counties_scores ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pcs := ProtoCountiesScore{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pcs.ID, &pcs.CountyID, &pcs.PracticeID, &pcs.AntigenID, &pcs.Score, &pcs.UpdatedBy, &pcs.Updated)
	if err != nil {
		return nil, err
	}

	return &pcs, nil
}

// ProtoCountiesScoresByUpdatedBy retrieves a row from 'AllergyNew.proto_counties_scores' as a ProtoCountiesScore.
//
// Generated from index 'proto_counties_scores_updated'.
func ProtoCountiesScoresByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*ProtoCountiesScore, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, county_id, practice_id, antigen_id, score, updated_by, updated ` +
		`FROM AllergyNew.proto_counties_scores ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoCountiesScore{}
	for q.Next() {
		pcs := ProtoCountiesScore{
			_exists: true,
		}

		// scan
		err = q.Scan(&pcs.ID, &pcs.CountyID, &pcs.PracticeID, &pcs.AntigenID, &pcs.Score, &pcs.UpdatedBy, &pcs.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pcs)
	}

	return res, nil
}
