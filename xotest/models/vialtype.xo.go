// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialType represents a row from 'AllergyNew.vial_types'.
type VialType struct {
	ID        uint          `json:"id"`         // id
	Type      string        `json:"type"`       // type
	Order     int           `json:"order"`      // order
	UpdatedBy sql.NullInt64 `json:"updated_by"` // updated_by
	Updated   time.Time     `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialType exists in the database.
func (vt *VialType) Exists() bool {
	return vt._exists
}

// Deleted provides information if the VialType has been deleted from the database.
func (vt *VialType) Deleted() bool {
	return vt._deleted
}

// Insert inserts the VialType to the database.
func (vt *VialType) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_types (` +
		`type, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vt.Type, vt.Order, vt.UpdatedBy, vt.Updated)
	res, err := db.Exec(sqlstr, vt.Type, vt.Order, vt.UpdatedBy, vt.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vt.ID = uint(id)
	vt._exists = true

	return nil
}

// Update updates the VialType in the database.
func (vt *VialType) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_types SET ` +
		`type = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vt.Type, vt.Order, vt.UpdatedBy, vt.Updated, vt.ID)
	_, err = db.Exec(sqlstr, vt.Type, vt.Order, vt.UpdatedBy, vt.Updated, vt.ID)
	return err
}

// Save saves the VialType to the database.
func (vt *VialType) Save(db XODB) error {
	if vt.Exists() {
		return vt.Update(db)
	}

	return vt.Insert(db)
}

// Delete deletes the VialType from the database.
func (vt *VialType) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vt._exists {
		return nil
	}

	// if deleted, bail
	if vt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_types WHERE id = ?`

	// run query
	XOLog(sqlstr, vt.ID)
	_, err = db.Exec(sqlstr, vt.ID)
	if err != nil {
		return err
	}

	// set deleted
	vt._deleted = true

	return nil
}

// User returns the User associated with the VialType's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_types_updated'.
func (vt *VialType) User(db XODB) (*User, error) {
	return UserByID(db, uint(vt.UpdatedBy.Int64))
}

// VialTypesByOrder retrieves a row from 'AllergyNew.vial_types' as a VialType.
//
// Generated from index 'Order'.
func VialTypesByOrder(db XODB, order int) ([]*VialType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type, order, updated_by, updated ` +
		`FROM AllergyNew.vial_types ` +
		`WHERE order = ?`

	// run query
	XOLog(sqlstr, order)
	q, err := db.Query(sqlstr, order)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialType{}
	for q.Next() {
		vt := VialType{
			_exists: true,
		}

		// scan
		err = q.Scan(&vt.ID, &vt.Type, &vt.Order, &vt.UpdatedBy, &vt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vt)
	}

	return res, nil
}

// VialTypeByID retrieves a row from 'AllergyNew.vial_types' as a VialType.
//
// Generated from index 'vial_types_id_pkey'.
func VialTypeByID(db XODB, id uint) (*VialType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type, order, updated_by, updated ` +
		`FROM AllergyNew.vial_types ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vt := VialType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vt.ID, &vt.Type, &vt.Order, &vt.UpdatedBy, &vt.Updated)
	if err != nil {
		return nil, err
	}

	return &vt, nil
}

// VialTypesByUpdatedBy retrieves a row from 'AllergyNew.vial_types' as a VialType.
//
// Generated from index 'vial_types_updated'.
func VialTypesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type, order, updated_by, updated ` +
		`FROM AllergyNew.vial_types ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialType{}
	for q.Next() {
		vt := VialType{
			_exists: true,
		}

		// scan
		err = q.Scan(&vt.ID, &vt.Type, &vt.Order, &vt.UpdatedBy, &vt.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vt)
	}

	return res, nil
}
