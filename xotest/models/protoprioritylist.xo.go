// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// ProtoPriorityList represents a row from 'AllergyNew.proto_priority_list'.
type ProtoPriorityList struct {
	ID            uint           `json:"id"`             // id
	PracticeID    sql.NullInt64  `json:"practice_id"`    // practice_id
	AntigenID     sql.NullInt64  `json:"antigen_id"`     // antigen_id
	PriorityOrder sql.NullInt64  `json:"priority_order"` // priority_order
	GroupName     sql.NullString `json:"group_name"`     // group_name
	GroupOrder    sql.NullInt64  `json:"group_order"`    // group_order
	UpdatedBy     sql.NullInt64  `json:"updated_by"`     // updated_by
	Updated       time.Time      `json:"updated"`        // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProtoPriorityList exists in the database.
func (ppl *ProtoPriorityList) Exists() bool {
	return ppl._exists
}

// Deleted provides information if the ProtoPriorityList has been deleted from the database.
func (ppl *ProtoPriorityList) Deleted() bool {
	return ppl._deleted
}

// Insert inserts the ProtoPriorityList to the database.
func (ppl *ProtoPriorityList) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ppl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.proto_priority_list (` +
		`practice_id, antigen_id, priority_order, group_name, group_order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ppl.PracticeID, ppl.AntigenID, ppl.PriorityOrder, ppl.GroupName, ppl.GroupOrder, ppl.UpdatedBy, ppl.Updated)
	res, err := db.Exec(sqlstr, ppl.PracticeID, ppl.AntigenID, ppl.PriorityOrder, ppl.GroupName, ppl.GroupOrder, ppl.UpdatedBy, ppl.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ppl.ID = uint(id)
	ppl._exists = true

	return nil
}

// Update updates the ProtoPriorityList in the database.
func (ppl *ProtoPriorityList) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ppl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.proto_priority_list SET ` +
		`practice_id = ?, antigen_id = ?, priority_order = ?, group_name = ?, group_order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ppl.PracticeID, ppl.AntigenID, ppl.PriorityOrder, ppl.GroupName, ppl.GroupOrder, ppl.UpdatedBy, ppl.Updated, ppl.ID)
	_, err = db.Exec(sqlstr, ppl.PracticeID, ppl.AntigenID, ppl.PriorityOrder, ppl.GroupName, ppl.GroupOrder, ppl.UpdatedBy, ppl.Updated, ppl.ID)
	return err
}

// Save saves the ProtoPriorityList to the database.
func (ppl *ProtoPriorityList) Save(db XODB) error {
	if ppl.Exists() {
		return ppl.Update(db)
	}

	return ppl.Insert(db)
}

// Delete deletes the ProtoPriorityList from the database.
func (ppl *ProtoPriorityList) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppl._exists {
		return nil
	}

	// if deleted, bail
	if ppl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.proto_priority_list WHERE id = ?`

	// run query
	XOLog(sqlstr, ppl.ID)
	_, err = db.Exec(sqlstr, ppl.ID)
	if err != nil {
		return err
	}

	// set deleted
	ppl._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the ProtoPriorityList's AntigenID (antigen_id).
//
// Generated from foreign key 'proto_priority_list_antigens'.
func (ppl *ProtoPriorityList) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(ppl.AntigenID.Int64))
}

// Practice returns the Practice associated with the ProtoPriorityList's PracticeID (practice_id).
//
// Generated from foreign key 'proto_priority_list_practice'.
func (ppl *ProtoPriorityList) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(ppl.PracticeID.Int64))
}

// User returns the User associated with the ProtoPriorityList's UpdatedBy (updated_by).
//
// Generated from foreign key 'proto_priority_list_updated'.
func (ppl *ProtoPriorityList) User(db XODB) (*User, error) {
	return UserByID(db, uint(ppl.UpdatedBy.Int64))
}

// ProtoPriorityListsByAntigenID retrieves a row from 'AllergyNew.proto_priority_list' as a ProtoPriorityList.
//
// Generated from index 'Antigens'.
func ProtoPriorityListsByAntigenID(db XODB, antigenID sql.NullInt64) ([]*ProtoPriorityList, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, antigen_id, priority_order, group_name, group_order, updated_by, updated ` +
		`FROM AllergyNew.proto_priority_list ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPriorityList{}
	for q.Next() {
		ppl := ProtoPriorityList{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppl.ID, &ppl.PracticeID, &ppl.AntigenID, &ppl.PriorityOrder, &ppl.GroupName, &ppl.GroupOrder, &ppl.UpdatedBy, &ppl.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppl)
	}

	return res, nil
}

// ProtoPriorityListsByPracticeID retrieves a row from 'AllergyNew.proto_priority_list' as a ProtoPriorityList.
//
// Generated from index 'Practices'.
func ProtoPriorityListsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*ProtoPriorityList, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, antigen_id, priority_order, group_name, group_order, updated_by, updated ` +
		`FROM AllergyNew.proto_priority_list ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPriorityList{}
	for q.Next() {
		ppl := ProtoPriorityList{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppl.ID, &ppl.PracticeID, &ppl.AntigenID, &ppl.PriorityOrder, &ppl.GroupName, &ppl.GroupOrder, &ppl.UpdatedBy, &ppl.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppl)
	}

	return res, nil
}

// ProtoPriorityListByID retrieves a row from 'AllergyNew.proto_priority_list' as a ProtoPriorityList.
//
// Generated from index 'proto_priority_list_id_pkey'.
func ProtoPriorityListByID(db XODB, id uint) (*ProtoPriorityList, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, antigen_id, priority_order, group_name, group_order, updated_by, updated ` +
		`FROM AllergyNew.proto_priority_list ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ppl := ProtoPriorityList{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ppl.ID, &ppl.PracticeID, &ppl.AntigenID, &ppl.PriorityOrder, &ppl.GroupName, &ppl.GroupOrder, &ppl.UpdatedBy, &ppl.Updated)
	if err != nil {
		return nil, err
	}

	return &ppl, nil
}

// ProtoPriorityListsByUpdatedBy retrieves a row from 'AllergyNew.proto_priority_list' as a ProtoPriorityList.
//
// Generated from index 'proto_priority_list_updated'.
func ProtoPriorityListsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*ProtoPriorityList, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, antigen_id, priority_order, group_name, group_order, updated_by, updated ` +
		`FROM AllergyNew.proto_priority_list ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoPriorityList{}
	for q.Next() {
		ppl := ProtoPriorityList{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppl.ID, &ppl.PracticeID, &ppl.AntigenID, &ppl.PriorityOrder, &ppl.GroupName, &ppl.GroupOrder, &ppl.UpdatedBy, &ppl.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppl)
	}

	return res, nil
}
