// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// ImportReport represents a row from 'AllergyNew.import_reports'.
type ImportReport struct {
	ID         uint           `json:"id"`          // id
	PracticeID uint           `json:"practice_id"` // practice_id
	IsInput    int8           `json:"is_input"`    // is_input
	Key        sql.NullString `json:"key"`         // key
	Value      sql.NullInt64  `json:"value"`       // value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ImportReport exists in the database.
func (ir *ImportReport) Exists() bool {
	return ir._exists
}

// Deleted provides information if the ImportReport has been deleted from the database.
func (ir *ImportReport) Deleted() bool {
	return ir._deleted
}

// Insert inserts the ImportReport to the database.
func (ir *ImportReport) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ir._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.import_reports (` +
		`practice_id, is_input, key, value` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ir.PracticeID, ir.IsInput, ir.Key, ir.Value)
	res, err := db.Exec(sqlstr, ir.PracticeID, ir.IsInput, ir.Key, ir.Value)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ir.ID = uint(id)
	ir._exists = true

	return nil
}

// Update updates the ImportReport in the database.
func (ir *ImportReport) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ir._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ir._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.import_reports SET ` +
		`practice_id = ?, is_input = ?, key = ?, value = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ir.PracticeID, ir.IsInput, ir.Key, ir.Value, ir.ID)
	_, err = db.Exec(sqlstr, ir.PracticeID, ir.IsInput, ir.Key, ir.Value, ir.ID)
	return err
}

// Save saves the ImportReport to the database.
func (ir *ImportReport) Save(db XODB) error {
	if ir.Exists() {
		return ir.Update(db)
	}

	return ir.Insert(db)
}

// Delete deletes the ImportReport from the database.
func (ir *ImportReport) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ir._exists {
		return nil
	}

	// if deleted, bail
	if ir._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.import_reports WHERE id = ?`

	// run query
	XOLog(sqlstr, ir.ID)
	_, err = db.Exec(sqlstr, ir.ID)
	if err != nil {
		return err
	}

	// set deleted
	ir._deleted = true

	return nil
}

// ImportReportByID retrieves a row from 'AllergyNew.import_reports' as a ImportReport.
//
// Generated from index 'import_reports_id_pkey'.
func ImportReportByID(db XODB, id uint) (*ImportReport, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, is_input, key, value ` +
		`FROM AllergyNew.import_reports ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ir := ImportReport{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ir.ID, &ir.PracticeID, &ir.IsInput, &ir.Key, &ir.Value)
	if err != nil {
		return nil, err
	}

	return &ir, nil
}
