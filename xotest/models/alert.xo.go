// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Alert represents a row from 'AllergyNew.alerts'.
type Alert struct {
	ID         uint          `json:"id"`          // id
	PracticeID sql.NullInt64 `json:"practice_id"` // practice_id
	LocationID sql.NullInt64 `json:"location_id"` // location_id
	Type       Type          `json:"type"`        // type
	TargetID   sql.NullInt64 `json:"target_id"`   // target_id
	UpdatedBy  sql.NullInt64 `json:"updated_by"`  // updated_by
	Updated    time.Time     `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Alert exists in the database.
func (a *Alert) Exists() bool {
	return a._exists
}

// Deleted provides information if the Alert has been deleted from the database.
func (a *Alert) Deleted() bool {
	return a._deleted
}

// Insert inserts the Alert to the database.
func (a *Alert) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.alerts (` +
		`practice_id, location_id, type, target_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.PracticeID, a.LocationID, a.Type, a.TargetID, a.UpdatedBy, a.Updated)
	res, err := db.Exec(sqlstr, a.PracticeID, a.LocationID, a.Type, a.TargetID, a.UpdatedBy, a.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = uint(id)
	a._exists = true

	return nil
}

// Update updates the Alert in the database.
func (a *Alert) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.alerts SET ` +
		`practice_id = ?, location_id = ?, type = ?, target_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, a.PracticeID, a.LocationID, a.Type, a.TargetID, a.UpdatedBy, a.Updated, a.ID)
	_, err = db.Exec(sqlstr, a.PracticeID, a.LocationID, a.Type, a.TargetID, a.UpdatedBy, a.Updated, a.ID)
	return err
}

// Save saves the Alert to the database.
func (a *Alert) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Alert from the database.
func (a *Alert) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.alerts WHERE id = ?`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AlertByID retrieves a row from 'AllergyNew.alerts' as a Alert.
//
// Generated from index 'alerts_id_pkey'.
func AlertByID(db XODB, id uint) (*Alert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, type, target_id, updated_by, updated ` +
		`FROM AllergyNew.alerts ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	a := Alert{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.PracticeID, &a.LocationID, &a.Type, &a.TargetID, &a.UpdatedBy, &a.Updated)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AlertsByLocationID retrieves a row from 'AllergyNew.alerts' as a Alert.
//
// Generated from index 'alerts_location_id'.
func AlertsByLocationID(db XODB, locationID sql.NullInt64) ([]*Alert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, type, target_id, updated_by, updated ` +
		`FROM AllergyNew.alerts ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Alert{}
	for q.Next() {
		a := Alert{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.PracticeID, &a.LocationID, &a.Type, &a.TargetID, &a.UpdatedBy, &a.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AlertsByPracticeID retrieves a row from 'AllergyNew.alerts' as a Alert.
//
// Generated from index 'alerts_practice_id'.
func AlertsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*Alert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, type, target_id, updated_by, updated ` +
		`FROM AllergyNew.alerts ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Alert{}
	for q.Next() {
		a := Alert{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.PracticeID, &a.LocationID, &a.Type, &a.TargetID, &a.UpdatedBy, &a.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}
