// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// PracticeOwner represents a row from 'AllergyNew.practice_owners'.
type PracticeOwner struct {
	ID         uint          `json:"id"`          // id
	ParentID   sql.NullInt64 `json:"parent_id"`   // parent_id
	PracticeID sql.NullInt64 `json:"practice_id"` // practice_id
	Enabled    sql.NullInt64 `json:"enabled"`     // enabled

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PracticeOwner exists in the database.
func (po *PracticeOwner) Exists() bool {
	return po._exists
}

// Deleted provides information if the PracticeOwner has been deleted from the database.
func (po *PracticeOwner) Deleted() bool {
	return po._deleted
}

// Insert inserts the PracticeOwner to the database.
func (po *PracticeOwner) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if po._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practice_owners (` +
		`parent_id, practice_id, enabled` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, po.ParentID, po.PracticeID, po.Enabled)
	res, err := db.Exec(sqlstr, po.ParentID, po.PracticeID, po.Enabled)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	po.ID = uint(id)
	po._exists = true

	return nil
}

// Update updates the PracticeOwner in the database.
func (po *PracticeOwner) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !po._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if po._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practice_owners SET ` +
		`parent_id = ?, practice_id = ?, enabled = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, po.ParentID, po.PracticeID, po.Enabled, po.ID)
	_, err = db.Exec(sqlstr, po.ParentID, po.PracticeID, po.Enabled, po.ID)
	return err
}

// Save saves the PracticeOwner to the database.
func (po *PracticeOwner) Save(db XODB) error {
	if po.Exists() {
		return po.Update(db)
	}

	return po.Insert(db)
}

// Delete deletes the PracticeOwner from the database.
func (po *PracticeOwner) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !po._exists {
		return nil
	}

	// if deleted, bail
	if po._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practice_owners WHERE id = ?`

	// run query
	XOLog(sqlstr, po.ID)
	_, err = db.Exec(sqlstr, po.ID)
	if err != nil {
		return err
	}

	// set deleted
	po._deleted = true

	return nil
}

// PracticeOwnersByPracticeID retrieves a row from 'AllergyNew.practice_owners' as a PracticeOwner.
//
// Generated from index 'Children'.
func PracticeOwnersByPracticeID(db XODB, practiceID sql.NullInt64) ([]*PracticeOwner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_id, practice_id, enabled ` +
		`FROM AllergyNew.practice_owners ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticeOwner{}
	for q.Next() {
		po := PracticeOwner{
			_exists: true,
		}

		// scan
		err = q.Scan(&po.ID, &po.ParentID, &po.PracticeID, &po.Enabled)
		if err != nil {
			return nil, err
		}

		res = append(res, &po)
	}

	return res, nil
}

// PracticeOwnersByParentID retrieves a row from 'AllergyNew.practice_owners' as a PracticeOwner.
//
// Generated from index 'Parent'.
func PracticeOwnersByParentID(db XODB, parentID sql.NullInt64) ([]*PracticeOwner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_id, practice_id, enabled ` +
		`FROM AllergyNew.practice_owners ` +
		`WHERE parent_id = ?`

	// run query
	XOLog(sqlstr, parentID)
	q, err := db.Query(sqlstr, parentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticeOwner{}
	for q.Next() {
		po := PracticeOwner{
			_exists: true,
		}

		// scan
		err = q.Scan(&po.ID, &po.ParentID, &po.PracticeID, &po.Enabled)
		if err != nil {
			return nil, err
		}

		res = append(res, &po)
	}

	return res, nil
}

// PracticeOwnerByID retrieves a row from 'AllergyNew.practice_owners' as a PracticeOwner.
//
// Generated from index 'practice_owners_id_pkey'.
func PracticeOwnerByID(db XODB, id uint) (*PracticeOwner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_id, practice_id, enabled ` +
		`FROM AllergyNew.practice_owners ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	po := PracticeOwner{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&po.ID, &po.ParentID, &po.PracticeID, &po.Enabled)
	if err != nil {
		return nil, err
	}

	return &po, nil
}
