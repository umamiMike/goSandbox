// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PrickTestResult represents a row from 'AllergyNew.prick_test_results'.
type PrickTestResult struct {
	ID        uint           `json:"id"`         // id
	TestID    sql.NullInt64  `json:"test_id"`    // test_id
	AntigenID sql.NullInt64  `json:"antigen_id"` // antigen_id
	WhealSize sql.NullString `json:"wheal_size"` // wheal_size
	FlareSize sql.NullString `json:"flare_size"` // flare_size
	Order     sql.NullInt64  `json:"order"`      // order
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PrickTestResult exists in the database.
func (ptr *PrickTestResult) Exists() bool {
	return ptr._exists
}

// Deleted provides information if the PrickTestResult has been deleted from the database.
func (ptr *PrickTestResult) Deleted() bool {
	return ptr._deleted
}

// Insert inserts the PrickTestResult to the database.
func (ptr *PrickTestResult) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ptr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.prick_test_results (` +
		`test_id, antigen_id, wheal_size, flare_size, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ptr.TestID, ptr.AntigenID, ptr.WhealSize, ptr.FlareSize, ptr.Order, ptr.UpdatedBy, ptr.Updated)
	res, err := db.Exec(sqlstr, ptr.TestID, ptr.AntigenID, ptr.WhealSize, ptr.FlareSize, ptr.Order, ptr.UpdatedBy, ptr.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ptr.ID = uint(id)
	ptr._exists = true

	return nil
}

// Update updates the PrickTestResult in the database.
func (ptr *PrickTestResult) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ptr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ptr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.prick_test_results SET ` +
		`test_id = ?, antigen_id = ?, wheal_size = ?, flare_size = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ptr.TestID, ptr.AntigenID, ptr.WhealSize, ptr.FlareSize, ptr.Order, ptr.UpdatedBy, ptr.Updated, ptr.ID)
	_, err = db.Exec(sqlstr, ptr.TestID, ptr.AntigenID, ptr.WhealSize, ptr.FlareSize, ptr.Order, ptr.UpdatedBy, ptr.Updated, ptr.ID)
	return err
}

// Save saves the PrickTestResult to the database.
func (ptr *PrickTestResult) Save(db XODB) error {
	if ptr.Exists() {
		return ptr.Update(db)
	}

	return ptr.Insert(db)
}

// Delete deletes the PrickTestResult from the database.
func (ptr *PrickTestResult) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ptr._exists {
		return nil
	}

	// if deleted, bail
	if ptr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.prick_test_results WHERE id = ?`

	// run query
	XOLog(sqlstr, ptr.ID)
	_, err = db.Exec(sqlstr, ptr.ID)
	if err != nil {
		return err
	}

	// set deleted
	ptr._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the PrickTestResult's AntigenID (antigen_id).
//
// Generated from foreign key 'prick_test_results_antigen'.
func (ptr *PrickTestResult) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(ptr.AntigenID.Int64))
}

// PrickTest returns the PrickTest associated with the PrickTestResult's TestID (test_id).
//
// Generated from foreign key 'prick_test_results_tests'.
func (ptr *PrickTestResult) PrickTest(db XODB) (*PrickTest, error) {
	return PrickTestByID(db, uint(ptr.TestID.Int64))
}

// User returns the User associated with the PrickTestResult's UpdatedBy (updated_by).
//
// Generated from foreign key 'prick_test_results_updated'.
func (ptr *PrickTestResult) User(db XODB) (*User, error) {
	return UserByID(db, uint(ptr.UpdatedBy.Int64))
}

// PrickTestResultsByAntigenID retrieves a row from 'AllergyNew.prick_test_results' as a PrickTestResult.
//
// Generated from index 'Antigens'.
func PrickTestResultsByAntigenID(db XODB, antigenID sql.NullInt64) ([]*PrickTestResult, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_id, wheal_size, flare_size, order, updated_by, updated ` +
		`FROM AllergyNew.prick_test_results ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestResult{}
	for q.Next() {
		ptr := PrickTestResult{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptr.ID, &ptr.TestID, &ptr.AntigenID, &ptr.WhealSize, &ptr.FlareSize, &ptr.Order, &ptr.UpdatedBy, &ptr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptr)
	}

	return res, nil
}

// PrickTestResultsByTestID retrieves a row from 'AllergyNew.prick_test_results' as a PrickTestResult.
//
// Generated from index 'Prick_Tests'.
func PrickTestResultsByTestID(db XODB, testID sql.NullInt64) ([]*PrickTestResult, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_id, wheal_size, flare_size, order, updated_by, updated ` +
		`FROM AllergyNew.prick_test_results ` +
		`WHERE test_id = ?`

	// run query
	XOLog(sqlstr, testID)
	q, err := db.Query(sqlstr, testID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestResult{}
	for q.Next() {
		ptr := PrickTestResult{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptr.ID, &ptr.TestID, &ptr.AntigenID, &ptr.WhealSize, &ptr.FlareSize, &ptr.Order, &ptr.UpdatedBy, &ptr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptr)
	}

	return res, nil
}

// PrickTestResultByID retrieves a row from 'AllergyNew.prick_test_results' as a PrickTestResult.
//
// Generated from index 'prick_test_results_id_pkey'.
func PrickTestResultByID(db XODB, id uint) (*PrickTestResult, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_id, wheal_size, flare_size, order, updated_by, updated ` +
		`FROM AllergyNew.prick_test_results ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ptr := PrickTestResult{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ptr.ID, &ptr.TestID, &ptr.AntigenID, &ptr.WhealSize, &ptr.FlareSize, &ptr.Order, &ptr.UpdatedBy, &ptr.Updated)
	if err != nil {
		return nil, err
	}

	return &ptr, nil
}

// PrickTestResultsByUpdatedBy retrieves a row from 'AllergyNew.prick_test_results' as a PrickTestResult.
//
// Generated from index 'prick_test_results_updated'.
func PrickTestResultsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PrickTestResult, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, test_id, antigen_id, wheal_size, flare_size, order, updated_by, updated ` +
		`FROM AllergyNew.prick_test_results ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PrickTestResult{}
	for q.Next() {
		ptr := PrickTestResult{
			_exists: true,
		}

		// scan
		err = q.Scan(&ptr.ID, &ptr.TestID, &ptr.AntigenID, &ptr.WhealSize, &ptr.FlareSize, &ptr.Order, &ptr.UpdatedBy, &ptr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ptr)
	}

	return res, nil
}
