// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// EmrUpload represents a row from 'AllergyNew.emr_uploads'.
type EmrUpload struct {
	ID               uint           `json:"id"`                // id
	PracticeID       uint           `json:"practice_id"`       // practice_id
	UserID           sql.NullInt64  `json:"user_id"`           // user_id
	LocationID       sql.NullInt64  `json:"location_id"`       // location_id
	EmrID            sql.NullInt64  `json:"emr_id"`            // emr_id
	PatientID        sql.NullInt64  `json:"patient_id"`        // patient_id
	PatientLcn       sql.NullInt64  `json:"patient_lcn"`       // patient_lcn
	DocumentType     sql.NullString `json:"document_type"`     // document_type
	DocumentTypeID   sql.NullInt64  `json:"document_type_id"`  // document_type_id
	DocumentFilename sql.NullString `json:"document_filename"` // document_filename
	Description      sql.NullString `json:"description"`       // description
	ClassName        string         `json:"class_name"`        // class_name
	ObjectID         sql.NullInt64  `json:"object_id"`         // object_id
	UploadDate       mysql.NullTime `json:"upload_date"`       // upload_date
	Status           Status         `json:"status"`            // status
	UpdatedBy        sql.NullInt64  `json:"updated_by"`        // updated_by
	Updated          time.Time      `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EmrUpload exists in the database.
func (eu *EmrUpload) Exists() bool {
	return eu._exists
}

// Deleted provides information if the EmrUpload has been deleted from the database.
func (eu *EmrUpload) Deleted() bool {
	return eu._deleted
}

// Insert inserts the EmrUpload to the database.
func (eu *EmrUpload) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if eu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.emr_uploads (` +
		`practice_id, user_id, location_id, emr_id, patient_id, patient_lcn, document_type, document_type_id, document_filename, description, class_name, object_id, upload_date, status, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, eu.PracticeID, eu.UserID, eu.LocationID, eu.EmrID, eu.PatientID, eu.PatientLcn, eu.DocumentType, eu.DocumentTypeID, eu.DocumentFilename, eu.Description, eu.ClassName, eu.ObjectID, eu.UploadDate, eu.Status, eu.UpdatedBy, eu.Updated)
	res, err := db.Exec(sqlstr, eu.PracticeID, eu.UserID, eu.LocationID, eu.EmrID, eu.PatientID, eu.PatientLcn, eu.DocumentType, eu.DocumentTypeID, eu.DocumentFilename, eu.Description, eu.ClassName, eu.ObjectID, eu.UploadDate, eu.Status, eu.UpdatedBy, eu.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	eu.ID = uint(id)
	eu._exists = true

	return nil
}

// Update updates the EmrUpload in the database.
func (eu *EmrUpload) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if eu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.emr_uploads SET ` +
		`practice_id = ?, user_id = ?, location_id = ?, emr_id = ?, patient_id = ?, patient_lcn = ?, document_type = ?, document_type_id = ?, document_filename = ?, description = ?, class_name = ?, object_id = ?, upload_date = ?, status = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, eu.PracticeID, eu.UserID, eu.LocationID, eu.EmrID, eu.PatientID, eu.PatientLcn, eu.DocumentType, eu.DocumentTypeID, eu.DocumentFilename, eu.Description, eu.ClassName, eu.ObjectID, eu.UploadDate, eu.Status, eu.UpdatedBy, eu.Updated, eu.ID)
	_, err = db.Exec(sqlstr, eu.PracticeID, eu.UserID, eu.LocationID, eu.EmrID, eu.PatientID, eu.PatientLcn, eu.DocumentType, eu.DocumentTypeID, eu.DocumentFilename, eu.Description, eu.ClassName, eu.ObjectID, eu.UploadDate, eu.Status, eu.UpdatedBy, eu.Updated, eu.ID)
	return err
}

// Save saves the EmrUpload to the database.
func (eu *EmrUpload) Save(db XODB) error {
	if eu.Exists() {
		return eu.Update(db)
	}

	return eu.Insert(db)
}

// Delete deletes the EmrUpload from the database.
func (eu *EmrUpload) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eu._exists {
		return nil
	}

	// if deleted, bail
	if eu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.emr_uploads WHERE id = ?`

	// run query
	XOLog(sqlstr, eu.ID)
	_, err = db.Exec(sqlstr, eu.ID)
	if err != nil {
		return err
	}

	// set deleted
	eu._deleted = true

	return nil
}

// EmrUploadsByPracticeID retrieves a row from 'AllergyNew.emr_uploads' as a EmrUpload.
//
// Generated from index 'Practice'.
func EmrUploadsByPracticeID(db XODB, practiceID uint) ([]*EmrUpload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, user_id, location_id, emr_id, patient_id, patient_lcn, document_type, document_type_id, document_filename, description, class_name, object_id, upload_date, status, updated_by, updated ` +
		`FROM AllergyNew.emr_uploads ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EmrUpload{}
	for q.Next() {
		eu := EmrUpload{
			_exists: true,
		}

		// scan
		err = q.Scan(&eu.ID, &eu.PracticeID, &eu.UserID, &eu.LocationID, &eu.EmrID, &eu.PatientID, &eu.PatientLcn, &eu.DocumentType, &eu.DocumentTypeID, &eu.DocumentFilename, &eu.Description, &eu.ClassName, &eu.ObjectID, &eu.UploadDate, &eu.Status, &eu.UpdatedBy, &eu.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &eu)
	}

	return res, nil
}

// EmrUploadByID retrieves a row from 'AllergyNew.emr_uploads' as a EmrUpload.
//
// Generated from index 'emr_uploads_id_pkey'.
func EmrUploadByID(db XODB, id uint) (*EmrUpload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, user_id, location_id, emr_id, patient_id, patient_lcn, document_type, document_type_id, document_filename, description, class_name, object_id, upload_date, status, updated_by, updated ` +
		`FROM AllergyNew.emr_uploads ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	eu := EmrUpload{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&eu.ID, &eu.PracticeID, &eu.UserID, &eu.LocationID, &eu.EmrID, &eu.PatientID, &eu.PatientLcn, &eu.DocumentType, &eu.DocumentTypeID, &eu.DocumentFilename, &eu.Description, &eu.ClassName, &eu.ObjectID, &eu.UploadDate, &eu.Status, &eu.UpdatedBy, &eu.Updated)
	if err != nil {
		return nil, err
	}

	return &eu, nil
}
