// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// IntakeMethod is the 'intake_method' enum type from schema 'AllergyNew'.
type IntakeMethod uint16

const (
	// IntakeMethodInj is the 'inj' IntakeMethod.
	IntakeMethodInj = IntakeMethod(1)

	// IntakeMethodSub is the 'sub' IntakeMethod.
	IntakeMethodSub = IntakeMethod(2)

	// IntakeMethodUnk is the 'unk' IntakeMethod.
	IntakeMethodUnk = IntakeMethod(3)
)

// String returns the string value of the IntakeMethod.
func (im IntakeMethod) String() string {
	var enumVal string

	switch im {
	case IntakeMethodInj:
		enumVal = "inj"

	case IntakeMethodSub:
		enumVal = "sub"

	case IntakeMethodUnk:
		enumVal = "unk"
	}

	return enumVal
}

// MarshalText marshals IntakeMethod into text.
func (im IntakeMethod) MarshalText() ([]byte, error) {
	return []byte(im.String()), nil
}

// UnmarshalText unmarshals IntakeMethod from text.
func (im *IntakeMethod) UnmarshalText(text []byte) error {
	switch string(text) {
	case "inj":
		*im = IntakeMethodInj

	case "sub":
		*im = IntakeMethodSub

	case "unk":
		*im = IntakeMethodUnk

	default:
		return errors.New("invalid IntakeMethod")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for IntakeMethod.
func (im IntakeMethod) Value() (driver.Value, error) {
	return im.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for IntakeMethod.
func (im *IntakeMethod) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid IntakeMethod")
	}

	return im.UnmarshalText(buf)
}
