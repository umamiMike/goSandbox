// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// BackupDownload represents a row from 'AllergyNew.backup_downloads'.
type BackupDownload struct {
	ID         uint           `json:"id"`          // id
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	LocationID sql.NullInt64  `json:"location_id"` // location_id
	UserID     sql.NullInt64  `json:"user_id"`     // user_id
	Filename   sql.NullString `json:"filename"`    // filename
	Started    mysql.NullTime `json:"started"`     // started
	Completed  mysql.NullTime `json:"completed"`   // completed
	Status     Status         `json:"status"`      // status
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BackupDownload exists in the database.
func (bd *BackupDownload) Exists() bool {
	return bd._exists
}

// Deleted provides information if the BackupDownload has been deleted from the database.
func (bd *BackupDownload) Deleted() bool {
	return bd._deleted
}

// Insert inserts the BackupDownload to the database.
func (bd *BackupDownload) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if bd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.backup_downloads (` +
		`practice_id, location_id, user_id, filename, started, completed, status, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, bd.PracticeID, bd.LocationID, bd.UserID, bd.Filename, bd.Started, bd.Completed, bd.Status, bd.UpdatedBy, bd.Updated)
	res, err := db.Exec(sqlstr, bd.PracticeID, bd.LocationID, bd.UserID, bd.Filename, bd.Started, bd.Completed, bd.Status, bd.UpdatedBy, bd.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bd.ID = uint(id)
	bd._exists = true

	return nil
}

// Update updates the BackupDownload in the database.
func (bd *BackupDownload) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if bd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.backup_downloads SET ` +
		`practice_id = ?, location_id = ?, user_id = ?, filename = ?, started = ?, completed = ?, status = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, bd.PracticeID, bd.LocationID, bd.UserID, bd.Filename, bd.Started, bd.Completed, bd.Status, bd.UpdatedBy, bd.Updated, bd.ID)
	_, err = db.Exec(sqlstr, bd.PracticeID, bd.LocationID, bd.UserID, bd.Filename, bd.Started, bd.Completed, bd.Status, bd.UpdatedBy, bd.Updated, bd.ID)
	return err
}

// Save saves the BackupDownload to the database.
func (bd *BackupDownload) Save(db XODB) error {
	if bd.Exists() {
		return bd.Update(db)
	}

	return bd.Insert(db)
}

// Delete deletes the BackupDownload from the database.
func (bd *BackupDownload) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bd._exists {
		return nil
	}

	// if deleted, bail
	if bd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.backup_downloads WHERE id = ?`

	// run query
	XOLog(sqlstr, bd.ID)
	_, err = db.Exec(sqlstr, bd.ID)
	if err != nil {
		return err
	}

	// set deleted
	bd._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the BackupDownload's LocationID (location_id).
//
// Generated from foreign key 'backup_downloads_location'.
func (bd *BackupDownload) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(bd.LocationID.Int64))
}

// Practice returns the Practice associated with the BackupDownload's PracticeID (practice_id).
//
// Generated from foreign key 'backup_downloads_practice'.
func (bd *BackupDownload) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(bd.PracticeID.Int64))
}

// UserByUpdatedBy returns the User associated with the BackupDownload's UpdatedBy (updated_by).
//
// Generated from foreign key 'backup_downloads_updated'.
func (bd *BackupDownload) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(bd.UpdatedBy.Int64))
}

// UserByUserID returns the User associated with the BackupDownload's UserID (user_id).
//
// Generated from foreign key 'backup_downloads_user'.
func (bd *BackupDownload) UserByUserID(db XODB) (*User, error) {
	return UserByID(db, uint(bd.UserID.Int64))
}

// BackupDownloadsByLocationID retrieves a row from 'AllergyNew.backup_downloads' as a BackupDownload.
//
// Generated from index 'Locations'.
func BackupDownloadsByLocationID(db XODB, locationID sql.NullInt64) ([]*BackupDownload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, filename, started, completed, status, updated_by, updated ` +
		`FROM AllergyNew.backup_downloads ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BackupDownload{}
	for q.Next() {
		bd := BackupDownload{
			_exists: true,
		}

		// scan
		err = q.Scan(&bd.ID, &bd.PracticeID, &bd.LocationID, &bd.UserID, &bd.Filename, &bd.Started, &bd.Completed, &bd.Status, &bd.UpdatedBy, &bd.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &bd)
	}

	return res, nil
}

// BackupDownloadsByPracticeID retrieves a row from 'AllergyNew.backup_downloads' as a BackupDownload.
//
// Generated from index 'Practices'.
func BackupDownloadsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*BackupDownload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, filename, started, completed, status, updated_by, updated ` +
		`FROM AllergyNew.backup_downloads ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BackupDownload{}
	for q.Next() {
		bd := BackupDownload{
			_exists: true,
		}

		// scan
		err = q.Scan(&bd.ID, &bd.PracticeID, &bd.LocationID, &bd.UserID, &bd.Filename, &bd.Started, &bd.Completed, &bd.Status, &bd.UpdatedBy, &bd.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &bd)
	}

	return res, nil
}

// BackupDownloadsByUserID retrieves a row from 'AllergyNew.backup_downloads' as a BackupDownload.
//
// Generated from index 'Users'.
func BackupDownloadsByUserID(db XODB, userID sql.NullInt64) ([]*BackupDownload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, filename, started, completed, status, updated_by, updated ` +
		`FROM AllergyNew.backup_downloads ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BackupDownload{}
	for q.Next() {
		bd := BackupDownload{
			_exists: true,
		}

		// scan
		err = q.Scan(&bd.ID, &bd.PracticeID, &bd.LocationID, &bd.UserID, &bd.Filename, &bd.Started, &bd.Completed, &bd.Status, &bd.UpdatedBy, &bd.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &bd)
	}

	return res, nil
}

// BackupDownloadByID retrieves a row from 'AllergyNew.backup_downloads' as a BackupDownload.
//
// Generated from index 'backup_downloads_id_pkey'.
func BackupDownloadByID(db XODB, id uint) (*BackupDownload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, filename, started, completed, status, updated_by, updated ` +
		`FROM AllergyNew.backup_downloads ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	bd := BackupDownload{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&bd.ID, &bd.PracticeID, &bd.LocationID, &bd.UserID, &bd.Filename, &bd.Started, &bd.Completed, &bd.Status, &bd.UpdatedBy, &bd.Updated)
	if err != nil {
		return nil, err
	}

	return &bd, nil
}

// BackupDownloadsByUpdatedBy retrieves a row from 'AllergyNew.backup_downloads' as a BackupDownload.
//
// Generated from index 'backup_downloads_updated'.
func BackupDownloadsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*BackupDownload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, filename, started, completed, status, updated_by, updated ` +
		`FROM AllergyNew.backup_downloads ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BackupDownload{}
	for q.Next() {
		bd := BackupDownload{
			_exists: true,
		}

		// scan
		err = q.Scan(&bd.ID, &bd.PracticeID, &bd.LocationID, &bd.UserID, &bd.Filename, &bd.Started, &bd.Completed, &bd.Status, &bd.UpdatedBy, &bd.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &bd)
	}

	return res, nil
}
