// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialRequestsReviewing represents a row from 'AllergyNew.vial_requests_reviewing'.
type VialRequestsReviewing struct {
	ID                uint           `json:"id"`                 // id
	RequestID         uint           `json:"request_id"`         // request_id
	PatientID         uint           `json:"patient_id"`         // patient_id
	PracticeID        uint           `json:"practice_id"`        // practice_id
	LocationID        uint           `json:"location_id"`        // location_id
	FormulaID         uint           `json:"formula_id"`         // formula_id
	Verified          bool           `json:"verified"`           // verified
	RequestDate       time.Time      `json:"request_date"`       // request_date
	Priority          bool           `json:"priority"`           // priority
	HoldReason        sql.NullString `json:"hold_reason"`        // hold_reason
	PatientFirstname  sql.NullString `json:"patient_firstname"`  // patient_firstname
	PatientMiddlename sql.NullString `json:"patient_middlename"` // patient_middlename
	PatientLastname   sql.NullString `json:"patient_lastname"`   // patient_lastname
	IntakeMethod      string         `json:"intake_method"`      // intake_method
	ShotLocation      sql.NullString `json:"shot_location"`      // shot_location
	PracticeName      sql.NullString `json:"practice_name"`      // practice_name
	LocationName      sql.NullString `json:"location_name"`      // location_name
	UserFirstname     sql.NullString `json:"user_firstname"`     // user_firstname
	UserMiddlename    sql.NullString `json:"user_middlename"`    // user_middlename
	UserLastname      sql.NullString `json:"user_lastname"`      // user_lastname
	UpdatedBy         sql.NullInt64  `json:"updated_by"`         // updated_by
	Updated           time.Time      `json:"updated"`            // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialRequestsReviewing exists in the database.
func (vrr *VialRequestsReviewing) Exists() bool {
	return vrr._exists
}

// Deleted provides information if the VialRequestsReviewing has been deleted from the database.
func (vrr *VialRequestsReviewing) Deleted() bool {
	return vrr._deleted
}

// Insert inserts the VialRequestsReviewing to the database.
func (vrr *VialRequestsReviewing) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vrr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_requests_reviewing (` +
		`request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vrr.RequestID, vrr.PatientID, vrr.PracticeID, vrr.LocationID, vrr.FormulaID, vrr.Verified, vrr.RequestDate, vrr.Priority, vrr.HoldReason, vrr.PatientFirstname, vrr.PatientMiddlename, vrr.PatientLastname, vrr.IntakeMethod, vrr.ShotLocation, vrr.PracticeName, vrr.LocationName, vrr.UserFirstname, vrr.UserMiddlename, vrr.UserLastname, vrr.UpdatedBy, vrr.Updated)
	res, err := db.Exec(sqlstr, vrr.RequestID, vrr.PatientID, vrr.PracticeID, vrr.LocationID, vrr.FormulaID, vrr.Verified, vrr.RequestDate, vrr.Priority, vrr.HoldReason, vrr.PatientFirstname, vrr.PatientMiddlename, vrr.PatientLastname, vrr.IntakeMethod, vrr.ShotLocation, vrr.PracticeName, vrr.LocationName, vrr.UserFirstname, vrr.UserMiddlename, vrr.UserLastname, vrr.UpdatedBy, vrr.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vrr.ID = uint(id)
	vrr._exists = true

	return nil
}

// Update updates the VialRequestsReviewing in the database.
func (vrr *VialRequestsReviewing) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vrr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_requests_reviewing SET ` +
		`request_id = ?, patient_id = ?, practice_id = ?, location_id = ?, formula_id = ?, verified = ?, request_date = ?, priority = ?, hold_reason = ?, patient_firstname = ?, patient_middlename = ?, patient_lastname = ?, intake_method = ?, shot_location = ?, practice_name = ?, location_name = ?, user_firstname = ?, user_middlename = ?, user_lastname = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vrr.RequestID, vrr.PatientID, vrr.PracticeID, vrr.LocationID, vrr.FormulaID, vrr.Verified, vrr.RequestDate, vrr.Priority, vrr.HoldReason, vrr.PatientFirstname, vrr.PatientMiddlename, vrr.PatientLastname, vrr.IntakeMethod, vrr.ShotLocation, vrr.PracticeName, vrr.LocationName, vrr.UserFirstname, vrr.UserMiddlename, vrr.UserLastname, vrr.UpdatedBy, vrr.Updated, vrr.ID)
	_, err = db.Exec(sqlstr, vrr.RequestID, vrr.PatientID, vrr.PracticeID, vrr.LocationID, vrr.FormulaID, vrr.Verified, vrr.RequestDate, vrr.Priority, vrr.HoldReason, vrr.PatientFirstname, vrr.PatientMiddlename, vrr.PatientLastname, vrr.IntakeMethod, vrr.ShotLocation, vrr.PracticeName, vrr.LocationName, vrr.UserFirstname, vrr.UserMiddlename, vrr.UserLastname, vrr.UpdatedBy, vrr.Updated, vrr.ID)
	return err
}

// Save saves the VialRequestsReviewing to the database.
func (vrr *VialRequestsReviewing) Save(db XODB) error {
	if vrr.Exists() {
		return vrr.Update(db)
	}

	return vrr.Insert(db)
}

// Delete deletes the VialRequestsReviewing from the database.
func (vrr *VialRequestsReviewing) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vrr._exists {
		return nil
	}

	// if deleted, bail
	if vrr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_requests_reviewing WHERE id = ?`

	// run query
	XOLog(sqlstr, vrr.ID)
	_, err = db.Exec(sqlstr, vrr.ID)
	if err != nil {
		return err
	}

	// set deleted
	vrr._deleted = true

	return nil
}

// VialRequestsReviewingsByLocationID retrieves a row from 'AllergyNew.vial_requests_reviewing' as a VialRequestsReviewing.
//
// Generated from index 'Locations'.
func VialRequestsReviewingsByLocationID(db XODB, locationID uint) ([]*VialRequestsReviewing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_reviewing ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsReviewing{}
	for q.Next() {
		vrr := VialRequestsReviewing{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrr.ID, &vrr.RequestID, &vrr.PatientID, &vrr.PracticeID, &vrr.LocationID, &vrr.FormulaID, &vrr.Verified, &vrr.RequestDate, &vrr.Priority, &vrr.HoldReason, &vrr.PatientFirstname, &vrr.PatientMiddlename, &vrr.PatientLastname, &vrr.IntakeMethod, &vrr.ShotLocation, &vrr.PracticeName, &vrr.LocationName, &vrr.UserFirstname, &vrr.UserMiddlename, &vrr.UserLastname, &vrr.UpdatedBy, &vrr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrr)
	}

	return res, nil
}

// VialRequestsReviewingsByPatientID retrieves a row from 'AllergyNew.vial_requests_reviewing' as a VialRequestsReviewing.
//
// Generated from index 'Patients'.
func VialRequestsReviewingsByPatientID(db XODB, patientID uint) ([]*VialRequestsReviewing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_reviewing ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsReviewing{}
	for q.Next() {
		vrr := VialRequestsReviewing{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrr.ID, &vrr.RequestID, &vrr.PatientID, &vrr.PracticeID, &vrr.LocationID, &vrr.FormulaID, &vrr.Verified, &vrr.RequestDate, &vrr.Priority, &vrr.HoldReason, &vrr.PatientFirstname, &vrr.PatientMiddlename, &vrr.PatientLastname, &vrr.IntakeMethod, &vrr.ShotLocation, &vrr.PracticeName, &vrr.LocationName, &vrr.UserFirstname, &vrr.UserMiddlename, &vrr.UserLastname, &vrr.UpdatedBy, &vrr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrr)
	}

	return res, nil
}

// VialRequestsReviewingsByPracticeID retrieves a row from 'AllergyNew.vial_requests_reviewing' as a VialRequestsReviewing.
//
// Generated from index 'Practices'.
func VialRequestsReviewingsByPracticeID(db XODB, practiceID uint) ([]*VialRequestsReviewing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_reviewing ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsReviewing{}
	for q.Next() {
		vrr := VialRequestsReviewing{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrr.ID, &vrr.RequestID, &vrr.PatientID, &vrr.PracticeID, &vrr.LocationID, &vrr.FormulaID, &vrr.Verified, &vrr.RequestDate, &vrr.Priority, &vrr.HoldReason, &vrr.PatientFirstname, &vrr.PatientMiddlename, &vrr.PatientLastname, &vrr.IntakeMethod, &vrr.ShotLocation, &vrr.PracticeName, &vrr.LocationName, &vrr.UserFirstname, &vrr.UserMiddlename, &vrr.UserLastname, &vrr.UpdatedBy, &vrr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrr)
	}

	return res, nil
}

// VialRequestsReviewingsByPriority retrieves a row from 'AllergyNew.vial_requests_reviewing' as a VialRequestsReviewing.
//
// Generated from index 'Priority'.
func VialRequestsReviewingsByPriority(db XODB, priority bool) ([]*VialRequestsReviewing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_reviewing ` +
		`WHERE priority = ?`

	// run query
	XOLog(sqlstr, priority)
	q, err := db.Query(sqlstr, priority)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsReviewing{}
	for q.Next() {
		vrr := VialRequestsReviewing{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrr.ID, &vrr.RequestID, &vrr.PatientID, &vrr.PracticeID, &vrr.LocationID, &vrr.FormulaID, &vrr.Verified, &vrr.RequestDate, &vrr.Priority, &vrr.HoldReason, &vrr.PatientFirstname, &vrr.PatientMiddlename, &vrr.PatientLastname, &vrr.IntakeMethod, &vrr.ShotLocation, &vrr.PracticeName, &vrr.LocationName, &vrr.UserFirstname, &vrr.UserMiddlename, &vrr.UserLastname, &vrr.UpdatedBy, &vrr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrr)
	}

	return res, nil
}

// VialRequestsReviewingsByRequestID retrieves a row from 'AllergyNew.vial_requests_reviewing' as a VialRequestsReviewing.
//
// Generated from index 'Requests'.
func VialRequestsReviewingsByRequestID(db XODB, requestID uint) ([]*VialRequestsReviewing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_reviewing ` +
		`WHERE request_id = ?`

	// run query
	XOLog(sqlstr, requestID)
	q, err := db.Query(sqlstr, requestID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialRequestsReviewing{}
	for q.Next() {
		vrr := VialRequestsReviewing{
			_exists: true,
		}

		// scan
		err = q.Scan(&vrr.ID, &vrr.RequestID, &vrr.PatientID, &vrr.PracticeID, &vrr.LocationID, &vrr.FormulaID, &vrr.Verified, &vrr.RequestDate, &vrr.Priority, &vrr.HoldReason, &vrr.PatientFirstname, &vrr.PatientMiddlename, &vrr.PatientLastname, &vrr.IntakeMethod, &vrr.ShotLocation, &vrr.PracticeName, &vrr.LocationName, &vrr.UserFirstname, &vrr.UserMiddlename, &vrr.UserLastname, &vrr.UpdatedBy, &vrr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vrr)
	}

	return res, nil
}

// VialRequestsReviewingByID retrieves a row from 'AllergyNew.vial_requests_reviewing' as a VialRequestsReviewing.
//
// Generated from index 'vial_requests_reviewing_id_pkey'.
func VialRequestsReviewingByID(db XODB, id uint) (*VialRequestsReviewing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, request_id, patient_id, practice_id, location_id, formula_id, verified, request_date, priority, hold_reason, patient_firstname, patient_middlename, patient_lastname, intake_method, shot_location, practice_name, location_name, user_firstname, user_middlename, user_lastname, updated_by, updated ` +
		`FROM AllergyNew.vial_requests_reviewing ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vrr := VialRequestsReviewing{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vrr.ID, &vrr.RequestID, &vrr.PatientID, &vrr.PracticeID, &vrr.LocationID, &vrr.FormulaID, &vrr.Verified, &vrr.RequestDate, &vrr.Priority, &vrr.HoldReason, &vrr.PatientFirstname, &vrr.PatientMiddlename, &vrr.PatientLastname, &vrr.IntakeMethod, &vrr.ShotLocation, &vrr.PracticeName, &vrr.LocationName, &vrr.UserFirstname, &vrr.UserMiddlename, &vrr.UserLastname, &vrr.UpdatedBy, &vrr.Updated)
	if err != nil {
		return nil, err
	}

	return &vrr, nil
}
