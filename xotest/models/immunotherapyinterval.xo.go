// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// ImmunotherapyInterval represents a row from 'AllergyNew.immunotherapy_intervals'.
type ImmunotherapyInterval struct {
	ID                  uint           `json:"id"`                    // id
	ImmunotherapyVialID uint           `json:"immunotherapy_vial_id"` // immunotherapy_vial_id
	IntervalDosage      sql.NullString `json:"interval_dosage"`       // interval_dosage
	UpdatedBy           sql.NullInt64  `json:"updated_by"`            // updated_by
	Updated             time.Time      `json:"updated"`               // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ImmunotherapyInterval exists in the database.
func (ii *ImmunotherapyInterval) Exists() bool {
	return ii._exists
}

// Deleted provides information if the ImmunotherapyInterval has been deleted from the database.
func (ii *ImmunotherapyInterval) Deleted() bool {
	return ii._deleted
}

// Insert inserts the ImmunotherapyInterval to the database.
func (ii *ImmunotherapyInterval) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ii._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.immunotherapy_intervals (` +
		`immunotherapy_vial_id, interval_dosage, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ii.ImmunotherapyVialID, ii.IntervalDosage, ii.UpdatedBy, ii.Updated)
	res, err := db.Exec(sqlstr, ii.ImmunotherapyVialID, ii.IntervalDosage, ii.UpdatedBy, ii.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ii.ID = uint(id)
	ii._exists = true

	return nil
}

// Update updates the ImmunotherapyInterval in the database.
func (ii *ImmunotherapyInterval) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ii._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ii._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.immunotherapy_intervals SET ` +
		`immunotherapy_vial_id = ?, interval_dosage = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ii.ImmunotherapyVialID, ii.IntervalDosage, ii.UpdatedBy, ii.Updated, ii.ID)
	_, err = db.Exec(sqlstr, ii.ImmunotherapyVialID, ii.IntervalDosage, ii.UpdatedBy, ii.Updated, ii.ID)
	return err
}

// Save saves the ImmunotherapyInterval to the database.
func (ii *ImmunotherapyInterval) Save(db XODB) error {
	if ii.Exists() {
		return ii.Update(db)
	}

	return ii.Insert(db)
}

// Delete deletes the ImmunotherapyInterval from the database.
func (ii *ImmunotherapyInterval) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ii._exists {
		return nil
	}

	// if deleted, bail
	if ii._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.immunotherapy_intervals WHERE id = ?`

	// run query
	XOLog(sqlstr, ii.ID)
	_, err = db.Exec(sqlstr, ii.ID)
	if err != nil {
		return err
	}

	// set deleted
	ii._deleted = true

	return nil
}

// ImmunotherapyVial returns the ImmunotherapyVial associated with the ImmunotherapyInterval's ImmunotherapyVialID (immunotherapy_vial_id).
//
// Generated from foreign key 'fk_interval_vial_id'.
func (ii *ImmunotherapyInterval) ImmunotherapyVial(db XODB) (*ImmunotherapyVial, error) {
	return ImmunotherapyVialByID(db, ii.ImmunotherapyVialID)
}

// ImmunotherapyIntervalsByImmunotherapyVialID retrieves a row from 'AllergyNew.immunotherapy_intervals' as a ImmunotherapyInterval.
//
// Generated from index 'fk_interval_vial_id'.
func ImmunotherapyIntervalsByImmunotherapyVialID(db XODB, immunotherapyVialID uint) ([]*ImmunotherapyInterval, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, immunotherapy_vial_id, interval_dosage, updated_by, updated ` +
		`FROM AllergyNew.immunotherapy_intervals ` +
		`WHERE immunotherapy_vial_id = ?`

	// run query
	XOLog(sqlstr, immunotherapyVialID)
	q, err := db.Query(sqlstr, immunotherapyVialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ImmunotherapyInterval{}
	for q.Next() {
		ii := ImmunotherapyInterval{
			_exists: true,
		}

		// scan
		err = q.Scan(&ii.ID, &ii.ImmunotherapyVialID, &ii.IntervalDosage, &ii.UpdatedBy, &ii.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ii)
	}

	return res, nil
}

// ImmunotherapyIntervalByID retrieves a row from 'AllergyNew.immunotherapy_intervals' as a ImmunotherapyInterval.
//
// Generated from index 'immunotherapy_intervals_id_pkey'.
func ImmunotherapyIntervalByID(db XODB, id uint) (*ImmunotherapyInterval, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, immunotherapy_vial_id, interval_dosage, updated_by, updated ` +
		`FROM AllergyNew.immunotherapy_intervals ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ii := ImmunotherapyInterval{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ii.ID, &ii.ImmunotherapyVialID, &ii.IntervalDosage, &ii.UpdatedBy, &ii.Updated)
	if err != nil {
		return nil, err
	}

	return &ii, nil
}
