// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// FormulaVial represents a row from 'AllergyNew.formula_vials'.
type FormulaVial struct {
	ID               uint            `json:"id"`                // id
	FormulaID        sql.NullInt64   `json:"formula_id"`        // formula_id
	VialTypeID       sql.NullInt64   `json:"vial_type_id"`      // vial_type_id
	ScheduleType     sql.NullInt64   `json:"schedule_type"`     // schedule_type
	Name             sql.NullString  `json:"name"`              // name
	Volume           float32         `json:"volume"`            // volume
	Sweetener        sql.NullFloat64 `json:"sweetener"`         // sweetener
	StartingDilution sql.NullString  `json:"starting_dilution"` // starting_dilution
	StartingDosage   sql.NullString  `json:"starting_dosage"`   // starting_dosage
	CurrentDilution  sql.NullString  `json:"current_dilution"`  // current_dilution
	CurrentDosage    sql.NullString  `json:"current_dosage"`    // current_dosage
	Immunotherapy    sql.NullInt64   `json:"immunotherapy"`     // immunotherapy
	Status           Status          `json:"status"`            // status
	Order            sql.NullInt64   `json:"order"`             // order
	UpdatedBy        sql.NullInt64   `json:"updated_by"`        // updated_by
	Updated          time.Time       `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FormulaVial exists in the database.
func (fv *FormulaVial) Exists() bool {
	return fv._exists
}

// Deleted provides information if the FormulaVial has been deleted from the database.
func (fv *FormulaVial) Deleted() bool {
	return fv._deleted
}

// Insert inserts the FormulaVial to the database.
func (fv *FormulaVial) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fv._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.formula_vials (` +
		`formula_id, vial_type_id, schedule_type, name, volume, sweetener, starting_dilution, starting_dosage, current_dilution, current_dosage, immunotherapy, status, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fv.FormulaID, fv.VialTypeID, fv.ScheduleType, fv.Name, fv.Volume, fv.Sweetener, fv.StartingDilution, fv.StartingDosage, fv.CurrentDilution, fv.CurrentDosage, fv.Immunotherapy, fv.Status, fv.Order, fv.UpdatedBy, fv.Updated)
	res, err := db.Exec(sqlstr, fv.FormulaID, fv.VialTypeID, fv.ScheduleType, fv.Name, fv.Volume, fv.Sweetener, fv.StartingDilution, fv.StartingDosage, fv.CurrentDilution, fv.CurrentDosage, fv.Immunotherapy, fv.Status, fv.Order, fv.UpdatedBy, fv.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fv.ID = uint(id)
	fv._exists = true

	return nil
}

// Update updates the FormulaVial in the database.
func (fv *FormulaVial) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fv._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fv._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.formula_vials SET ` +
		`formula_id = ?, vial_type_id = ?, schedule_type = ?, name = ?, volume = ?, sweetener = ?, starting_dilution = ?, starting_dosage = ?, current_dilution = ?, current_dosage = ?, immunotherapy = ?, status = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, fv.FormulaID, fv.VialTypeID, fv.ScheduleType, fv.Name, fv.Volume, fv.Sweetener, fv.StartingDilution, fv.StartingDosage, fv.CurrentDilution, fv.CurrentDosage, fv.Immunotherapy, fv.Status, fv.Order, fv.UpdatedBy, fv.Updated, fv.ID)
	_, err = db.Exec(sqlstr, fv.FormulaID, fv.VialTypeID, fv.ScheduleType, fv.Name, fv.Volume, fv.Sweetener, fv.StartingDilution, fv.StartingDosage, fv.CurrentDilution, fv.CurrentDosage, fv.Immunotherapy, fv.Status, fv.Order, fv.UpdatedBy, fv.Updated, fv.ID)
	return err
}

// Save saves the FormulaVial to the database.
func (fv *FormulaVial) Save(db XODB) error {
	if fv.Exists() {
		return fv.Update(db)
	}

	return fv.Insert(db)
}

// Delete deletes the FormulaVial from the database.
func (fv *FormulaVial) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fv._exists {
		return nil
	}

	// if deleted, bail
	if fv._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.formula_vials WHERE id = ?`

	// run query
	XOLog(sqlstr, fv.ID)
	_, err = db.Exec(sqlstr, fv.ID)
	if err != nil {
		return err
	}

	// set deleted
	fv._deleted = true

	return nil
}

// Formula returns the Formula associated with the FormulaVial's FormulaID (formula_id).
//
// Generated from foreign key 'formula_vials_formula'.
func (fv *FormulaVial) Formula(db XODB) (*Formula, error) {
	return FormulaByID(db, uint(fv.FormulaID.Int64))
}

// User returns the User associated with the FormulaVial's UpdatedBy (updated_by).
//
// Generated from foreign key 'formula_vials_updated'.
func (fv *FormulaVial) User(db XODB) (*User, error) {
	return UserByID(db, uint(fv.UpdatedBy.Int64))
}

// VialType returns the VialType associated with the FormulaVial's VialTypeID (vial_type_id).
//
// Generated from foreign key 'formula_vials_vial_type'.
func (fv *FormulaVial) VialType(db XODB) (*VialType, error) {
	return VialTypeByID(db, uint(fv.VialTypeID.Int64))
}

// FormulaVialsByFormulaID retrieves a row from 'AllergyNew.formula_vials' as a FormulaVial.
//
// Generated from index 'Formulas'.
func FormulaVialsByFormulaID(db XODB, formulaID sql.NullInt64) ([]*FormulaVial, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, vial_type_id, schedule_type, name, volume, sweetener, starting_dilution, starting_dosage, current_dilution, current_dosage, immunotherapy, status, order, updated_by, updated ` +
		`FROM AllergyNew.formula_vials ` +
		`WHERE formula_id = ?`

	// run query
	XOLog(sqlstr, formulaID)
	q, err := db.Query(sqlstr, formulaID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaVial{}
	for q.Next() {
		fv := FormulaVial{
			_exists: true,
		}

		// scan
		err = q.Scan(&fv.ID, &fv.FormulaID, &fv.VialTypeID, &fv.ScheduleType, &fv.Name, &fv.Volume, &fv.Sweetener, &fv.StartingDilution, &fv.StartingDosage, &fv.CurrentDilution, &fv.CurrentDosage, &fv.Immunotherapy, &fv.Status, &fv.Order, &fv.UpdatedBy, &fv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fv)
	}

	return res, nil
}

// FormulaVialsByVialTypeID retrieves a row from 'AllergyNew.formula_vials' as a FormulaVial.
//
// Generated from index 'Vial_Types'.
func FormulaVialsByVialTypeID(db XODB, vialTypeID sql.NullInt64) ([]*FormulaVial, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, vial_type_id, schedule_type, name, volume, sweetener, starting_dilution, starting_dosage, current_dilution, current_dosage, immunotherapy, status, order, updated_by, updated ` +
		`FROM AllergyNew.formula_vials ` +
		`WHERE vial_type_id = ?`

	// run query
	XOLog(sqlstr, vialTypeID)
	q, err := db.Query(sqlstr, vialTypeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaVial{}
	for q.Next() {
		fv := FormulaVial{
			_exists: true,
		}

		// scan
		err = q.Scan(&fv.ID, &fv.FormulaID, &fv.VialTypeID, &fv.ScheduleType, &fv.Name, &fv.Volume, &fv.Sweetener, &fv.StartingDilution, &fv.StartingDosage, &fv.CurrentDilution, &fv.CurrentDosage, &fv.Immunotherapy, &fv.Status, &fv.Order, &fv.UpdatedBy, &fv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fv)
	}

	return res, nil
}

// FormulaVialByID retrieves a row from 'AllergyNew.formula_vials' as a FormulaVial.
//
// Generated from index 'formula_vials_id_pkey'.
func FormulaVialByID(db XODB, id uint) (*FormulaVial, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, vial_type_id, schedule_type, name, volume, sweetener, starting_dilution, starting_dosage, current_dilution, current_dosage, immunotherapy, status, order, updated_by, updated ` +
		`FROM AllergyNew.formula_vials ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fv := FormulaVial{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fv.ID, &fv.FormulaID, &fv.VialTypeID, &fv.ScheduleType, &fv.Name, &fv.Volume, &fv.Sweetener, &fv.StartingDilution, &fv.StartingDosage, &fv.CurrentDilution, &fv.CurrentDosage, &fv.Immunotherapy, &fv.Status, &fv.Order, &fv.UpdatedBy, &fv.Updated)
	if err != nil {
		return nil, err
	}

	return &fv, nil
}

// FormulaVialsByUpdatedBy retrieves a row from 'AllergyNew.formula_vials' as a FormulaVial.
//
// Generated from index 'formula_vials_updated'.
func FormulaVialsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*FormulaVial, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, vial_type_id, schedule_type, name, volume, sweetener, starting_dilution, starting_dosage, current_dilution, current_dosage, immunotherapy, status, order, updated_by, updated ` +
		`FROM AllergyNew.formula_vials ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaVial{}
	for q.Next() {
		fv := FormulaVial{
			_exists: true,
		}

		// scan
		err = q.Scan(&fv.ID, &fv.FormulaID, &fv.VialTypeID, &fv.ScheduleType, &fv.Name, &fv.Volume, &fv.Sweetener, &fv.StartingDilution, &fv.StartingDosage, &fv.CurrentDilution, &fv.CurrentDosage, &fv.Immunotherapy, &fv.Status, &fv.Order, &fv.UpdatedBy, &fv.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fv)
	}

	return res, nil
}
