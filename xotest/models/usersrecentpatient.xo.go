// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// UsersRecentPatient represents a row from 'AllergyNew.users_recent_patients'.
type UsersRecentPatient struct {
	ID          uint           `json:"id"`           // id
	UserID      sql.NullInt64  `json:"user_id"`      // user_id
	PatientID   sql.NullInt64  `json:"patient_id"`   // patient_id
	PatientName sql.NullString `json:"patient_name"` // patient_name
	Order       sql.NullInt64  `json:"order"`        // order
	UpdatedBy   sql.NullInt64  `json:"updated_by"`   // updated_by
	Updated     time.Time      `json:"updated"`      // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UsersRecentPatient exists in the database.
func (urp *UsersRecentPatient) Exists() bool {
	return urp._exists
}

// Deleted provides information if the UsersRecentPatient has been deleted from the database.
func (urp *UsersRecentPatient) Deleted() bool {
	return urp._deleted
}

// Insert inserts the UsersRecentPatient to the database.
func (urp *UsersRecentPatient) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if urp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.users_recent_patients (` +
		`user_id, patient_id, patient_name, order, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, urp.UserID, urp.PatientID, urp.PatientName, urp.Order, urp.UpdatedBy, urp.Updated)
	res, err := db.Exec(sqlstr, urp.UserID, urp.PatientID, urp.PatientName, urp.Order, urp.UpdatedBy, urp.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	urp.ID = uint(id)
	urp._exists = true

	return nil
}

// Update updates the UsersRecentPatient in the database.
func (urp *UsersRecentPatient) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !urp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if urp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.users_recent_patients SET ` +
		`user_id = ?, patient_id = ?, patient_name = ?, order = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, urp.UserID, urp.PatientID, urp.PatientName, urp.Order, urp.UpdatedBy, urp.Updated, urp.ID)
	_, err = db.Exec(sqlstr, urp.UserID, urp.PatientID, urp.PatientName, urp.Order, urp.UpdatedBy, urp.Updated, urp.ID)
	return err
}

// Save saves the UsersRecentPatient to the database.
func (urp *UsersRecentPatient) Save(db XODB) error {
	if urp.Exists() {
		return urp.Update(db)
	}

	return urp.Insert(db)
}

// Delete deletes the UsersRecentPatient from the database.
func (urp *UsersRecentPatient) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !urp._exists {
		return nil
	}

	// if deleted, bail
	if urp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.users_recent_patients WHERE id = ?`

	// run query
	XOLog(sqlstr, urp.ID)
	_, err = db.Exec(sqlstr, urp.ID)
	if err != nil {
		return err
	}

	// set deleted
	urp._deleted = true

	return nil
}

// Patient returns the Patient associated with the UsersRecentPatient's PatientID (patient_id).
//
// Generated from foreign key 'users_recent_patients_patient'.
func (urp *UsersRecentPatient) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(urp.PatientID.Int64))
}

// UserByUpdatedBy returns the User associated with the UsersRecentPatient's UpdatedBy (updated_by).
//
// Generated from foreign key 'users_recent_patients_updated'.
func (urp *UsersRecentPatient) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(urp.UpdatedBy.Int64))
}

// UserByUserID returns the User associated with the UsersRecentPatient's UserID (user_id).
//
// Generated from foreign key 'users_recent_patients_user'.
func (urp *UsersRecentPatient) UserByUserID(db XODB) (*User, error) {
	return UserByID(db, uint(urp.UserID.Int64))
}

// UsersRecentPatientsByPatientID retrieves a row from 'AllergyNew.users_recent_patients' as a UsersRecentPatient.
//
// Generated from index 'Patients'.
func UsersRecentPatientsByPatientID(db XODB, patientID sql.NullInt64) ([]*UsersRecentPatient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, patient_id, patient_name, order, updated_by, updated ` +
		`FROM AllergyNew.users_recent_patients ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UsersRecentPatient{}
	for q.Next() {
		urp := UsersRecentPatient{
			_exists: true,
		}

		// scan
		err = q.Scan(&urp.ID, &urp.UserID, &urp.PatientID, &urp.PatientName, &urp.Order, &urp.UpdatedBy, &urp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &urp)
	}

	return res, nil
}

// UsersRecentPatientsByUserID retrieves a row from 'AllergyNew.users_recent_patients' as a UsersRecentPatient.
//
// Generated from index 'Users'.
func UsersRecentPatientsByUserID(db XODB, userID sql.NullInt64) ([]*UsersRecentPatient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, patient_id, patient_name, order, updated_by, updated ` +
		`FROM AllergyNew.users_recent_patients ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UsersRecentPatient{}
	for q.Next() {
		urp := UsersRecentPatient{
			_exists: true,
		}

		// scan
		err = q.Scan(&urp.ID, &urp.UserID, &urp.PatientID, &urp.PatientName, &urp.Order, &urp.UpdatedBy, &urp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &urp)
	}

	return res, nil
}

// UsersRecentPatientByID retrieves a row from 'AllergyNew.users_recent_patients' as a UsersRecentPatient.
//
// Generated from index 'users_recent_patients_id_pkey'.
func UsersRecentPatientByID(db XODB, id uint) (*UsersRecentPatient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, patient_id, patient_name, order, updated_by, updated ` +
		`FROM AllergyNew.users_recent_patients ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	urp := UsersRecentPatient{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&urp.ID, &urp.UserID, &urp.PatientID, &urp.PatientName, &urp.Order, &urp.UpdatedBy, &urp.Updated)
	if err != nil {
		return nil, err
	}

	return &urp, nil
}

// UsersRecentPatientsByUpdatedBy retrieves a row from 'AllergyNew.users_recent_patients' as a UsersRecentPatient.
//
// Generated from index 'users_recent_patients_updated'.
func UsersRecentPatientsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*UsersRecentPatient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, patient_id, patient_name, order, updated_by, updated ` +
		`FROM AllergyNew.users_recent_patients ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UsersRecentPatient{}
	for q.Next() {
		urp := UsersRecentPatient{
			_exists: true,
		}

		// scan
		err = q.Scan(&urp.ID, &urp.UserID, &urp.PatientID, &urp.PatientName, &urp.Order, &urp.UpdatedBy, &urp.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &urp)
	}

	return res, nil
}
