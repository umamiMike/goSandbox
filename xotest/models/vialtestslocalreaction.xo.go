// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// VialTestsLocalReaction represents a row from 'AllergyNew.vial_tests_local_reactions'.
type VialTestsLocalReaction struct {
	ID          uint           `json:"id"`           // id
	VialTestID  sql.NullInt64  `json:"vial_test_id"` // vial_test_id
	Size        sql.NullString `json:"size"`         // size
	Duration    sql.NullString `json:"duration"`     // duration
	DateAdded   mysql.NullTime `json:"date_added"`   // date_added
	AddedBy     sql.NullInt64  `json:"added_by"`     // added_by
	DateRemoved mysql.NullTime `json:"date_removed"` // date_removed
	RemovedBy   sql.NullInt64  `json:"removed_by"`   // removed_by
	UpdatedBy   sql.NullInt64  `json:"updated_by"`   // updated_by
	Updated     time.Time      `json:"updated"`      // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialTestsLocalReaction exists in the database.
func (vtlr *VialTestsLocalReaction) Exists() bool {
	return vtlr._exists
}

// Deleted provides information if the VialTestsLocalReaction has been deleted from the database.
func (vtlr *VialTestsLocalReaction) Deleted() bool {
	return vtlr._deleted
}

// Insert inserts the VialTestsLocalReaction to the database.
func (vtlr *VialTestsLocalReaction) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vtlr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_tests_local_reactions (` +
		`vial_test_id, size, duration, date_added, added_by, date_removed, removed_by, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vtlr.VialTestID, vtlr.Size, vtlr.Duration, vtlr.DateAdded, vtlr.AddedBy, vtlr.DateRemoved, vtlr.RemovedBy, vtlr.UpdatedBy, vtlr.Updated)
	res, err := db.Exec(sqlstr, vtlr.VialTestID, vtlr.Size, vtlr.Duration, vtlr.DateAdded, vtlr.AddedBy, vtlr.DateRemoved, vtlr.RemovedBy, vtlr.UpdatedBy, vtlr.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vtlr.ID = uint(id)
	vtlr._exists = true

	return nil
}

// Update updates the VialTestsLocalReaction in the database.
func (vtlr *VialTestsLocalReaction) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vtlr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vtlr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_tests_local_reactions SET ` +
		`vial_test_id = ?, size = ?, duration = ?, date_added = ?, added_by = ?, date_removed = ?, removed_by = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vtlr.VialTestID, vtlr.Size, vtlr.Duration, vtlr.DateAdded, vtlr.AddedBy, vtlr.DateRemoved, vtlr.RemovedBy, vtlr.UpdatedBy, vtlr.Updated, vtlr.ID)
	_, err = db.Exec(sqlstr, vtlr.VialTestID, vtlr.Size, vtlr.Duration, vtlr.DateAdded, vtlr.AddedBy, vtlr.DateRemoved, vtlr.RemovedBy, vtlr.UpdatedBy, vtlr.Updated, vtlr.ID)
	return err
}

// Save saves the VialTestsLocalReaction to the database.
func (vtlr *VialTestsLocalReaction) Save(db XODB) error {
	if vtlr.Exists() {
		return vtlr.Update(db)
	}

	return vtlr.Insert(db)
}

// Delete deletes the VialTestsLocalReaction from the database.
func (vtlr *VialTestsLocalReaction) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vtlr._exists {
		return nil
	}

	// if deleted, bail
	if vtlr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_tests_local_reactions WHERE id = ?`

	// run query
	XOLog(sqlstr, vtlr.ID)
	_, err = db.Exec(sqlstr, vtlr.ID)
	if err != nil {
		return err
	}

	// set deleted
	vtlr._deleted = true

	return nil
}

// VialTest returns the VialTest associated with the VialTestsLocalReaction's VialTestID (vial_test_id).
//
// Generated from foreign key 'vial_tests_local_reactions_ibfk_1'.
func (vtlr *VialTestsLocalReaction) VialTest(db XODB) (*VialTest, error) {
	return VialTestByID(db, uint(vtlr.VialTestID.Int64))
}

// UserByAddedBy returns the User associated with the VialTestsLocalReaction's AddedBy (added_by).
//
// Generated from foreign key 'vial_tests_local_reactions_ibfk_2'.
func (vtlr *VialTestsLocalReaction) UserByAddedBy(db XODB) (*User, error) {
	return UserByID(db, uint(vtlr.AddedBy.Int64))
}

// UserByRemovedBy returns the User associated with the VialTestsLocalReaction's RemovedBy (removed_by).
//
// Generated from foreign key 'vial_tests_local_reactions_ibfk_3'.
func (vtlr *VialTestsLocalReaction) UserByRemovedBy(db XODB) (*User, error) {
	return UserByID(db, uint(vtlr.RemovedBy.Int64))
}

// UserByUpdatedBy returns the User associated with the VialTestsLocalReaction's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_tests_local_reactions_ibfk_4'.
func (vtlr *VialTestsLocalReaction) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(vtlr.UpdatedBy.Int64))
}

// VialTestsLocalReactionsByAddedBy retrieves a row from 'AllergyNew.vial_tests_local_reactions' as a VialTestsLocalReaction.
//
// Generated from index 'AddedBy'.
func VialTestsLocalReactionsByAddedBy(db XODB, addedBy sql.NullInt64) ([]*VialTestsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_test_id, size, duration, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.vial_tests_local_reactions ` +
		`WHERE added_by = ?`

	// run query
	XOLog(sqlstr, addedBy)
	q, err := db.Query(sqlstr, addedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialTestsLocalReaction{}
	for q.Next() {
		vtlr := VialTestsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&vtlr.ID, &vtlr.VialTestID, &vtlr.Size, &vtlr.Duration, &vtlr.DateAdded, &vtlr.AddedBy, &vtlr.DateRemoved, &vtlr.RemovedBy, &vtlr.UpdatedBy, &vtlr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vtlr)
	}

	return res, nil
}

// VialTestsLocalReactionsByRemovedBy retrieves a row from 'AllergyNew.vial_tests_local_reactions' as a VialTestsLocalReaction.
//
// Generated from index 'RemovedBy'.
func VialTestsLocalReactionsByRemovedBy(db XODB, removedBy sql.NullInt64) ([]*VialTestsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_test_id, size, duration, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.vial_tests_local_reactions ` +
		`WHERE removed_by = ?`

	// run query
	XOLog(sqlstr, removedBy)
	q, err := db.Query(sqlstr, removedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialTestsLocalReaction{}
	for q.Next() {
		vtlr := VialTestsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&vtlr.ID, &vtlr.VialTestID, &vtlr.Size, &vtlr.Duration, &vtlr.DateAdded, &vtlr.AddedBy, &vtlr.DateRemoved, &vtlr.RemovedBy, &vtlr.UpdatedBy, &vtlr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vtlr)
	}

	return res, nil
}

// VialTestsLocalReactionsByUpdatedBy retrieves a row from 'AllergyNew.vial_tests_local_reactions' as a VialTestsLocalReaction.
//
// Generated from index 'UpdatedBy'.
func VialTestsLocalReactionsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialTestsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_test_id, size, duration, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.vial_tests_local_reactions ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialTestsLocalReaction{}
	for q.Next() {
		vtlr := VialTestsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&vtlr.ID, &vtlr.VialTestID, &vtlr.Size, &vtlr.Duration, &vtlr.DateAdded, &vtlr.AddedBy, &vtlr.DateRemoved, &vtlr.RemovedBy, &vtlr.UpdatedBy, &vtlr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vtlr)
	}

	return res, nil
}

// VialTestsLocalReactionsByVialTestID retrieves a row from 'AllergyNew.vial_tests_local_reactions' as a VialTestsLocalReaction.
//
// Generated from index 'VialTestID'.
func VialTestsLocalReactionsByVialTestID(db XODB, vialTestID sql.NullInt64) ([]*VialTestsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_test_id, size, duration, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.vial_tests_local_reactions ` +
		`WHERE vial_test_id = ?`

	// run query
	XOLog(sqlstr, vialTestID)
	q, err := db.Query(sqlstr, vialTestID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialTestsLocalReaction{}
	for q.Next() {
		vtlr := VialTestsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&vtlr.ID, &vtlr.VialTestID, &vtlr.Size, &vtlr.Duration, &vtlr.DateAdded, &vtlr.AddedBy, &vtlr.DateRemoved, &vtlr.RemovedBy, &vtlr.UpdatedBy, &vtlr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vtlr)
	}

	return res, nil
}

// VialTestsLocalReactionByID retrieves a row from 'AllergyNew.vial_tests_local_reactions' as a VialTestsLocalReaction.
//
// Generated from index 'vial_tests_local_reactions_id_pkey'.
func VialTestsLocalReactionByID(db XODB, id uint) (*VialTestsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_test_id, size, duration, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.vial_tests_local_reactions ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vtlr := VialTestsLocalReaction{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vtlr.ID, &vtlr.VialTestID, &vtlr.Size, &vtlr.Duration, &vtlr.DateAdded, &vtlr.AddedBy, &vtlr.DateRemoved, &vtlr.RemovedBy, &vtlr.UpdatedBy, &vtlr.Updated)
	if err != nil {
		return nil, err
	}

	return &vtlr, nil
}
