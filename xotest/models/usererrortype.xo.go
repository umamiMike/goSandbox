// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// UserErrorType represents a row from 'AllergyNew.user_error_types'.
type UserErrorType struct {
	ID        uint           `json:"id"`         // id
	Name      sql.NullString `json:"name"`       // name
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserErrorType exists in the database.
func (uet *UserErrorType) Exists() bool {
	return uet._exists
}

// Deleted provides information if the UserErrorType has been deleted from the database.
func (uet *UserErrorType) Deleted() bool {
	return uet._deleted
}

// Insert inserts the UserErrorType to the database.
func (uet *UserErrorType) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if uet._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.user_error_types (` +
		`name, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, uet.Name, uet.UpdatedBy, uet.Updated)
	res, err := db.Exec(sqlstr, uet.Name, uet.UpdatedBy, uet.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	uet.ID = uint(id)
	uet._exists = true

	return nil
}

// Update updates the UserErrorType in the database.
func (uet *UserErrorType) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uet._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if uet._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.user_error_types SET ` +
		`name = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, uet.Name, uet.UpdatedBy, uet.Updated, uet.ID)
	_, err = db.Exec(sqlstr, uet.Name, uet.UpdatedBy, uet.Updated, uet.ID)
	return err
}

// Save saves the UserErrorType to the database.
func (uet *UserErrorType) Save(db XODB) error {
	if uet.Exists() {
		return uet.Update(db)
	}

	return uet.Insert(db)
}

// Delete deletes the UserErrorType from the database.
func (uet *UserErrorType) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uet._exists {
		return nil
	}

	// if deleted, bail
	if uet._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.user_error_types WHERE id = ?`

	// run query
	XOLog(sqlstr, uet.ID)
	_, err = db.Exec(sqlstr, uet.ID)
	if err != nil {
		return err
	}

	// set deleted
	uet._deleted = true

	return nil
}

// UserErrorTypeByID retrieves a row from 'AllergyNew.user_error_types' as a UserErrorType.
//
// Generated from index 'user_error_types_id_pkey'.
func UserErrorTypeByID(db XODB, id uint) (*UserErrorType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, updated_by, updated ` +
		`FROM AllergyNew.user_error_types ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	uet := UserErrorType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&uet.ID, &uet.Name, &uet.UpdatedBy, &uet.Updated)
	if err != nil {
		return nil, err
	}

	return &uet, nil
}
