// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// ProtoSetting represents a row from 'AllergyNew.proto_settings'.
type ProtoSetting struct {
	ID                uint            `json:"id"`                  // id
	PracticeID        sql.NullInt64   `json:"practice_id"`         // practice_id
	TargetScore       sql.NullFloat64 `json:"target_score"`        // target_score
	TargetCount       sql.NullInt64   `json:"target_count"`        // target_count
	QuestionValue     sql.NullFloat64 `json:"question_value"`      // question_value
	QuestionNullValue sql.NullInt64   `json:"question_null_value"` // question_null_value
	Formula           sql.NullString  `json:"formula"`             // formula
	UpdatedBy         sql.NullInt64   `json:"updated_by"`          // updated_by
	Updated           time.Time       `json:"updated"`             // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProtoSetting exists in the database.
func (ps *ProtoSetting) Exists() bool {
	return ps._exists
}

// Deleted provides information if the ProtoSetting has been deleted from the database.
func (ps *ProtoSetting) Deleted() bool {
	return ps._deleted
}

// Insert inserts the ProtoSetting to the database.
func (ps *ProtoSetting) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ps._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.proto_settings (` +
		`practice_id, target_score, target_count, question_value, question_null_value, formula, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ps.PracticeID, ps.TargetScore, ps.TargetCount, ps.QuestionValue, ps.QuestionNullValue, ps.Formula, ps.UpdatedBy, ps.Updated)
	res, err := db.Exec(sqlstr, ps.PracticeID, ps.TargetScore, ps.TargetCount, ps.QuestionValue, ps.QuestionNullValue, ps.Formula, ps.UpdatedBy, ps.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ps.ID = uint(id)
	ps._exists = true

	return nil
}

// Update updates the ProtoSetting in the database.
func (ps *ProtoSetting) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ps._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ps._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.proto_settings SET ` +
		`practice_id = ?, target_score = ?, target_count = ?, question_value = ?, question_null_value = ?, formula = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ps.PracticeID, ps.TargetScore, ps.TargetCount, ps.QuestionValue, ps.QuestionNullValue, ps.Formula, ps.UpdatedBy, ps.Updated, ps.ID)
	_, err = db.Exec(sqlstr, ps.PracticeID, ps.TargetScore, ps.TargetCount, ps.QuestionValue, ps.QuestionNullValue, ps.Formula, ps.UpdatedBy, ps.Updated, ps.ID)
	return err
}

// Save saves the ProtoSetting to the database.
func (ps *ProtoSetting) Save(db XODB) error {
	if ps.Exists() {
		return ps.Update(db)
	}

	return ps.Insert(db)
}

// Delete deletes the ProtoSetting from the database.
func (ps *ProtoSetting) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ps._exists {
		return nil
	}

	// if deleted, bail
	if ps._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.proto_settings WHERE id = ?`

	// run query
	XOLog(sqlstr, ps.ID)
	_, err = db.Exec(sqlstr, ps.ID)
	if err != nil {
		return err
	}

	// set deleted
	ps._deleted = true

	return nil
}

// User returns the User associated with the ProtoSetting's UpdatedBy (updated_by).
//
// Generated from foreign key 'proto_settings_updated'.
func (ps *ProtoSetting) User(db XODB) (*User, error) {
	return UserByID(db, uint(ps.UpdatedBy.Int64))
}

// ProtoSettingsByPracticeID retrieves a row from 'AllergyNew.proto_settings' as a ProtoSetting.
//
// Generated from index 'Practices'.
func ProtoSettingsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*ProtoSetting, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, target_score, target_count, question_value, question_null_value, formula, updated_by, updated ` +
		`FROM AllergyNew.proto_settings ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoSetting{}
	for q.Next() {
		ps := ProtoSetting{
			_exists: true,
		}

		// scan
		err = q.Scan(&ps.ID, &ps.PracticeID, &ps.TargetScore, &ps.TargetCount, &ps.QuestionValue, &ps.QuestionNullValue, &ps.Formula, &ps.UpdatedBy, &ps.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ps)
	}

	return res, nil
}

// ProtoSettingByID retrieves a row from 'AllergyNew.proto_settings' as a ProtoSetting.
//
// Generated from index 'proto_settings_id_pkey'.
func ProtoSettingByID(db XODB, id uint) (*ProtoSetting, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, target_score, target_count, question_value, question_null_value, formula, updated_by, updated ` +
		`FROM AllergyNew.proto_settings ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ps := ProtoSetting{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ps.ID, &ps.PracticeID, &ps.TargetScore, &ps.TargetCount, &ps.QuestionValue, &ps.QuestionNullValue, &ps.Formula, &ps.UpdatedBy, &ps.Updated)
	if err != nil {
		return nil, err
	}

	return &ps, nil
}

// ProtoSettingsByUpdatedBy retrieves a row from 'AllergyNew.proto_settings' as a ProtoSetting.
//
// Generated from index 'proto_settings_updated'.
func ProtoSettingsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*ProtoSetting, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, target_score, target_count, question_value, question_null_value, formula, updated_by, updated ` +
		`FROM AllergyNew.proto_settings ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProtoSetting{}
	for q.Next() {
		ps := ProtoSetting{
			_exists: true,
		}

		// scan
		err = q.Scan(&ps.ID, &ps.PracticeID, &ps.TargetScore, &ps.TargetCount, &ps.QuestionValue, &ps.QuestionNullValue, &ps.Formula, &ps.UpdatedBy, &ps.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ps)
	}

	return res, nil
}
