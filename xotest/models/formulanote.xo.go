// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// FormulaNote represents a row from 'AllergyNew.formula_notes'.
type FormulaNote struct {
	ID        uint           `json:"id"`         // id
	FormulaID sql.NullInt64  `json:"formula_id"` // formula_id
	PatientID sql.NullInt64  `json:"patient_id"` // patient_id
	Note      sql.NullString `json:"note"`       // note
	DateAdded mysql.NullTime `json:"date_added"` // date_added
	AddedBy   sql.NullInt64  `json:"added_by"`   // added_by
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FormulaNote exists in the database.
func (fn *FormulaNote) Exists() bool {
	return fn._exists
}

// Deleted provides information if the FormulaNote has been deleted from the database.
func (fn *FormulaNote) Deleted() bool {
	return fn._deleted
}

// Insert inserts the FormulaNote to the database.
func (fn *FormulaNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.formula_notes (` +
		`formula_id, patient_id, note, date_added, added_by, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fn.FormulaID, fn.PatientID, fn.Note, fn.DateAdded, fn.AddedBy, fn.UpdatedBy, fn.Updated)
	res, err := db.Exec(sqlstr, fn.FormulaID, fn.PatientID, fn.Note, fn.DateAdded, fn.AddedBy, fn.UpdatedBy, fn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fn.ID = uint(id)
	fn._exists = true

	return nil
}

// Update updates the FormulaNote in the database.
func (fn *FormulaNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.formula_notes SET ` +
		`formula_id = ?, patient_id = ?, note = ?, date_added = ?, added_by = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, fn.FormulaID, fn.PatientID, fn.Note, fn.DateAdded, fn.AddedBy, fn.UpdatedBy, fn.Updated, fn.ID)
	_, err = db.Exec(sqlstr, fn.FormulaID, fn.PatientID, fn.Note, fn.DateAdded, fn.AddedBy, fn.UpdatedBy, fn.Updated, fn.ID)
	return err
}

// Save saves the FormulaNote to the database.
func (fn *FormulaNote) Save(db XODB) error {
	if fn.Exists() {
		return fn.Update(db)
	}

	return fn.Insert(db)
}

// Delete deletes the FormulaNote from the database.
func (fn *FormulaNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fn._exists {
		return nil
	}

	// if deleted, bail
	if fn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.formula_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, fn.ID)
	_, err = db.Exec(sqlstr, fn.ID)
	if err != nil {
		return err
	}

	// set deleted
	fn._deleted = true

	return nil
}

// UserByAddedBy returns the User associated with the FormulaNote's AddedBy (added_by).
//
// Generated from foreign key 'formula_notes_added_by'.
func (fn *FormulaNote) UserByAddedBy(db XODB) (*User, error) {
	return UserByID(db, uint(fn.AddedBy.Int64))
}

// Formula returns the Formula associated with the FormulaNote's FormulaID (formula_id).
//
// Generated from foreign key 'formula_notes_formula'.
func (fn *FormulaNote) Formula(db XODB) (*Formula, error) {
	return FormulaByID(db, uint(fn.FormulaID.Int64))
}

// Patient returns the Patient associated with the FormulaNote's PatientID (patient_id).
//
// Generated from foreign key 'formula_notes_patient'.
func (fn *FormulaNote) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(fn.PatientID.Int64))
}

// UserByUpdatedBy returns the User associated with the FormulaNote's UpdatedBy (updated_by).
//
// Generated from foreign key 'formula_notes_updated'.
func (fn *FormulaNote) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(fn.UpdatedBy.Int64))
}

// FormulaNotesByFormulaID retrieves a row from 'AllergyNew.formula_notes' as a FormulaNote.
//
// Generated from index 'Formulas'.
func FormulaNotesByFormulaID(db XODB, formulaID sql.NullInt64) ([]*FormulaNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, patient_id, note, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.formula_notes ` +
		`WHERE formula_id = ?`

	// run query
	XOLog(sqlstr, formulaID)
	q, err := db.Query(sqlstr, formulaID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaNote{}
	for q.Next() {
		fn := FormulaNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&fn.ID, &fn.FormulaID, &fn.PatientID, &fn.Note, &fn.DateAdded, &fn.AddedBy, &fn.UpdatedBy, &fn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fn)
	}

	return res, nil
}

// FormulaNotesByPatientID retrieves a row from 'AllergyNew.formula_notes' as a FormulaNote.
//
// Generated from index 'Patients'.
func FormulaNotesByPatientID(db XODB, patientID sql.NullInt64) ([]*FormulaNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, patient_id, note, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.formula_notes ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaNote{}
	for q.Next() {
		fn := FormulaNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&fn.ID, &fn.FormulaID, &fn.PatientID, &fn.Note, &fn.DateAdded, &fn.AddedBy, &fn.UpdatedBy, &fn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fn)
	}

	return res, nil
}

// FormulaNotesByAddedBy retrieves a row from 'AllergyNew.formula_notes' as a FormulaNote.
//
// Generated from index 'formula_notes_added_by'.
func FormulaNotesByAddedBy(db XODB, addedBy sql.NullInt64) ([]*FormulaNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, patient_id, note, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.formula_notes ` +
		`WHERE added_by = ?`

	// run query
	XOLog(sqlstr, addedBy)
	q, err := db.Query(sqlstr, addedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaNote{}
	for q.Next() {
		fn := FormulaNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&fn.ID, &fn.FormulaID, &fn.PatientID, &fn.Note, &fn.DateAdded, &fn.AddedBy, &fn.UpdatedBy, &fn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fn)
	}

	return res, nil
}

// FormulaNoteByID retrieves a row from 'AllergyNew.formula_notes' as a FormulaNote.
//
// Generated from index 'formula_notes_id_pkey'.
func FormulaNoteByID(db XODB, id uint) (*FormulaNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, patient_id, note, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.formula_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fn := FormulaNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fn.ID, &fn.FormulaID, &fn.PatientID, &fn.Note, &fn.DateAdded, &fn.AddedBy, &fn.UpdatedBy, &fn.Updated)
	if err != nil {
		return nil, err
	}

	return &fn, nil
}

// FormulaNotesByUpdatedBy retrieves a row from 'AllergyNew.formula_notes' as a FormulaNote.
//
// Generated from index 'formula_notes_updated'.
func FormulaNotesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*FormulaNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, formula_id, patient_id, note, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.formula_notes ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaNote{}
	for q.Next() {
		fn := FormulaNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&fn.ID, &fn.FormulaID, &fn.PatientID, &fn.Note, &fn.DateAdded, &fn.AddedBy, &fn.UpdatedBy, &fn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fn)
	}

	return res, nil
}
