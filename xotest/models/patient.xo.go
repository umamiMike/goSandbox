// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// Patient represents a row from 'AllergyNew.patients'.
type Patient struct {
	ID                     uint           `json:"id"`                       // id
	AllergyID              sql.NullString `json:"allergy_id"`               // allergy_id
	MixPracticeID          sql.NullInt64  `json:"mix_practice_id"`          // mix_practice_id
	MixLocationID          sql.NullInt64  `json:"mix_location_id"`          // mix_location_id
	ShotLocation           ShotLocation   `json:"shot_location"`            // shot_location
	ShotPracticeID         sql.NullInt64  `json:"shot_practice_id"`         // shot_practice_id
	ShotLocationID         sql.NullInt64  `json:"shot_location_id"`         // shot_location_id
	ShotOffsiteID          sql.NullInt64  `json:"shot_offsite_id"`          // shot_offsite_id
	PracticeID             sql.NullInt64  `json:"practice_id"`              // practice_id
	Firstname              sql.NullString `json:"firstname"`                // firstname
	Middlename             sql.NullString `json:"middlename"`               // middlename
	Lastname               sql.NullString `json:"lastname"`                 // lastname
	Address                sql.NullString `json:"address"`                  // address
	Address2               sql.NullString `json:"address2"`                 // address2
	City                   sql.NullString `json:"city"`                     // city
	State                  sql.NullString `json:"state"`                    // state
	Zip                    sql.NullString `json:"zip"`                      // zip
	Homephone              sql.NullString `json:"homephone"`                // homephone
	Cellphone              sql.NullString `json:"cellphone"`                // cellphone
	Dob                    mysql.NullTime `json:"dob"`                      // dob
	Gender                 sql.NullString `json:"gender"`                   // gender
	Email                  sql.NullString `json:"email"`                    // email
	Cpt                    sql.NullString `json:"cpt"`                      // cpt
	IsEmrPatient           int8           `json:"is_emr_patient"`           // is_emr_patient
	EpiPrescriptionDate    mysql.NullTime `json:"epi_prescription_date"`    // epi_prescription_date
	EpiExpirationDate      mysql.NullTime `json:"epi_expiration_date"`      // epi_expiration_date
	ShotInterval           sql.NullString `json:"shot_interval"`            // shot_interval
	CreationDate           time.Time      `json:"creation_date"`            // creation_date
	ReferralAcceptanceDate mysql.NullTime `json:"referral_acceptance_date"` // referral_acceptance_date
	ReferralDate           mysql.NullTime `json:"referral_date"`            // referral_date
	SignedForms            sql.NullString `json:"signed_forms"`             // signed_forms
	Asthmatic              sql.NullInt64  `json:"asthmatic"`                // asthmatic
	Medicare               sql.NullInt64  `json:"medicare"`                 // medicare
	LastOfficeVisit        mysql.NullTime `json:"last_office_visit"`        // last_office_visit
	DateLastTestedManual   mysql.NullTime `json:"date_last_tested_manual"`  // date_last_tested_manual
	Active                 sql.NullInt64  `json:"active"`                   // active
	IntakeMethod           IntakeMethod   `json:"intake_method"`            // intake_method
	MixMethod              MixMethod      `json:"mix_method"`               // mix_method
	MixPracticeDoctorID    sql.NullInt64  `json:"mix_practice_doctor_id"`   // mix_practice_doctor_id
	MixPracticeDoctorName  sql.NullString `json:"mix_practice_doctor_name"` // mix_practice_doctor_name
	Fastpass               sql.NullInt64  `json:"fastpass"`                 // fastpass
	FastpassDisabledReason sql.NullString `json:"fastpass_disabled_reason"` // fastpass_disabled_reason
	Pets                   sql.NullInt64  `json:"pets"`                     // pets
	TherapyStartDate       mysql.NullTime `json:"therapy_start_date"`       // therapy_start_date
	UpdatedBy              sql.NullInt64  `json:"updated_by"`               // updated_by
	Updated                time.Time      `json:"updated"`                  // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Patient exists in the database.
func (p *Patient) Exists() bool {
	return p._exists
}

// Deleted provides information if the Patient has been deleted from the database.
func (p *Patient) Deleted() bool {
	return p._deleted
}

// Insert inserts the Patient to the database.
func (p *Patient) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patients (` +
		`allergy_id, mix_practice_id, mix_location_id, shot_location, shot_practice_id, shot_location_id, shot_offsite_id, practice_id, firstname, middlename, lastname, address, address2, city, state, zip, homephone, cellphone, dob, gender, email, cpt, is_emr_patient, epi_prescription_date, epi_expiration_date, shot_interval, creation_date, referral_acceptance_date, referral_date, signed_forms, asthmatic, medicare, last_office_visit, date_last_tested_manual, active, intake_method, mix_method, mix_practice_doctor_id, mix_practice_doctor_name, fastpass, fastpass_disabled_reason, pets, therapy_start_date, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.AllergyID, p.MixPracticeID, p.MixLocationID, p.ShotLocation, p.ShotPracticeID, p.ShotLocationID, p.ShotOffsiteID, p.PracticeID, p.Firstname, p.Middlename, p.Lastname, p.Address, p.Address2, p.City, p.State, p.Zip, p.Homephone, p.Cellphone, p.Dob, p.Gender, p.Email, p.Cpt, p.IsEmrPatient, p.EpiPrescriptionDate, p.EpiExpirationDate, p.ShotInterval, p.CreationDate, p.ReferralAcceptanceDate, p.ReferralDate, p.SignedForms, p.Asthmatic, p.Medicare, p.LastOfficeVisit, p.DateLastTestedManual, p.Active, p.IntakeMethod, p.MixMethod, p.MixPracticeDoctorID, p.MixPracticeDoctorName, p.Fastpass, p.FastpassDisabledReason, p.Pets, p.TherapyStartDate, p.UpdatedBy, p.Updated)
	res, err := db.Exec(sqlstr, p.AllergyID, p.MixPracticeID, p.MixLocationID, p.ShotLocation, p.ShotPracticeID, p.ShotLocationID, p.ShotOffsiteID, p.PracticeID, p.Firstname, p.Middlename, p.Lastname, p.Address, p.Address2, p.City, p.State, p.Zip, p.Homephone, p.Cellphone, p.Dob, p.Gender, p.Email, p.Cpt, p.IsEmrPatient, p.EpiPrescriptionDate, p.EpiExpirationDate, p.ShotInterval, p.CreationDate, p.ReferralAcceptanceDate, p.ReferralDate, p.SignedForms, p.Asthmatic, p.Medicare, p.LastOfficeVisit, p.DateLastTestedManual, p.Active, p.IntakeMethod, p.MixMethod, p.MixPracticeDoctorID, p.MixPracticeDoctorName, p.Fastpass, p.FastpassDisabledReason, p.Pets, p.TherapyStartDate, p.UpdatedBy, p.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = uint(id)
	p._exists = true

	return nil
}

// Update updates the Patient in the database.
func (p *Patient) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patients SET ` +
		`allergy_id = ?, mix_practice_id = ?, mix_location_id = ?, shot_location = ?, shot_practice_id = ?, shot_location_id = ?, shot_offsite_id = ?, practice_id = ?, firstname = ?, middlename = ?, lastname = ?, address = ?, address2 = ?, city = ?, state = ?, zip = ?, homephone = ?, cellphone = ?, dob = ?, gender = ?, email = ?, cpt = ?, is_emr_patient = ?, epi_prescription_date = ?, epi_expiration_date = ?, shot_interval = ?, creation_date = ?, referral_acceptance_date = ?, referral_date = ?, signed_forms = ?, asthmatic = ?, medicare = ?, last_office_visit = ?, date_last_tested_manual = ?, active = ?, intake_method = ?, mix_method = ?, mix_practice_doctor_id = ?, mix_practice_doctor_name = ?, fastpass = ?, fastpass_disabled_reason = ?, pets = ?, therapy_start_date = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, p.AllergyID, p.MixPracticeID, p.MixLocationID, p.ShotLocation, p.ShotPracticeID, p.ShotLocationID, p.ShotOffsiteID, p.PracticeID, p.Firstname, p.Middlename, p.Lastname, p.Address, p.Address2, p.City, p.State, p.Zip, p.Homephone, p.Cellphone, p.Dob, p.Gender, p.Email, p.Cpt, p.IsEmrPatient, p.EpiPrescriptionDate, p.EpiExpirationDate, p.ShotInterval, p.CreationDate, p.ReferralAcceptanceDate, p.ReferralDate, p.SignedForms, p.Asthmatic, p.Medicare, p.LastOfficeVisit, p.DateLastTestedManual, p.Active, p.IntakeMethod, p.MixMethod, p.MixPracticeDoctorID, p.MixPracticeDoctorName, p.Fastpass, p.FastpassDisabledReason, p.Pets, p.TherapyStartDate, p.UpdatedBy, p.Updated, p.ID)
	_, err = db.Exec(sqlstr, p.AllergyID, p.MixPracticeID, p.MixLocationID, p.ShotLocation, p.ShotPracticeID, p.ShotLocationID, p.ShotOffsiteID, p.PracticeID, p.Firstname, p.Middlename, p.Lastname, p.Address, p.Address2, p.City, p.State, p.Zip, p.Homephone, p.Cellphone, p.Dob, p.Gender, p.Email, p.Cpt, p.IsEmrPatient, p.EpiPrescriptionDate, p.EpiExpirationDate, p.ShotInterval, p.CreationDate, p.ReferralAcceptanceDate, p.ReferralDate, p.SignedForms, p.Asthmatic, p.Medicare, p.LastOfficeVisit, p.DateLastTestedManual, p.Active, p.IntakeMethod, p.MixMethod, p.MixPracticeDoctorID, p.MixPracticeDoctorName, p.Fastpass, p.FastpassDisabledReason, p.Pets, p.TherapyStartDate, p.UpdatedBy, p.Updated, p.ID)
	return err
}

// Save saves the Patient to the database.
func (p *Patient) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Patient from the database.
func (p *Patient) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patients WHERE id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PracticeLocationByMixLocationID returns the PracticeLocation associated with the Patient's MixLocationID (mix_location_id).
//
// Generated from foreign key 'patients_mix_location'.
func (p *Patient) PracticeLocationByMixLocationID(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(p.MixLocationID.Int64))
}

// PracticeByMixPracticeID returns the Practice associated with the Patient's MixPracticeID (mix_practice_id).
//
// Generated from foreign key 'patients_mix_practice'.
func (p *Patient) PracticeByMixPracticeID(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(p.MixPracticeID.Int64))
}

// PracticeDoctor returns the PracticeDoctor associated with the Patient's MixPracticeDoctorID (mix_practice_doctor_id).
//
// Generated from foreign key 'patients_mix_practice_doctor'.
func (p *Patient) PracticeDoctor(db XODB) (*PracticeDoctor, error) {
	return PracticeDoctorByID(db, uint(p.MixPracticeDoctorID.Int64))
}

// PracticeByPracticeID returns the Practice associated with the Patient's PracticeID (practice_id).
//
// Generated from foreign key 'patients_practice'.
func (p *Patient) PracticeByPracticeID(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(p.PracticeID.Int64))
}

// PracticeLocationByShotLocationID returns the PracticeLocation associated with the Patient's ShotLocationID (shot_location_id).
//
// Generated from foreign key 'patients_shot_location'.
func (p *Patient) PracticeLocationByShotLocationID(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(p.ShotLocationID.Int64))
}

// PracticeByShotPracticeID returns the Practice associated with the Patient's ShotPracticeID (shot_practice_id).
//
// Generated from foreign key 'patients_shot_practice'.
func (p *Patient) PracticeByShotPracticeID(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(p.ShotPracticeID.Int64))
}

// User returns the User associated with the Patient's UpdatedBy (updated_by).
//
// Generated from foreign key 'patients_updated'.
func (p *Patient) User(db XODB) (*User, error) {
	return UserByID(db, uint(p.UpdatedBy.Int64))
}

// PatientsByMixLocationID retrieves a row from 'AllergyNew.patients' as a Patient.
//
// Generated from index 'Mix_Locations'.
func PatientsByMixLocationID(db XODB, mixLocationID sql.NullInt64) ([]*Patient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, allergy_id, mix_practice_id, mix_location_id, shot_location, shot_practice_id, shot_location_id, shot_offsite_id, practice_id, firstname, middlename, lastname, address, address2, city, state, zip, homephone, cellphone, dob, gender, email, cpt, is_emr_patient, epi_prescription_date, epi_expiration_date, shot_interval, creation_date, referral_acceptance_date, referral_date, signed_forms, asthmatic, medicare, last_office_visit, date_last_tested_manual, active, intake_method, mix_method, mix_practice_doctor_id, mix_practice_doctor_name, fastpass, fastpass_disabled_reason, pets, therapy_start_date, updated_by, updated ` +
		`FROM AllergyNew.patients ` +
		`WHERE mix_location_id = ?`

	// run query
	XOLog(sqlstr, mixLocationID)
	q, err := db.Query(sqlstr, mixLocationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Patient{}
	for q.Next() {
		p := Patient{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.AllergyID, &p.MixPracticeID, &p.MixLocationID, &p.ShotLocation, &p.ShotPracticeID, &p.ShotLocationID, &p.ShotOffsiteID, &p.PracticeID, &p.Firstname, &p.Middlename, &p.Lastname, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Homephone, &p.Cellphone, &p.Dob, &p.Gender, &p.Email, &p.Cpt, &p.IsEmrPatient, &p.EpiPrescriptionDate, &p.EpiExpirationDate, &p.ShotInterval, &p.CreationDate, &p.ReferralAcceptanceDate, &p.ReferralDate, &p.SignedForms, &p.Asthmatic, &p.Medicare, &p.LastOfficeVisit, &p.DateLastTestedManual, &p.Active, &p.IntakeMethod, &p.MixMethod, &p.MixPracticeDoctorID, &p.MixPracticeDoctorName, &p.Fastpass, &p.FastpassDisabledReason, &p.Pets, &p.TherapyStartDate, &p.UpdatedBy, &p.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PatientsByMixPracticeDoctorID retrieves a row from 'AllergyNew.patients' as a Patient.
//
// Generated from index 'Mix_Practice_Doctors'.
func PatientsByMixPracticeDoctorID(db XODB, mixPracticeDoctorID sql.NullInt64) ([]*Patient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, allergy_id, mix_practice_id, mix_location_id, shot_location, shot_practice_id, shot_location_id, shot_offsite_id, practice_id, firstname, middlename, lastname, address, address2, city, state, zip, homephone, cellphone, dob, gender, email, cpt, is_emr_patient, epi_prescription_date, epi_expiration_date, shot_interval, creation_date, referral_acceptance_date, referral_date, signed_forms, asthmatic, medicare, last_office_visit, date_last_tested_manual, active, intake_method, mix_method, mix_practice_doctor_id, mix_practice_doctor_name, fastpass, fastpass_disabled_reason, pets, therapy_start_date, updated_by, updated ` +
		`FROM AllergyNew.patients ` +
		`WHERE mix_practice_doctor_id = ?`

	// run query
	XOLog(sqlstr, mixPracticeDoctorID)
	q, err := db.Query(sqlstr, mixPracticeDoctorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Patient{}
	for q.Next() {
		p := Patient{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.AllergyID, &p.MixPracticeID, &p.MixLocationID, &p.ShotLocation, &p.ShotPracticeID, &p.ShotLocationID, &p.ShotOffsiteID, &p.PracticeID, &p.Firstname, &p.Middlename, &p.Lastname, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Homephone, &p.Cellphone, &p.Dob, &p.Gender, &p.Email, &p.Cpt, &p.IsEmrPatient, &p.EpiPrescriptionDate, &p.EpiExpirationDate, &p.ShotInterval, &p.CreationDate, &p.ReferralAcceptanceDate, &p.ReferralDate, &p.SignedForms, &p.Asthmatic, &p.Medicare, &p.LastOfficeVisit, &p.DateLastTestedManual, &p.Active, &p.IntakeMethod, &p.MixMethod, &p.MixPracticeDoctorID, &p.MixPracticeDoctorName, &p.Fastpass, &p.FastpassDisabledReason, &p.Pets, &p.TherapyStartDate, &p.UpdatedBy, &p.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PatientsByMixPracticeID retrieves a row from 'AllergyNew.patients' as a Patient.
//
// Generated from index 'Mix_Practices'.
func PatientsByMixPracticeID(db XODB, mixPracticeID sql.NullInt64) ([]*Patient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, allergy_id, mix_practice_id, mix_location_id, shot_location, shot_practice_id, shot_location_id, shot_offsite_id, practice_id, firstname, middlename, lastname, address, address2, city, state, zip, homephone, cellphone, dob, gender, email, cpt, is_emr_patient, epi_prescription_date, epi_expiration_date, shot_interval, creation_date, referral_acceptance_date, referral_date, signed_forms, asthmatic, medicare, last_office_visit, date_last_tested_manual, active, intake_method, mix_method, mix_practice_doctor_id, mix_practice_doctor_name, fastpass, fastpass_disabled_reason, pets, therapy_start_date, updated_by, updated ` +
		`FROM AllergyNew.patients ` +
		`WHERE mix_practice_id = ?`

	// run query
	XOLog(sqlstr, mixPracticeID)
	q, err := db.Query(sqlstr, mixPracticeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Patient{}
	for q.Next() {
		p := Patient{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.AllergyID, &p.MixPracticeID, &p.MixLocationID, &p.ShotLocation, &p.ShotPracticeID, &p.ShotLocationID, &p.ShotOffsiteID, &p.PracticeID, &p.Firstname, &p.Middlename, &p.Lastname, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Homephone, &p.Cellphone, &p.Dob, &p.Gender, &p.Email, &p.Cpt, &p.IsEmrPatient, &p.EpiPrescriptionDate, &p.EpiExpirationDate, &p.ShotInterval, &p.CreationDate, &p.ReferralAcceptanceDate, &p.ReferralDate, &p.SignedForms, &p.Asthmatic, &p.Medicare, &p.LastOfficeVisit, &p.DateLastTestedManual, &p.Active, &p.IntakeMethod, &p.MixMethod, &p.MixPracticeDoctorID, &p.MixPracticeDoctorName, &p.Fastpass, &p.FastpassDisabledReason, &p.Pets, &p.TherapyStartDate, &p.UpdatedBy, &p.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PatientsByShotLocationID retrieves a row from 'AllergyNew.patients' as a Patient.
//
// Generated from index 'Shot_Locations'.
func PatientsByShotLocationID(db XODB, shotLocationID sql.NullInt64) ([]*Patient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, allergy_id, mix_practice_id, mix_location_id, shot_location, shot_practice_id, shot_location_id, shot_offsite_id, practice_id, firstname, middlename, lastname, address, address2, city, state, zip, homephone, cellphone, dob, gender, email, cpt, is_emr_patient, epi_prescription_date, epi_expiration_date, shot_interval, creation_date, referral_acceptance_date, referral_date, signed_forms, asthmatic, medicare, last_office_visit, date_last_tested_manual, active, intake_method, mix_method, mix_practice_doctor_id, mix_practice_doctor_name, fastpass, fastpass_disabled_reason, pets, therapy_start_date, updated_by, updated ` +
		`FROM AllergyNew.patients ` +
		`WHERE shot_location_id = ?`

	// run query
	XOLog(sqlstr, shotLocationID)
	q, err := db.Query(sqlstr, shotLocationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Patient{}
	for q.Next() {
		p := Patient{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.AllergyID, &p.MixPracticeID, &p.MixLocationID, &p.ShotLocation, &p.ShotPracticeID, &p.ShotLocationID, &p.ShotOffsiteID, &p.PracticeID, &p.Firstname, &p.Middlename, &p.Lastname, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Homephone, &p.Cellphone, &p.Dob, &p.Gender, &p.Email, &p.Cpt, &p.IsEmrPatient, &p.EpiPrescriptionDate, &p.EpiExpirationDate, &p.ShotInterval, &p.CreationDate, &p.ReferralAcceptanceDate, &p.ReferralDate, &p.SignedForms, &p.Asthmatic, &p.Medicare, &p.LastOfficeVisit, &p.DateLastTestedManual, &p.Active, &p.IntakeMethod, &p.MixMethod, &p.MixPracticeDoctorID, &p.MixPracticeDoctorName, &p.Fastpass, &p.FastpassDisabledReason, &p.Pets, &p.TherapyStartDate, &p.UpdatedBy, &p.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PatientsByShotPracticeID retrieves a row from 'AllergyNew.patients' as a Patient.
//
// Generated from index 'Shot_Practices'.
func PatientsByShotPracticeID(db XODB, shotPracticeID sql.NullInt64) ([]*Patient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, allergy_id, mix_practice_id, mix_location_id, shot_location, shot_practice_id, shot_location_id, shot_offsite_id, practice_id, firstname, middlename, lastname, address, address2, city, state, zip, homephone, cellphone, dob, gender, email, cpt, is_emr_patient, epi_prescription_date, epi_expiration_date, shot_interval, creation_date, referral_acceptance_date, referral_date, signed_forms, asthmatic, medicare, last_office_visit, date_last_tested_manual, active, intake_method, mix_method, mix_practice_doctor_id, mix_practice_doctor_name, fastpass, fastpass_disabled_reason, pets, therapy_start_date, updated_by, updated ` +
		`FROM AllergyNew.patients ` +
		`WHERE shot_practice_id = ?`

	// run query
	XOLog(sqlstr, shotPracticeID)
	q, err := db.Query(sqlstr, shotPracticeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Patient{}
	for q.Next() {
		p := Patient{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.AllergyID, &p.MixPracticeID, &p.MixLocationID, &p.ShotLocation, &p.ShotPracticeID, &p.ShotLocationID, &p.ShotOffsiteID, &p.PracticeID, &p.Firstname, &p.Middlename, &p.Lastname, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Homephone, &p.Cellphone, &p.Dob, &p.Gender, &p.Email, &p.Cpt, &p.IsEmrPatient, &p.EpiPrescriptionDate, &p.EpiExpirationDate, &p.ShotInterval, &p.CreationDate, &p.ReferralAcceptanceDate, &p.ReferralDate, &p.SignedForms, &p.Asthmatic, &p.Medicare, &p.LastOfficeVisit, &p.DateLastTestedManual, &p.Active, &p.IntakeMethod, &p.MixMethod, &p.MixPracticeDoctorID, &p.MixPracticeDoctorName, &p.Fastpass, &p.FastpassDisabledReason, &p.Pets, &p.TherapyStartDate, &p.UpdatedBy, &p.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PatientByID retrieves a row from 'AllergyNew.patients' as a Patient.
//
// Generated from index 'patients_id_pkey'.
func PatientByID(db XODB, id uint) (*Patient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, allergy_id, mix_practice_id, mix_location_id, shot_location, shot_practice_id, shot_location_id, shot_offsite_id, practice_id, firstname, middlename, lastname, address, address2, city, state, zip, homephone, cellphone, dob, gender, email, cpt, is_emr_patient, epi_prescription_date, epi_expiration_date, shot_interval, creation_date, referral_acceptance_date, referral_date, signed_forms, asthmatic, medicare, last_office_visit, date_last_tested_manual, active, intake_method, mix_method, mix_practice_doctor_id, mix_practice_doctor_name, fastpass, fastpass_disabled_reason, pets, therapy_start_date, updated_by, updated ` +
		`FROM AllergyNew.patients ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Patient{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.AllergyID, &p.MixPracticeID, &p.MixLocationID, &p.ShotLocation, &p.ShotPracticeID, &p.ShotLocationID, &p.ShotOffsiteID, &p.PracticeID, &p.Firstname, &p.Middlename, &p.Lastname, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Homephone, &p.Cellphone, &p.Dob, &p.Gender, &p.Email, &p.Cpt, &p.IsEmrPatient, &p.EpiPrescriptionDate, &p.EpiExpirationDate, &p.ShotInterval, &p.CreationDate, &p.ReferralAcceptanceDate, &p.ReferralDate, &p.SignedForms, &p.Asthmatic, &p.Medicare, &p.LastOfficeVisit, &p.DateLastTestedManual, &p.Active, &p.IntakeMethod, &p.MixMethod, &p.MixPracticeDoctorID, &p.MixPracticeDoctorName, &p.Fastpass, &p.FastpassDisabledReason, &p.Pets, &p.TherapyStartDate, &p.UpdatedBy, &p.Updated)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PatientsByPracticeID retrieves a row from 'AllergyNew.patients' as a Patient.
//
// Generated from index 'patients_practice'.
func PatientsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*Patient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, allergy_id, mix_practice_id, mix_location_id, shot_location, shot_practice_id, shot_location_id, shot_offsite_id, practice_id, firstname, middlename, lastname, address, address2, city, state, zip, homephone, cellphone, dob, gender, email, cpt, is_emr_patient, epi_prescription_date, epi_expiration_date, shot_interval, creation_date, referral_acceptance_date, referral_date, signed_forms, asthmatic, medicare, last_office_visit, date_last_tested_manual, active, intake_method, mix_method, mix_practice_doctor_id, mix_practice_doctor_name, fastpass, fastpass_disabled_reason, pets, therapy_start_date, updated_by, updated ` +
		`FROM AllergyNew.patients ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Patient{}
	for q.Next() {
		p := Patient{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.AllergyID, &p.MixPracticeID, &p.MixLocationID, &p.ShotLocation, &p.ShotPracticeID, &p.ShotLocationID, &p.ShotOffsiteID, &p.PracticeID, &p.Firstname, &p.Middlename, &p.Lastname, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Homephone, &p.Cellphone, &p.Dob, &p.Gender, &p.Email, &p.Cpt, &p.IsEmrPatient, &p.EpiPrescriptionDate, &p.EpiExpirationDate, &p.ShotInterval, &p.CreationDate, &p.ReferralAcceptanceDate, &p.ReferralDate, &p.SignedForms, &p.Asthmatic, &p.Medicare, &p.LastOfficeVisit, &p.DateLastTestedManual, &p.Active, &p.IntakeMethod, &p.MixMethod, &p.MixPracticeDoctorID, &p.MixPracticeDoctorName, &p.Fastpass, &p.FastpassDisabledReason, &p.Pets, &p.TherapyStartDate, &p.UpdatedBy, &p.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PatientsByUpdatedBy retrieves a row from 'AllergyNew.patients' as a Patient.
//
// Generated from index 'patients_updated'.
func PatientsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*Patient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, allergy_id, mix_practice_id, mix_location_id, shot_location, shot_practice_id, shot_location_id, shot_offsite_id, practice_id, firstname, middlename, lastname, address, address2, city, state, zip, homephone, cellphone, dob, gender, email, cpt, is_emr_patient, epi_prescription_date, epi_expiration_date, shot_interval, creation_date, referral_acceptance_date, referral_date, signed_forms, asthmatic, medicare, last_office_visit, date_last_tested_manual, active, intake_method, mix_method, mix_practice_doctor_id, mix_practice_doctor_name, fastpass, fastpass_disabled_reason, pets, therapy_start_date, updated_by, updated ` +
		`FROM AllergyNew.patients ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Patient{}
	for q.Next() {
		p := Patient{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.AllergyID, &p.MixPracticeID, &p.MixLocationID, &p.ShotLocation, &p.ShotPracticeID, &p.ShotLocationID, &p.ShotOffsiteID, &p.PracticeID, &p.Firstname, &p.Middlename, &p.Lastname, &p.Address, &p.Address2, &p.City, &p.State, &p.Zip, &p.Homephone, &p.Cellphone, &p.Dob, &p.Gender, &p.Email, &p.Cpt, &p.IsEmrPatient, &p.EpiPrescriptionDate, &p.EpiExpirationDate, &p.ShotInterval, &p.CreationDate, &p.ReferralAcceptanceDate, &p.ReferralDate, &p.SignedForms, &p.Asthmatic, &p.Medicare, &p.LastOfficeVisit, &p.DateLastTestedManual, &p.Active, &p.IntakeMethod, &p.MixMethod, &p.MixPracticeDoctorID, &p.MixPracticeDoctorName, &p.Fastpass, &p.FastpassDisabledReason, &p.Pets, &p.TherapyStartDate, &p.UpdatedBy, &p.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}
