// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// EmrUploadDetail represents a row from 'AllergyNew.emr_upload_details'.
type EmrUploadDetail struct {
	ID          uint           `json:"id"`            // id
	EmrUploadID uint           `json:"emr_upload_id"` // emr_upload_id
	Parameter   sql.NullString `json:"parameter"`     // parameter
	Value       sql.NullString `json:"value"`         // value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EmrUploadDetail exists in the database.
func (eud *EmrUploadDetail) Exists() bool {
	return eud._exists
}

// Deleted provides information if the EmrUploadDetail has been deleted from the database.
func (eud *EmrUploadDetail) Deleted() bool {
	return eud._deleted
}

// Insert inserts the EmrUploadDetail to the database.
func (eud *EmrUploadDetail) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if eud._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.emr_upload_details (` +
		`emr_upload_id, parameter, value` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, eud.EmrUploadID, eud.Parameter, eud.Value)
	res, err := db.Exec(sqlstr, eud.EmrUploadID, eud.Parameter, eud.Value)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	eud.ID = uint(id)
	eud._exists = true

	return nil
}

// Update updates the EmrUploadDetail in the database.
func (eud *EmrUploadDetail) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eud._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if eud._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.emr_upload_details SET ` +
		`emr_upload_id = ?, parameter = ?, value = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, eud.EmrUploadID, eud.Parameter, eud.Value, eud.ID)
	_, err = db.Exec(sqlstr, eud.EmrUploadID, eud.Parameter, eud.Value, eud.ID)
	return err
}

// Save saves the EmrUploadDetail to the database.
func (eud *EmrUploadDetail) Save(db XODB) error {
	if eud.Exists() {
		return eud.Update(db)
	}

	return eud.Insert(db)
}

// Delete deletes the EmrUploadDetail from the database.
func (eud *EmrUploadDetail) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eud._exists {
		return nil
	}

	// if deleted, bail
	if eud._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.emr_upload_details WHERE id = ?`

	// run query
	XOLog(sqlstr, eud.ID)
	_, err = db.Exec(sqlstr, eud.ID)
	if err != nil {
		return err
	}

	// set deleted
	eud._deleted = true

	return nil
}

// EmrUploadDetailsByEmrUploadID retrieves a row from 'AllergyNew.emr_upload_details' as a EmrUploadDetail.
//
// Generated from index 'EmrUploadId'.
func EmrUploadDetailsByEmrUploadID(db XODB, emrUploadID uint) ([]*EmrUploadDetail, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, emr_upload_id, parameter, value ` +
		`FROM AllergyNew.emr_upload_details ` +
		`WHERE emr_upload_id = ?`

	// run query
	XOLog(sqlstr, emrUploadID)
	q, err := db.Query(sqlstr, emrUploadID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EmrUploadDetail{}
	for q.Next() {
		eud := EmrUploadDetail{
			_exists: true,
		}

		// scan
		err = q.Scan(&eud.ID, &eud.EmrUploadID, &eud.Parameter, &eud.Value)
		if err != nil {
			return nil, err
		}

		res = append(res, &eud)
	}

	return res, nil
}

// EmrUploadDetailByID retrieves a row from 'AllergyNew.emr_upload_details' as a EmrUploadDetail.
//
// Generated from index 'emr_upload_details_id_pkey'.
func EmrUploadDetailByID(db XODB, id uint) (*EmrUploadDetail, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, emr_upload_id, parameter, value ` +
		`FROM AllergyNew.emr_upload_details ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	eud := EmrUploadDetail{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&eud.ID, &eud.EmrUploadID, &eud.Parameter, &eud.Value)
	if err != nil {
		return nil, err
	}

	return &eud, nil
}
