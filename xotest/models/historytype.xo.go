// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// HistoryType is the 'history_type' enum type from schema 'AllergyNew'.
type HistoryType uint16

const (
	// HistoryTypeMixing is the 'mixing' HistoryType.
	HistoryTypeMixing = HistoryType(1)

	// HistoryTypeMixed is the 'mixed' HistoryType.
	HistoryTypeMixed = HistoryType(2)

	// HistoryTypeReviewed is the 'reviewed' HistoryType.
	HistoryTypeReviewed = HistoryType(3)
)

// String returns the string value of the HistoryType.
func (ht HistoryType) String() string {
	var enumVal string

	switch ht {
	case HistoryTypeMixing:
		enumVal = "mixing"

	case HistoryTypeMixed:
		enumVal = "mixed"

	case HistoryTypeReviewed:
		enumVal = "reviewed"
	}

	return enumVal
}

// MarshalText marshals HistoryType into text.
func (ht HistoryType) MarshalText() ([]byte, error) {
	return []byte(ht.String()), nil
}

// UnmarshalText unmarshals HistoryType from text.
func (ht *HistoryType) UnmarshalText(text []byte) error {
	switch string(text) {
	case "mixing":
		*ht = HistoryTypeMixing

	case "mixed":
		*ht = HistoryTypeMixed

	case "reviewed":
		*ht = HistoryTypeReviewed

	default:
		return errors.New("invalid HistoryType")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for HistoryType.
func (ht HistoryType) Value() (driver.Value, error) {
	return ht.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for HistoryType.
func (ht *HistoryType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid HistoryType")
	}

	return ht.UnmarshalText(buf)
}
