// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PracticePatientRef represents a row from 'AllergyNew.practice_patient_refs'.
type PracticePatientRef struct {
	ID              uint           `json:"id"`                // id
	PracticeID      sql.NullInt64  `json:"practice_id"`       // practice_id
	PatientID       sql.NullInt64  `json:"patient_id"`        // patient_id
	SourceEmrID     sql.NullInt64  `json:"source_emr_id"`     // source_emr_id
	PracticeChartID sql.NullString `json:"practice_chart_id"` // practice_chart_id
	Enabled         int8           `json:"enabled"`           // enabled
	UpdatedBy       sql.NullInt64  `json:"updated_by"`        // updated_by
	Updated         time.Time      `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PracticePatientRef exists in the database.
func (ppr *PracticePatientRef) Exists() bool {
	return ppr._exists
}

// Deleted provides information if the PracticePatientRef has been deleted from the database.
func (ppr *PracticePatientRef) Deleted() bool {
	return ppr._deleted
}

// Insert inserts the PracticePatientRef to the database.
func (ppr *PracticePatientRef) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ppr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practice_patient_refs (` +
		`practice_id, patient_id, source_emr_id, practice_chart_id, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ppr.PracticeID, ppr.PatientID, ppr.SourceEmrID, ppr.PracticeChartID, ppr.Enabled, ppr.UpdatedBy, ppr.Updated)
	res, err := db.Exec(sqlstr, ppr.PracticeID, ppr.PatientID, ppr.SourceEmrID, ppr.PracticeChartID, ppr.Enabled, ppr.UpdatedBy, ppr.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ppr.ID = uint(id)
	ppr._exists = true

	return nil
}

// Update updates the PracticePatientRef in the database.
func (ppr *PracticePatientRef) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ppr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practice_patient_refs SET ` +
		`practice_id = ?, patient_id = ?, source_emr_id = ?, practice_chart_id = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ppr.PracticeID, ppr.PatientID, ppr.SourceEmrID, ppr.PracticeChartID, ppr.Enabled, ppr.UpdatedBy, ppr.Updated, ppr.ID)
	_, err = db.Exec(sqlstr, ppr.PracticeID, ppr.PatientID, ppr.SourceEmrID, ppr.PracticeChartID, ppr.Enabled, ppr.UpdatedBy, ppr.Updated, ppr.ID)
	return err
}

// Save saves the PracticePatientRef to the database.
func (ppr *PracticePatientRef) Save(db XODB) error {
	if ppr.Exists() {
		return ppr.Update(db)
	}

	return ppr.Insert(db)
}

// Delete deletes the PracticePatientRef from the database.
func (ppr *PracticePatientRef) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ppr._exists {
		return nil
	}

	// if deleted, bail
	if ppr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practice_patient_refs WHERE id = ?`

	// run query
	XOLog(sqlstr, ppr.ID)
	_, err = db.Exec(sqlstr, ppr.ID)
	if err != nil {
		return err
	}

	// set deleted
	ppr._deleted = true

	return nil
}

// Patient returns the Patient associated with the PracticePatientRef's PatientID (patient_id).
//
// Generated from foreign key 'practice_patient_refs_patient'.
func (ppr *PracticePatientRef) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(ppr.PatientID.Int64))
}

// Practice returns the Practice associated with the PracticePatientRef's PracticeID (practice_id).
//
// Generated from foreign key 'practice_patient_refs_practice'.
func (ppr *PracticePatientRef) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(ppr.PracticeID.Int64))
}

// User returns the User associated with the PracticePatientRef's UpdatedBy (updated_by).
//
// Generated from foreign key 'practice_patient_refs_updated'.
func (ppr *PracticePatientRef) User(db XODB) (*User, error) {
	return UserByID(db, uint(ppr.UpdatedBy.Int64))
}

// PracticePatientRevesByPatientID retrieves a row from 'AllergyNew.practice_patient_refs' as a PracticePatientRef.
//
// Generated from index 'Patients'.
func PracticePatientRevesByPatientID(db XODB, patientID sql.NullInt64) ([]*PracticePatientRef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_emr_id, practice_chart_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.practice_patient_refs ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticePatientRef{}
	for q.Next() {
		ppr := PracticePatientRef{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppr.ID, &ppr.PracticeID, &ppr.PatientID, &ppr.SourceEmrID, &ppr.PracticeChartID, &ppr.Enabled, &ppr.UpdatedBy, &ppr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppr)
	}

	return res, nil
}

// PracticePatientRevesByPracticeID retrieves a row from 'AllergyNew.practice_patient_refs' as a PracticePatientRef.
//
// Generated from index 'Practices'.
func PracticePatientRevesByPracticeID(db XODB, practiceID sql.NullInt64) ([]*PracticePatientRef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_emr_id, practice_chart_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.practice_patient_refs ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticePatientRef{}
	for q.Next() {
		ppr := PracticePatientRef{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppr.ID, &ppr.PracticeID, &ppr.PatientID, &ppr.SourceEmrID, &ppr.PracticeChartID, &ppr.Enabled, &ppr.UpdatedBy, &ppr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppr)
	}

	return res, nil
}

// PracticePatientRefByID retrieves a row from 'AllergyNew.practice_patient_refs' as a PracticePatientRef.
//
// Generated from index 'practice_patient_refs_id_pkey'.
func PracticePatientRefByID(db XODB, id uint) (*PracticePatientRef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_emr_id, practice_chart_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.practice_patient_refs ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ppr := PracticePatientRef{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ppr.ID, &ppr.PracticeID, &ppr.PatientID, &ppr.SourceEmrID, &ppr.PracticeChartID, &ppr.Enabled, &ppr.UpdatedBy, &ppr.Updated)
	if err != nil {
		return nil, err
	}

	return &ppr, nil
}

// PracticePatientRevesByUpdatedBy retrieves a row from 'AllergyNew.practice_patient_refs' as a PracticePatientRef.
//
// Generated from index 'practice_patient_refs_updated'.
func PracticePatientRevesByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PracticePatientRef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, patient_id, source_emr_id, practice_chart_id, enabled, updated_by, updated ` +
		`FROM AllergyNew.practice_patient_refs ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticePatientRef{}
	for q.Next() {
		ppr := PracticePatientRef{
			_exists: true,
		}

		// scan
		err = q.Scan(&ppr.ID, &ppr.PracticeID, &ppr.PatientID, &ppr.SourceEmrID, &ppr.PracticeChartID, &ppr.Enabled, &ppr.UpdatedBy, &ppr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ppr)
	}

	return res, nil
}
