// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// ActivityLog represents a row from 'AllergyNew.activity_log'.
type ActivityLog struct {
	ID         uint           `json:"id"`          // id
	PracticeID sql.NullInt64  `json:"practice_id"` // practice_id
	LocationID sql.NullInt64  `json:"location_id"` // location_id
	UserID     sql.NullInt64  `json:"user_id"`     // user_id
	SessionID  sql.NullString `json:"session_id"`  // session_id
	URL        sql.NullString `json:"url"`         // url
	Query      sql.NullString `json:"query"`       // query
	Post       sql.NullString `json:"post"`        // post
	Timestamp  time.Time      `json:"timestamp"`   // timestamp

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ActivityLog exists in the database.
func (al *ActivityLog) Exists() bool {
	return al._exists
}

// Deleted provides information if the ActivityLog has been deleted from the database.
func (al *ActivityLog) Deleted() bool {
	return al._deleted
}

// Insert inserts the ActivityLog to the database.
func (al *ActivityLog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if al._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.activity_log (` +
		`practice_id, location_id, user_id, session_id, url, query, post, timestamp` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, al.PracticeID, al.LocationID, al.UserID, al.SessionID, al.URL, al.Query, al.Post, al.Timestamp)
	res, err := db.Exec(sqlstr, al.PracticeID, al.LocationID, al.UserID, al.SessionID, al.URL, al.Query, al.Post, al.Timestamp)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	al.ID = uint(id)
	al._exists = true

	return nil
}

// Update updates the ActivityLog in the database.
func (al *ActivityLog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !al._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if al._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.activity_log SET ` +
		`practice_id = ?, location_id = ?, user_id = ?, session_id = ?, url = ?, query = ?, post = ?, timestamp = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, al.PracticeID, al.LocationID, al.UserID, al.SessionID, al.URL, al.Query, al.Post, al.Timestamp, al.ID)
	_, err = db.Exec(sqlstr, al.PracticeID, al.LocationID, al.UserID, al.SessionID, al.URL, al.Query, al.Post, al.Timestamp, al.ID)
	return err
}

// Save saves the ActivityLog to the database.
func (al *ActivityLog) Save(db XODB) error {
	if al.Exists() {
		return al.Update(db)
	}

	return al.Insert(db)
}

// Delete deletes the ActivityLog from the database.
func (al *ActivityLog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !al._exists {
		return nil
	}

	// if deleted, bail
	if al._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.activity_log WHERE id = ?`

	// run query
	XOLog(sqlstr, al.ID)
	_, err = db.Exec(sqlstr, al.ID)
	if err != nil {
		return err
	}

	// set deleted
	al._deleted = true

	return nil
}

// ActivityLogsByLocationID retrieves a row from 'AllergyNew.activity_log' as a ActivityLog.
//
// Generated from index 'Activity_Locations'.
func ActivityLogsByLocationID(db XODB, locationID sql.NullInt64) ([]*ActivityLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, session_id, url, query, post, timestamp ` +
		`FROM AllergyNew.activity_log ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ActivityLog{}
	for q.Next() {
		al := ActivityLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&al.ID, &al.PracticeID, &al.LocationID, &al.UserID, &al.SessionID, &al.URL, &al.Query, &al.Post, &al.Timestamp)
		if err != nil {
			return nil, err
		}

		res = append(res, &al)
	}

	return res, nil
}

// ActivityLogsByPracticeID retrieves a row from 'AllergyNew.activity_log' as a ActivityLog.
//
// Generated from index 'Activity_Practices'.
func ActivityLogsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*ActivityLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, session_id, url, query, post, timestamp ` +
		`FROM AllergyNew.activity_log ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ActivityLog{}
	for q.Next() {
		al := ActivityLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&al.ID, &al.PracticeID, &al.LocationID, &al.UserID, &al.SessionID, &al.URL, &al.Query, &al.Post, &al.Timestamp)
		if err != nil {
			return nil, err
		}

		res = append(res, &al)
	}

	return res, nil
}

// ActivityLogsBySessionID retrieves a row from 'AllergyNew.activity_log' as a ActivityLog.
//
// Generated from index 'Activity_Sessions'.
func ActivityLogsBySessionID(db XODB, sessionID sql.NullString) ([]*ActivityLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, session_id, url, query, post, timestamp ` +
		`FROM AllergyNew.activity_log ` +
		`WHERE session_id = ?`

	// run query
	XOLog(sqlstr, sessionID)
	q, err := db.Query(sqlstr, sessionID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ActivityLog{}
	for q.Next() {
		al := ActivityLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&al.ID, &al.PracticeID, &al.LocationID, &al.UserID, &al.SessionID, &al.URL, &al.Query, &al.Post, &al.Timestamp)
		if err != nil {
			return nil, err
		}

		res = append(res, &al)
	}

	return res, nil
}

// ActivityLogsByTimestamp retrieves a row from 'AllergyNew.activity_log' as a ActivityLog.
//
// Generated from index 'Activity_Timestamps'.
func ActivityLogsByTimestamp(db XODB, timestamp time.Time) ([]*ActivityLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, session_id, url, query, post, timestamp ` +
		`FROM AllergyNew.activity_log ` +
		`WHERE timestamp = ?`

	// run query
	XOLog(sqlstr, timestamp)
	q, err := db.Query(sqlstr, timestamp)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ActivityLog{}
	for q.Next() {
		al := ActivityLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&al.ID, &al.PracticeID, &al.LocationID, &al.UserID, &al.SessionID, &al.URL, &al.Query, &al.Post, &al.Timestamp)
		if err != nil {
			return nil, err
		}

		res = append(res, &al)
	}

	return res, nil
}

// ActivityLogsByURL retrieves a row from 'AllergyNew.activity_log' as a ActivityLog.
//
// Generated from index 'Activity_URLs'.
func ActivityLogsByURL(db XODB, url sql.NullString) ([]*ActivityLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, session_id, url, query, post, timestamp ` +
		`FROM AllergyNew.activity_log ` +
		`WHERE url = ?`

	// run query
	XOLog(sqlstr, url)
	q, err := db.Query(sqlstr, url)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ActivityLog{}
	for q.Next() {
		al := ActivityLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&al.ID, &al.PracticeID, &al.LocationID, &al.UserID, &al.SessionID, &al.URL, &al.Query, &al.Post, &al.Timestamp)
		if err != nil {
			return nil, err
		}

		res = append(res, &al)
	}

	return res, nil
}

// ActivityLogsByUserID retrieves a row from 'AllergyNew.activity_log' as a ActivityLog.
//
// Generated from index 'Activity_Users'.
func ActivityLogsByUserID(db XODB, userID sql.NullInt64) ([]*ActivityLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, session_id, url, query, post, timestamp ` +
		`FROM AllergyNew.activity_log ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ActivityLog{}
	for q.Next() {
		al := ActivityLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&al.ID, &al.PracticeID, &al.LocationID, &al.UserID, &al.SessionID, &al.URL, &al.Query, &al.Post, &al.Timestamp)
		if err != nil {
			return nil, err
		}

		res = append(res, &al)
	}

	return res, nil
}

// ActivityLogByID retrieves a row from 'AllergyNew.activity_log' as a ActivityLog.
//
// Generated from index 'activity_log_id_pkey'.
func ActivityLogByID(db XODB, id uint) (*ActivityLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, user_id, session_id, url, query, post, timestamp ` +
		`FROM AllergyNew.activity_log ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	al := ActivityLog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&al.ID, &al.PracticeID, &al.LocationID, &al.UserID, &al.SessionID, &al.URL, &al.Query, &al.Post, &al.Timestamp)
	if err != nil {
		return nil, err
	}

	return &al, nil
}
