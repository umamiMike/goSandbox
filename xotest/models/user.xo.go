// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// User represents a row from 'AllergyNew.users'.
type User struct {
	ID                uint           `json:"id"`                  // id
	PracticeID        sql.NullInt64  `json:"practice_id"`         // practice_id
	LocationID        sql.NullInt64  `json:"location_id"`         // location_id
	Username          sql.NullString `json:"username"`            // username
	IsAdmin           int8           `json:"is_admin"`            // is_admin
	Firstname         sql.NullString `json:"firstname"`           // firstname
	Middlename        sql.NullString `json:"middlename"`          // middlename
	Lastname          sql.NullString `json:"lastname"`            // lastname
	Email             sql.NullString `json:"email"`               // email
	VerifiesFormulas  int8           `json:"verifies_formulas"`   // verifies_formulas
	SignsDocuments    int8           `json:"signs_documents"`     // signs_documents
	Signature         sql.NullString `json:"signature"`           // signature
	StaffCardCode     sql.NullString `json:"staff_card_code"`     // staff_card_code
	Active            int8           `json:"active"`              // active
	Notes             sql.NullString `json:"notes"`               // notes
	Password          sql.NullString `json:"password"`            // password
	ResetPassword     int8           `json:"reset_password"`      // reset_password
	LastPasswordReset mysql.NullTime `json:"last_password_reset"` // last_password_reset
	UpdatedBy         sql.NullInt64  `json:"updated_by"`          // updated_by
	Updated           time.Time      `json:"updated"`             // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.users (` +
		`practice_id, location_id, username, is_admin, firstname, middlename, lastname, email, verifies_formulas, signs_documents, signature, staff_card_code, active, notes, password, reset_password, last_password_reset, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.PracticeID, u.LocationID, u.Username, u.IsAdmin, u.Firstname, u.Middlename, u.Lastname, u.Email, u.VerifiesFormulas, u.SignsDocuments, u.Signature, u.StaffCardCode, u.Active, u.Notes, u.Password, u.ResetPassword, u.LastPasswordReset, u.UpdatedBy, u.Updated)
	res, err := db.Exec(sqlstr, u.PracticeID, u.LocationID, u.Username, u.IsAdmin, u.Firstname, u.Middlename, u.Lastname, u.Email, u.VerifiesFormulas, u.SignsDocuments, u.Signature, u.StaffCardCode, u.Active, u.Notes, u.Password, u.ResetPassword, u.LastPasswordReset, u.UpdatedBy, u.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = uint(id)
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.users SET ` +
		`practice_id = ?, location_id = ?, username = ?, is_admin = ?, firstname = ?, middlename = ?, lastname = ?, email = ?, verifies_formulas = ?, signs_documents = ?, signature = ?, staff_card_code = ?, active = ?, notes = ?, password = ?, reset_password = ?, last_password_reset = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, u.PracticeID, u.LocationID, u.Username, u.IsAdmin, u.Firstname, u.Middlename, u.Lastname, u.Email, u.VerifiesFormulas, u.SignsDocuments, u.Signature, u.StaffCardCode, u.Active, u.Notes, u.Password, u.ResetPassword, u.LastPasswordReset, u.UpdatedBy, u.Updated, u.ID)
	_, err = db.Exec(sqlstr, u.PracticeID, u.LocationID, u.Username, u.IsAdmin, u.Firstname, u.Middlename, u.Lastname, u.Email, u.VerifiesFormulas, u.SignsDocuments, u.Signature, u.StaffCardCode, u.Active, u.Notes, u.Password, u.ResetPassword, u.LastPasswordReset, u.UpdatedBy, u.Updated, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.users WHERE id = ?`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// PracticeLocation returns the PracticeLocation associated with the User's LocationID (location_id).
//
// Generated from foreign key 'users_location'.
func (u *User) PracticeLocation(db XODB) (*PracticeLocation, error) {
	return PracticeLocationByID(db, uint(u.LocationID.Int64))
}

// Practice returns the Practice associated with the User's PracticeID (practice_id).
//
// Generated from foreign key 'users_practice'.
func (u *User) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(u.PracticeID.Int64))
}

// User returns the User associated with the User's UpdatedBy (updated_by).
//
// Generated from foreign key 'users_updated'.
func (u *User) User(db XODB) (*User, error) {
	return UserByID(db, uint(u.UpdatedBy.Int64))
}

// UsersByLocationID retrieves a row from 'AllergyNew.users' as a User.
//
// Generated from index 'Locations'.
func UsersByLocationID(db XODB, locationID sql.NullInt64) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, username, is_admin, firstname, middlename, lastname, email, verifies_formulas, signs_documents, signature, staff_card_code, active, notes, password, reset_password, last_password_reset, updated_by, updated ` +
		`FROM AllergyNew.users ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.ID, &u.PracticeID, &u.LocationID, &u.Username, &u.IsAdmin, &u.Firstname, &u.Middlename, &u.Lastname, &u.Email, &u.VerifiesFormulas, &u.SignsDocuments, &u.Signature, &u.StaffCardCode, &u.Active, &u.Notes, &u.Password, &u.ResetPassword, &u.LastPasswordReset, &u.UpdatedBy, &u.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UsersByPracticeID retrieves a row from 'AllergyNew.users' as a User.
//
// Generated from index 'Practices'.
func UsersByPracticeID(db XODB, practiceID sql.NullInt64) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, username, is_admin, firstname, middlename, lastname, email, verifies_formulas, signs_documents, signature, staff_card_code, active, notes, password, reset_password, last_password_reset, updated_by, updated ` +
		`FROM AllergyNew.users ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.ID, &u.PracticeID, &u.LocationID, &u.Username, &u.IsAdmin, &u.Firstname, &u.Middlename, &u.Lastname, &u.Email, &u.VerifiesFormulas, &u.SignsDocuments, &u.Signature, &u.StaffCardCode, &u.Active, &u.Notes, &u.Password, &u.ResetPassword, &u.LastPasswordReset, &u.UpdatedBy, &u.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UsersByUsername retrieves a row from 'AllergyNew.users' as a User.
//
// Generated from index 'User_ID'.
func UsersByUsername(db XODB, username sql.NullString) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, username, is_admin, firstname, middlename, lastname, email, verifies_formulas, signs_documents, signature, staff_card_code, active, notes, password, reset_password, last_password_reset, updated_by, updated ` +
		`FROM AllergyNew.users ` +
		`WHERE username = ?`

	// run query
	XOLog(sqlstr, username)
	q, err := db.Query(sqlstr, username)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.ID, &u.PracticeID, &u.LocationID, &u.Username, &u.IsAdmin, &u.Firstname, &u.Middlename, &u.Lastname, &u.Email, &u.VerifiesFormulas, &u.SignsDocuments, &u.Signature, &u.StaffCardCode, &u.Active, &u.Notes, &u.Password, &u.ResetPassword, &u.LastPasswordReset, &u.UpdatedBy, &u.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UserByID retrieves a row from 'AllergyNew.users' as a User.
//
// Generated from index 'users_id_pkey'.
func UserByID(db XODB, id uint) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, username, is_admin, firstname, middlename, lastname, email, verifies_formulas, signs_documents, signature, staff_card_code, active, notes, password, reset_password, last_password_reset, updated_by, updated ` +
		`FROM AllergyNew.users ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.PracticeID, &u.LocationID, &u.Username, &u.IsAdmin, &u.Firstname, &u.Middlename, &u.Lastname, &u.Email, &u.VerifiesFormulas, &u.SignsDocuments, &u.Signature, &u.StaffCardCode, &u.Active, &u.Notes, &u.Password, &u.ResetPassword, &u.LastPasswordReset, &u.UpdatedBy, &u.Updated)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UsersByUpdatedBy retrieves a row from 'AllergyNew.users' as a User.
//
// Generated from index 'users_updated'.
func UsersByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, username, is_admin, firstname, middlename, lastname, email, verifies_formulas, signs_documents, signature, staff_card_code, active, notes, password, reset_password, last_password_reset, updated_by, updated ` +
		`FROM AllergyNew.users ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.ID, &u.PracticeID, &u.LocationID, &u.Username, &u.IsAdmin, &u.Firstname, &u.Middlename, &u.Lastname, &u.Email, &u.VerifiesFormulas, &u.SignsDocuments, &u.Signature, &u.StaffCardCode, &u.Active, &u.Notes, &u.Password, &u.ResetPassword, &u.LastPasswordReset, &u.UpdatedBy, &u.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}
