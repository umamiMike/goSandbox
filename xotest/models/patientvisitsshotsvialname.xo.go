// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PatientVisitsShotsVialName represents a row from 'AllergyNew.patient_visits_shots_vial_names'.
type PatientVisitsShotsVialName struct {
	ID        uint           `json:"id"`         // id
	ShotID    sql.NullInt64  `json:"shot_id"`    // shot_id
	VialName  sql.NullString `json:"vial_name"`  // vial_name
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientVisitsShotsVialName exists in the database.
func (pvsvn *PatientVisitsShotsVialName) Exists() bool {
	return pvsvn._exists
}

// Deleted provides information if the PatientVisitsShotsVialName has been deleted from the database.
func (pvsvn *PatientVisitsShotsVialName) Deleted() bool {
	return pvsvn._deleted
}

// Insert inserts the PatientVisitsShotsVialName to the database.
func (pvsvn *PatientVisitsShotsVialName) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pvsvn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_visits_shots_vial_names (` +
		`shot_id, vial_name, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pvsvn.ShotID, pvsvn.VialName, pvsvn.UpdatedBy, pvsvn.Updated)
	res, err := db.Exec(sqlstr, pvsvn.ShotID, pvsvn.VialName, pvsvn.UpdatedBy, pvsvn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pvsvn.ID = uint(id)
	pvsvn._exists = true

	return nil
}

// Update updates the PatientVisitsShotsVialName in the database.
func (pvsvn *PatientVisitsShotsVialName) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvsvn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pvsvn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_visits_shots_vial_names SET ` +
		`shot_id = ?, vial_name = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pvsvn.ShotID, pvsvn.VialName, pvsvn.UpdatedBy, pvsvn.Updated, pvsvn.ID)
	_, err = db.Exec(sqlstr, pvsvn.ShotID, pvsvn.VialName, pvsvn.UpdatedBy, pvsvn.Updated, pvsvn.ID)
	return err
}

// Save saves the PatientVisitsShotsVialName to the database.
func (pvsvn *PatientVisitsShotsVialName) Save(db XODB) error {
	if pvsvn.Exists() {
		return pvsvn.Update(db)
	}

	return pvsvn.Insert(db)
}

// Delete deletes the PatientVisitsShotsVialName from the database.
func (pvsvn *PatientVisitsShotsVialName) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvsvn._exists {
		return nil
	}

	// if deleted, bail
	if pvsvn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_visits_shots_vial_names WHERE id = ?`

	// run query
	XOLog(sqlstr, pvsvn.ID)
	_, err = db.Exec(sqlstr, pvsvn.ID)
	if err != nil {
		return err
	}

	// set deleted
	pvsvn._deleted = true

	return nil
}

// PatientVisitsShotsVialNameByID retrieves a row from 'AllergyNew.patient_visits_shots_vial_names' as a PatientVisitsShotsVialName.
//
// Generated from index 'patient_visits_shots_vial_names_id_pkey'.
func PatientVisitsShotsVialNameByID(db XODB, id uint) (*PatientVisitsShotsVialName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, shot_id, vial_name, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_vial_names ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pvsvn := PatientVisitsShotsVialName{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pvsvn.ID, &pvsvn.ShotID, &pvsvn.VialName, &pvsvn.UpdatedBy, &pvsvn.Updated)
	if err != nil {
		return nil, err
	}

	return &pvsvn, nil
}
