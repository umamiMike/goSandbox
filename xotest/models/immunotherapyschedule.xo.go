// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// ImmunotherapySchedule represents a row from 'AllergyNew.immunotherapy_schedules'.
type ImmunotherapySchedule struct {
	ID             uint           `json:"id"`              // id
	PracticeID     uint           `json:"practice_id"`     // practice_id
	MixMethod      sql.NullString `json:"mix_method"`      // mix_method
	ScheduleName   sql.NullString `json:"schedule_name"`   // schedule_name
	ScheduleStatus sql.NullString `json:"schedule_status"` // schedule_status
	PrintedDocID   sql.NullString `json:"printed_doc_id"`  // printed_doc_id
	Active         int8           `json:"active"`          // active
	Hash           sql.NullString `json:"hash"`            // hash
	UpdatedBy      sql.NullInt64  `json:"updated_by"`      // updated_by
	Updated        time.Time      `json:"updated"`         // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ImmunotherapySchedule exists in the database.
func (is *ImmunotherapySchedule) Exists() bool {
	return is._exists
}

// Deleted provides information if the ImmunotherapySchedule has been deleted from the database.
func (is *ImmunotherapySchedule) Deleted() bool {
	return is._deleted
}

// Insert inserts the ImmunotherapySchedule to the database.
func (is *ImmunotherapySchedule) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if is._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.immunotherapy_schedules (` +
		`practice_id, mix_method, schedule_name, schedule_status, printed_doc_id, active, hash, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, is.PracticeID, is.MixMethod, is.ScheduleName, is.ScheduleStatus, is.PrintedDocID, is.Active, is.Hash, is.UpdatedBy, is.Updated)
	res, err := db.Exec(sqlstr, is.PracticeID, is.MixMethod, is.ScheduleName, is.ScheduleStatus, is.PrintedDocID, is.Active, is.Hash, is.UpdatedBy, is.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	is.ID = uint(id)
	is._exists = true

	return nil
}

// Update updates the ImmunotherapySchedule in the database.
func (is *ImmunotherapySchedule) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !is._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if is._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.immunotherapy_schedules SET ` +
		`practice_id = ?, mix_method = ?, schedule_name = ?, schedule_status = ?, printed_doc_id = ?, active = ?, hash = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, is.PracticeID, is.MixMethod, is.ScheduleName, is.ScheduleStatus, is.PrintedDocID, is.Active, is.Hash, is.UpdatedBy, is.Updated, is.ID)
	_, err = db.Exec(sqlstr, is.PracticeID, is.MixMethod, is.ScheduleName, is.ScheduleStatus, is.PrintedDocID, is.Active, is.Hash, is.UpdatedBy, is.Updated, is.ID)
	return err
}

// Save saves the ImmunotherapySchedule to the database.
func (is *ImmunotherapySchedule) Save(db XODB) error {
	if is.Exists() {
		return is.Update(db)
	}

	return is.Insert(db)
}

// Delete deletes the ImmunotherapySchedule from the database.
func (is *ImmunotherapySchedule) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !is._exists {
		return nil
	}

	// if deleted, bail
	if is._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.immunotherapy_schedules WHERE id = ?`

	// run query
	XOLog(sqlstr, is.ID)
	_, err = db.Exec(sqlstr, is.ID)
	if err != nil {
		return err
	}

	// set deleted
	is._deleted = true

	return nil
}

// ImmunotherapyScheduleByID retrieves a row from 'AllergyNew.immunotherapy_schedules' as a ImmunotherapySchedule.
//
// Generated from index 'immunotherapy_schedules_id_pkey'.
func ImmunotherapyScheduleByID(db XODB, id uint) (*ImmunotherapySchedule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, mix_method, schedule_name, schedule_status, printed_doc_id, active, hash, updated_by, updated ` +
		`FROM AllergyNew.immunotherapy_schedules ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	is := ImmunotherapySchedule{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&is.ID, &is.PracticeID, &is.MixMethod, &is.ScheduleName, &is.ScheduleStatus, &is.PrintedDocID, &is.Active, &is.Hash, &is.UpdatedBy, &is.Updated)
	if err != nil {
		return nil, err
	}

	return &is, nil
}
