// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PatientNote represents a row from 'AllergyNew.patient_notes'.
type PatientNote struct {
	ID         uint           `json:"id"`          // id
	PatientID  sql.NullInt64  `json:"patient_id"`  // patient_id
	Note       sql.NullString `json:"note"`        // note
	LocationID sql.NullInt64  `json:"location_id"` // location_id
	DateAdded  mysql.NullTime `json:"date_added"`  // date_added
	AddedBy    sql.NullInt64  `json:"added_by"`    // added_by
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientNote exists in the database.
func (pn *PatientNote) Exists() bool {
	return pn._exists
}

// Deleted provides information if the PatientNote has been deleted from the database.
func (pn *PatientNote) Deleted() bool {
	return pn._deleted
}

// Insert inserts the PatientNote to the database.
func (pn *PatientNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_notes (` +
		`patient_id, note, location_id, date_added, added_by, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pn.PatientID, pn.Note, pn.LocationID, pn.DateAdded, pn.AddedBy, pn.UpdatedBy, pn.Updated)
	res, err := db.Exec(sqlstr, pn.PatientID, pn.Note, pn.LocationID, pn.DateAdded, pn.AddedBy, pn.UpdatedBy, pn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pn.ID = uint(id)
	pn._exists = true

	return nil
}

// Update updates the PatientNote in the database.
func (pn *PatientNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_notes SET ` +
		`patient_id = ?, note = ?, location_id = ?, date_added = ?, added_by = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pn.PatientID, pn.Note, pn.LocationID, pn.DateAdded, pn.AddedBy, pn.UpdatedBy, pn.Updated, pn.ID)
	_, err = db.Exec(sqlstr, pn.PatientID, pn.Note, pn.LocationID, pn.DateAdded, pn.AddedBy, pn.UpdatedBy, pn.Updated, pn.ID)
	return err
}

// Save saves the PatientNote to the database.
func (pn *PatientNote) Save(db XODB) error {
	if pn.Exists() {
		return pn.Update(db)
	}

	return pn.Insert(db)
}

// Delete deletes the PatientNote from the database.
func (pn *PatientNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pn._exists {
		return nil
	}

	// if deleted, bail
	if pn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, pn.ID)
	_, err = db.Exec(sqlstr, pn.ID)
	if err != nil {
		return err
	}

	// set deleted
	pn._deleted = true

	return nil
}

// PatientNotesByPatientID retrieves a row from 'AllergyNew.patient_notes' as a PatientNote.
//
// Generated from index 'Patients'.
func PatientNotesByPatientID(db XODB, patientID sql.NullInt64) ([]*PatientNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, note, location_id, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.patient_notes ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientNote{}
	for q.Next() {
		pn := PatientNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&pn.ID, &pn.PatientID, &pn.Note, &pn.LocationID, &pn.DateAdded, &pn.AddedBy, &pn.UpdatedBy, &pn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pn)
	}

	return res, nil
}

// PatientNoteByID retrieves a row from 'AllergyNew.patient_notes' as a PatientNote.
//
// Generated from index 'patient_notes_id_pkey'.
func PatientNoteByID(db XODB, id uint) (*PatientNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, note, location_id, date_added, added_by, updated_by, updated ` +
		`FROM AllergyNew.patient_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pn := PatientNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pn.ID, &pn.PatientID, &pn.Note, &pn.LocationID, &pn.DateAdded, &pn.AddedBy, &pn.UpdatedBy, &pn.Updated)
	if err != nil {
		return nil, err
	}

	return &pn, nil
}
