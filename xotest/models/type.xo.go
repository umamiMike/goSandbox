// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Type is the 'type' enum type from schema 'AllergyNew'.
type Type uint16

const (
	// TypeVisit is the 'visit' Type.
	TypeVisit = Type(1)

	// TypeFormulaverify is the 'formulaVerify' Type.
	TypeFormulaverify = Type(2)

	// TypeRecipeverify is the 'recipeVerify' Type.
	TypeRecipeverify = Type(3)
)

// String returns the string value of the Type.
func (t Type) String() string {
	var enumVal string

	switch t {
	case TypeVisit:
		enumVal = "visit"

	case TypeFormulaverify:
		enumVal = "formulaVerify"

	case TypeRecipeverify:
		enumVal = "recipeVerify"
	}

	return enumVal
}

// MarshalText marshals Type into text.
func (t Type) MarshalText() ([]byte, error) {
	return []byte(t.String()), nil
}

// UnmarshalText unmarshals Type from text.
func (t *Type) UnmarshalText(text []byte) error {
	switch string(text) {
	case "visit":
		*t = TypeVisit

	case "formulaVerify":
		*t = TypeFormulaverify

	case "recipeVerify":
		*t = TypeRecipeverify

	default:
		return errors.New("invalid Type")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Type.
func (t Type) Value() (driver.Value, error) {
	return t.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Type.
func (t *Type) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Type")
	}

	return t.UnmarshalText(buf)
}
