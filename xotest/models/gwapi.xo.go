// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// GwAPI represents a row from 'AllergyNew.gw_api'.
type GwAPI struct {
	ID                     uint           `json:"id"`                        // id
	PracticeID             sql.NullInt64  `json:"practice_id"`               // practice_id
	Development            sql.NullInt64  `json:"development"`               // development
	AKey                   sql.NullString `json:"a_key"`                     // a_key
	DestinationSiteID      sql.NullString `json:"destination_site_id"`       // destination_site_id
	PrimeSuiteUserID       sql.NullString `json:"prime_suite_user_id"`       // prime_suite_user_id
	PrimeSuiteSiteID       sql.NullString `json:"prime_suite_site_id"`       // prime_suite_site_id
	PrimeSuiteUserName     sql.NullString `json:"prime_suite_user_name"`     // prime_suite_user_name
	PrimeSuiteUserPassword sql.NullString `json:"prime_suite_user_password"` // prime_suite_user_password
	VendorLogin            sql.NullString `json:"vendor_login"`              // vendor_login
	VendorPassword         sql.NullString `json:"vendor_password"`           // vendor_password
	PrickTestDocTypeID     sql.NullInt64  `json:"prick_test_doc_type_id"`    // prick_test_doc_type_id
	IntraTestDocTypeID     sql.NullInt64  `json:"intra_test_doc_type_id"`    // intra_test_doc_type_id
	MqTestDocTypeID        sql.NullInt64  `json:"mq_test_doc_type_id"`       // mq_test_doc_type_id
	RastTestDocTypeID      sql.NullInt64  `json:"rast_test_doc_type_id"`     // rast_test_doc_type_id
	FormulaDocTypeID       sql.NullInt64  `json:"formula_doc_type_id"`       // formula_doc_type_id
	TreatmentDocTypeID     sql.NullInt64  `json:"treatment_doc_type_id"`     // treatment_doc_type_id
	SnotTestDocTypeID      sql.NullInt64  `json:"snot_test_doc_type_id"`     // snot_test_doc_type_id
	UpdatedBy              sql.NullInt64  `json:"updated_by"`                // updated_by
	Updated                time.Time      `json:"updated"`                   // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GwAPI exists in the database.
func (ga *GwAPI) Exists() bool {
	return ga._exists
}

// Deleted provides information if the GwAPI has been deleted from the database.
func (ga *GwAPI) Deleted() bool {
	return ga._deleted
}

// Insert inserts the GwAPI to the database.
func (ga *GwAPI) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ga._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.gw_api (` +
		`practice_id, development, a_key, destination_site_id, prime_suite_user_id, prime_suite_site_id, prime_suite_user_name, prime_suite_user_password, vendor_login, vendor_password, prick_test_doc_type_id, intra_test_doc_type_id, mq_test_doc_type_id, rast_test_doc_type_id, formula_doc_type_id, treatment_doc_type_id, snot_test_doc_type_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ga.PracticeID, ga.Development, ga.AKey, ga.DestinationSiteID, ga.PrimeSuiteUserID, ga.PrimeSuiteSiteID, ga.PrimeSuiteUserName, ga.PrimeSuiteUserPassword, ga.VendorLogin, ga.VendorPassword, ga.PrickTestDocTypeID, ga.IntraTestDocTypeID, ga.MqTestDocTypeID, ga.RastTestDocTypeID, ga.FormulaDocTypeID, ga.TreatmentDocTypeID, ga.SnotTestDocTypeID, ga.UpdatedBy, ga.Updated)
	res, err := db.Exec(sqlstr, ga.PracticeID, ga.Development, ga.AKey, ga.DestinationSiteID, ga.PrimeSuiteUserID, ga.PrimeSuiteSiteID, ga.PrimeSuiteUserName, ga.PrimeSuiteUserPassword, ga.VendorLogin, ga.VendorPassword, ga.PrickTestDocTypeID, ga.IntraTestDocTypeID, ga.MqTestDocTypeID, ga.RastTestDocTypeID, ga.FormulaDocTypeID, ga.TreatmentDocTypeID, ga.SnotTestDocTypeID, ga.UpdatedBy, ga.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ga.ID = uint(id)
	ga._exists = true

	return nil
}

// Update updates the GwAPI in the database.
func (ga *GwAPI) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ga._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ga._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.gw_api SET ` +
		`practice_id = ?, development = ?, a_key = ?, destination_site_id = ?, prime_suite_user_id = ?, prime_suite_site_id = ?, prime_suite_user_name = ?, prime_suite_user_password = ?, vendor_login = ?, vendor_password = ?, prick_test_doc_type_id = ?, intra_test_doc_type_id = ?, mq_test_doc_type_id = ?, rast_test_doc_type_id = ?, formula_doc_type_id = ?, treatment_doc_type_id = ?, snot_test_doc_type_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ga.PracticeID, ga.Development, ga.AKey, ga.DestinationSiteID, ga.PrimeSuiteUserID, ga.PrimeSuiteSiteID, ga.PrimeSuiteUserName, ga.PrimeSuiteUserPassword, ga.VendorLogin, ga.VendorPassword, ga.PrickTestDocTypeID, ga.IntraTestDocTypeID, ga.MqTestDocTypeID, ga.RastTestDocTypeID, ga.FormulaDocTypeID, ga.TreatmentDocTypeID, ga.SnotTestDocTypeID, ga.UpdatedBy, ga.Updated, ga.ID)
	_, err = db.Exec(sqlstr, ga.PracticeID, ga.Development, ga.AKey, ga.DestinationSiteID, ga.PrimeSuiteUserID, ga.PrimeSuiteSiteID, ga.PrimeSuiteUserName, ga.PrimeSuiteUserPassword, ga.VendorLogin, ga.VendorPassword, ga.PrickTestDocTypeID, ga.IntraTestDocTypeID, ga.MqTestDocTypeID, ga.RastTestDocTypeID, ga.FormulaDocTypeID, ga.TreatmentDocTypeID, ga.SnotTestDocTypeID, ga.UpdatedBy, ga.Updated, ga.ID)
	return err
}

// Save saves the GwAPI to the database.
func (ga *GwAPI) Save(db XODB) error {
	if ga.Exists() {
		return ga.Update(db)
	}

	return ga.Insert(db)
}

// Delete deletes the GwAPI from the database.
func (ga *GwAPI) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ga._exists {
		return nil
	}

	// if deleted, bail
	if ga._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.gw_api WHERE id = ?`

	// run query
	XOLog(sqlstr, ga.ID)
	_, err = db.Exec(sqlstr, ga.ID)
	if err != nil {
		return err
	}

	// set deleted
	ga._deleted = true

	return nil
}

// GwAPIsByPracticeID retrieves a row from 'AllergyNew.gw_api' as a GwAPI.
//
// Generated from index 'Practices'.
func GwAPIsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*GwAPI, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, development, a_key, destination_site_id, prime_suite_user_id, prime_suite_site_id, prime_suite_user_name, prime_suite_user_password, vendor_login, vendor_password, prick_test_doc_type_id, intra_test_doc_type_id, mq_test_doc_type_id, rast_test_doc_type_id, formula_doc_type_id, treatment_doc_type_id, snot_test_doc_type_id, updated_by, updated ` +
		`FROM AllergyNew.gw_api ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GwAPI{}
	for q.Next() {
		ga := GwAPI{
			_exists: true,
		}

		// scan
		err = q.Scan(&ga.ID, &ga.PracticeID, &ga.Development, &ga.AKey, &ga.DestinationSiteID, &ga.PrimeSuiteUserID, &ga.PrimeSuiteSiteID, &ga.PrimeSuiteUserName, &ga.PrimeSuiteUserPassword, &ga.VendorLogin, &ga.VendorPassword, &ga.PrickTestDocTypeID, &ga.IntraTestDocTypeID, &ga.MqTestDocTypeID, &ga.RastTestDocTypeID, &ga.FormulaDocTypeID, &ga.TreatmentDocTypeID, &ga.SnotTestDocTypeID, &ga.UpdatedBy, &ga.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ga)
	}

	return res, nil
}

// GwAPIByID retrieves a row from 'AllergyNew.gw_api' as a GwAPI.
//
// Generated from index 'gw_api_id_pkey'.
func GwAPIByID(db XODB, id uint) (*GwAPI, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, development, a_key, destination_site_id, prime_suite_user_id, prime_suite_site_id, prime_suite_user_name, prime_suite_user_password, vendor_login, vendor_password, prick_test_doc_type_id, intra_test_doc_type_id, mq_test_doc_type_id, rast_test_doc_type_id, formula_doc_type_id, treatment_doc_type_id, snot_test_doc_type_id, updated_by, updated ` +
		`FROM AllergyNew.gw_api ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ga := GwAPI{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ga.ID, &ga.PracticeID, &ga.Development, &ga.AKey, &ga.DestinationSiteID, &ga.PrimeSuiteUserID, &ga.PrimeSuiteSiteID, &ga.PrimeSuiteUserName, &ga.PrimeSuiteUserPassword, &ga.VendorLogin, &ga.VendorPassword, &ga.PrickTestDocTypeID, &ga.IntraTestDocTypeID, &ga.MqTestDocTypeID, &ga.RastTestDocTypeID, &ga.FormulaDocTypeID, &ga.TreatmentDocTypeID, &ga.SnotTestDocTypeID, &ga.UpdatedBy, &ga.Updated)
	if err != nil {
		return nil, err
	}

	return &ga, nil
}
