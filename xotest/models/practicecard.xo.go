// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// PracticeCard represents a row from 'AllergyNew.practice_cards'.
type PracticeCard struct {
	ID              uint           `json:"id"`                // id
	PracticeID      sql.NullInt64  `json:"practice_id"`       // practice_id
	Name            sql.NullString `json:"name"`              // name
	Active          int8           `json:"active"`            // active
	HeaderColorBack string         `json:"header_color_back"` // header_color_back
	HeaderColorFont string         `json:"header_color_font"` // header_color_font
	HeaderText      sql.NullString `json:"header_text"`       // header_text
	HeaderBold      int8           `json:"header_bold"`       // header_bold
	HeaderFontSize  int            `json:"header_font_size"`  // header_font_size
	Logo            []byte         `json:"logo"`              // logo
	LogoWidth       float32        `json:"logo_width"`        // logo_width
	LogoHeight      float32        `json:"logo_height"`       // logo_height
	LogoX           float32        `json:"logo_X"`            // logo_X
	LogoY           float32        `json:"logo_Y"`            // logo_Y
	PicDisplay      int8           `json:"pic_display"`       // pic_display
	PicWidth        float32        `json:"pic_width"`         // pic_width
	PicHeight       float32        `json:"pic_height"`        // pic_height
	PicX            float32        `json:"pic_X"`             // pic_X
	PicY            float32        `json:"pic_Y"`             // pic_Y
	NameWidth       float32        `json:"name_width"`        // name_width
	NameHeight      float32        `json:"name_height"`       // name_height
	NameX           float32        `json:"name_X"`            // name_X
	NameY           float32        `json:"name_Y"`            // name_Y
	NameFontSize    int            `json:"name_font_size"`    // name_font_size
	NameBold        int8           `json:"name_bold"`         // name_bold
	NameAlign       NameAlign      `json:"name_align"`        // name_align
	DobDisplay      int8           `json:"dob_display"`       // dob_display
	DobWidth        float32        `json:"dob_width"`         // dob_width
	DobHeight       float32        `json:"dob_height"`        // dob_height
	DobX            float32        `json:"dob_X"`             // dob_X
	DobY            float32        `json:"dob_Y"`             // dob_Y
	DobFontSize     int            `json:"dob_font_size"`     // dob_font_size
	DobBold         int8           `json:"dob_bold"`          // dob_bold
	DobAlign        DobAlign       `json:"dob_align"`         // dob_align
	LcnDisplay      int8           `json:"lcn_display"`       // lcn_display
	LcnWidth        float32        `json:"lcn_width"`         // lcn_width
	LcnHeight       float32        `json:"lcn_height"`        // lcn_height
	LcnX            float32        `json:"lcn_X"`             // lcn_X
	LcnY            float32        `json:"lcn_Y"`             // lcn_Y
	LcnFontSize     int            `json:"lcn_font_size"`     // lcn_font_size
	LcnBold         int8           `json:"lcn_bold"`          // lcn_bold
	LcnAlign        LcnAlign       `json:"lcn_align"`         // lcn_align
	DocDisplay      int8           `json:"doc_display"`       // doc_display
	DocWidth        float32        `json:"doc_width"`         // doc_width
	DocHeight       float32        `json:"doc_height"`        // doc_height
	DocX            float32        `json:"doc_X"`             // doc_X
	DocY            float32        `json:"doc_Y"`             // doc_Y
	DocFontSize     int            `json:"doc_font_size"`     // doc_font_size
	DocBold         int8           `json:"doc_bold"`          // doc_bold
	DocAlign        DocAlign       `json:"doc_align"`         // doc_align
	Spare1Display   int8           `json:"spare1_display"`    // spare1_display
	Spare1Width     float32        `json:"spare1_width"`      // spare1_width
	Spare1Height    float32        `json:"spare1_height"`     // spare1_height
	Spare1X         float32        `json:"spare1_X"`          // spare1_X
	Spare1Y         float32        `json:"spare1_Y"`          // spare1_Y
	Spare1FontSize  int            `json:"spare1_font_size"`  // spare1_font_size
	Spare1Bold      int8           `json:"spare1_bold"`       // spare1_bold
	Spare1Align     Spare1Align    `json:"spare1_align"`      // spare1_align
	Spare1Text      sql.NullString `json:"spare1_text"`       // spare1_text
	Spare1FontColor string         `json:"spare1_font_color"` // spare1_font_color
	Spare2Display   int8           `json:"spare2_display"`    // spare2_display
	Spare2Width     float32        `json:"spare2_width"`      // spare2_width
	Spare2Height    float32        `json:"spare2_height"`     // spare2_height
	Spare2X         float32        `json:"spare2_X"`          // spare2_X
	Spare2Y         float32        `json:"spare2_Y"`          // spare2_Y
	Spare2FontSize  int            `json:"spare2_font_size"`  // spare2_font_size
	Spare2Bold      int8           `json:"spare2_bold"`       // spare2_bold
	Spare2Align     Spare2Align    `json:"spare2_align"`      // spare2_align
	Spare2Text      sql.NullString `json:"spare2_text"`       // spare2_text
	Spare2FontColor string         `json:"spare2_font_color"` // spare2_font_color
	UpdatedBy       sql.NullInt64  `json:"updated_by"`        // updated_by
	Updated         time.Time      `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PracticeCard exists in the database.
func (pc *PracticeCard) Exists() bool {
	return pc._exists
}

// Deleted provides information if the PracticeCard has been deleted from the database.
func (pc *PracticeCard) Deleted() bool {
	return pc._deleted
}

// Insert inserts the PracticeCard to the database.
func (pc *PracticeCard) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.practice_cards (` +
		`practice_id, name, active, header_color_back, header_color_font, header_text, header_bold, header_font_size, logo, logo_width, logo_height, logo_X, logo_Y, pic_display, pic_width, pic_height, pic_X, pic_Y, name_width, name_height, name_X, name_Y, name_font_size, name_bold, name_align, dob_display, dob_width, dob_height, dob_X, dob_Y, dob_font_size, dob_bold, dob_align, lcn_display, lcn_width, lcn_height, lcn_X, lcn_Y, lcn_font_size, lcn_bold, lcn_align, doc_display, doc_width, doc_height, doc_X, doc_Y, doc_font_size, doc_bold, doc_align, spare1_display, spare1_width, spare1_height, spare1_X, spare1_Y, spare1_font_size, spare1_bold, spare1_align, spare1_text, spare1_font_color, spare2_display, spare2_width, spare2_height, spare2_X, spare2_Y, spare2_font_size, spare2_bold, spare2_align, spare2_text, spare2_font_color, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pc.PracticeID, pc.Name, pc.Active, pc.HeaderColorBack, pc.HeaderColorFont, pc.HeaderText, pc.HeaderBold, pc.HeaderFontSize, pc.Logo, pc.LogoWidth, pc.LogoHeight, pc.LogoX, pc.LogoY, pc.PicDisplay, pc.PicWidth, pc.PicHeight, pc.PicX, pc.PicY, pc.NameWidth, pc.NameHeight, pc.NameX, pc.NameY, pc.NameFontSize, pc.NameBold, pc.NameAlign, pc.DobDisplay, pc.DobWidth, pc.DobHeight, pc.DobX, pc.DobY, pc.DobFontSize, pc.DobBold, pc.DobAlign, pc.LcnDisplay, pc.LcnWidth, pc.LcnHeight, pc.LcnX, pc.LcnY, pc.LcnFontSize, pc.LcnBold, pc.LcnAlign, pc.DocDisplay, pc.DocWidth, pc.DocHeight, pc.DocX, pc.DocY, pc.DocFontSize, pc.DocBold, pc.DocAlign, pc.Spare1Display, pc.Spare1Width, pc.Spare1Height, pc.Spare1X, pc.Spare1Y, pc.Spare1FontSize, pc.Spare1Bold, pc.Spare1Align, pc.Spare1Text, pc.Spare1FontColor, pc.Spare2Display, pc.Spare2Width, pc.Spare2Height, pc.Spare2X, pc.Spare2Y, pc.Spare2FontSize, pc.Spare2Bold, pc.Spare2Align, pc.Spare2Text, pc.Spare2FontColor, pc.UpdatedBy, pc.Updated)
	res, err := db.Exec(sqlstr, pc.PracticeID, pc.Name, pc.Active, pc.HeaderColorBack, pc.HeaderColorFont, pc.HeaderText, pc.HeaderBold, pc.HeaderFontSize, pc.Logo, pc.LogoWidth, pc.LogoHeight, pc.LogoX, pc.LogoY, pc.PicDisplay, pc.PicWidth, pc.PicHeight, pc.PicX, pc.PicY, pc.NameWidth, pc.NameHeight, pc.NameX, pc.NameY, pc.NameFontSize, pc.NameBold, pc.NameAlign, pc.DobDisplay, pc.DobWidth, pc.DobHeight, pc.DobX, pc.DobY, pc.DobFontSize, pc.DobBold, pc.DobAlign, pc.LcnDisplay, pc.LcnWidth, pc.LcnHeight, pc.LcnX, pc.LcnY, pc.LcnFontSize, pc.LcnBold, pc.LcnAlign, pc.DocDisplay, pc.DocWidth, pc.DocHeight, pc.DocX, pc.DocY, pc.DocFontSize, pc.DocBold, pc.DocAlign, pc.Spare1Display, pc.Spare1Width, pc.Spare1Height, pc.Spare1X, pc.Spare1Y, pc.Spare1FontSize, pc.Spare1Bold, pc.Spare1Align, pc.Spare1Text, pc.Spare1FontColor, pc.Spare2Display, pc.Spare2Width, pc.Spare2Height, pc.Spare2X, pc.Spare2Y, pc.Spare2FontSize, pc.Spare2Bold, pc.Spare2Align, pc.Spare2Text, pc.Spare2FontColor, pc.UpdatedBy, pc.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pc.ID = uint(id)
	pc._exists = true

	return nil
}

// Update updates the PracticeCard in the database.
func (pc *PracticeCard) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.practice_cards SET ` +
		`practice_id = ?, name = ?, active = ?, header_color_back = ?, header_color_font = ?, header_text = ?, header_bold = ?, header_font_size = ?, logo = ?, logo_width = ?, logo_height = ?, logo_X = ?, logo_Y = ?, pic_display = ?, pic_width = ?, pic_height = ?, pic_X = ?, pic_Y = ?, name_width = ?, name_height = ?, name_X = ?, name_Y = ?, name_font_size = ?, name_bold = ?, name_align = ?, dob_display = ?, dob_width = ?, dob_height = ?, dob_X = ?, dob_Y = ?, dob_font_size = ?, dob_bold = ?, dob_align = ?, lcn_display = ?, lcn_width = ?, lcn_height = ?, lcn_X = ?, lcn_Y = ?, lcn_font_size = ?, lcn_bold = ?, lcn_align = ?, doc_display = ?, doc_width = ?, doc_height = ?, doc_X = ?, doc_Y = ?, doc_font_size = ?, doc_bold = ?, doc_align = ?, spare1_display = ?, spare1_width = ?, spare1_height = ?, spare1_X = ?, spare1_Y = ?, spare1_font_size = ?, spare1_bold = ?, spare1_align = ?, spare1_text = ?, spare1_font_color = ?, spare2_display = ?, spare2_width = ?, spare2_height = ?, spare2_X = ?, spare2_Y = ?, spare2_font_size = ?, spare2_bold = ?, spare2_align = ?, spare2_text = ?, spare2_font_color = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pc.PracticeID, pc.Name, pc.Active, pc.HeaderColorBack, pc.HeaderColorFont, pc.HeaderText, pc.HeaderBold, pc.HeaderFontSize, pc.Logo, pc.LogoWidth, pc.LogoHeight, pc.LogoX, pc.LogoY, pc.PicDisplay, pc.PicWidth, pc.PicHeight, pc.PicX, pc.PicY, pc.NameWidth, pc.NameHeight, pc.NameX, pc.NameY, pc.NameFontSize, pc.NameBold, pc.NameAlign, pc.DobDisplay, pc.DobWidth, pc.DobHeight, pc.DobX, pc.DobY, pc.DobFontSize, pc.DobBold, pc.DobAlign, pc.LcnDisplay, pc.LcnWidth, pc.LcnHeight, pc.LcnX, pc.LcnY, pc.LcnFontSize, pc.LcnBold, pc.LcnAlign, pc.DocDisplay, pc.DocWidth, pc.DocHeight, pc.DocX, pc.DocY, pc.DocFontSize, pc.DocBold, pc.DocAlign, pc.Spare1Display, pc.Spare1Width, pc.Spare1Height, pc.Spare1X, pc.Spare1Y, pc.Spare1FontSize, pc.Spare1Bold, pc.Spare1Align, pc.Spare1Text, pc.Spare1FontColor, pc.Spare2Display, pc.Spare2Width, pc.Spare2Height, pc.Spare2X, pc.Spare2Y, pc.Spare2FontSize, pc.Spare2Bold, pc.Spare2Align, pc.Spare2Text, pc.Spare2FontColor, pc.UpdatedBy, pc.Updated, pc.ID)
	_, err = db.Exec(sqlstr, pc.PracticeID, pc.Name, pc.Active, pc.HeaderColorBack, pc.HeaderColorFont, pc.HeaderText, pc.HeaderBold, pc.HeaderFontSize, pc.Logo, pc.LogoWidth, pc.LogoHeight, pc.LogoX, pc.LogoY, pc.PicDisplay, pc.PicWidth, pc.PicHeight, pc.PicX, pc.PicY, pc.NameWidth, pc.NameHeight, pc.NameX, pc.NameY, pc.NameFontSize, pc.NameBold, pc.NameAlign, pc.DobDisplay, pc.DobWidth, pc.DobHeight, pc.DobX, pc.DobY, pc.DobFontSize, pc.DobBold, pc.DobAlign, pc.LcnDisplay, pc.LcnWidth, pc.LcnHeight, pc.LcnX, pc.LcnY, pc.LcnFontSize, pc.LcnBold, pc.LcnAlign, pc.DocDisplay, pc.DocWidth, pc.DocHeight, pc.DocX, pc.DocY, pc.DocFontSize, pc.DocBold, pc.DocAlign, pc.Spare1Display, pc.Spare1Width, pc.Spare1Height, pc.Spare1X, pc.Spare1Y, pc.Spare1FontSize, pc.Spare1Bold, pc.Spare1Align, pc.Spare1Text, pc.Spare1FontColor, pc.Spare2Display, pc.Spare2Width, pc.Spare2Height, pc.Spare2X, pc.Spare2Y, pc.Spare2FontSize, pc.Spare2Bold, pc.Spare2Align, pc.Spare2Text, pc.Spare2FontColor, pc.UpdatedBy, pc.Updated, pc.ID)
	return err
}

// Save saves the PracticeCard to the database.
func (pc *PracticeCard) Save(db XODB) error {
	if pc.Exists() {
		return pc.Update(db)
	}

	return pc.Insert(db)
}

// Delete deletes the PracticeCard from the database.
func (pc *PracticeCard) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return nil
	}

	// if deleted, bail
	if pc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.practice_cards WHERE id = ?`

	// run query
	XOLog(sqlstr, pc.ID)
	_, err = db.Exec(sqlstr, pc.ID)
	if err != nil {
		return err
	}

	// set deleted
	pc._deleted = true

	return nil
}

// Practice returns the Practice associated with the PracticeCard's PracticeID (practice_id).
//
// Generated from foreign key 'practice_cards_practice'.
func (pc *PracticeCard) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(pc.PracticeID.Int64))
}

// User returns the User associated with the PracticeCard's UpdatedBy (updated_by).
//
// Generated from foreign key 'practice_cards_updated'.
func (pc *PracticeCard) User(db XODB) (*User, error) {
	return UserByID(db, uint(pc.UpdatedBy.Int64))
}

// PracticeCardsByPracticeID retrieves a row from 'AllergyNew.practice_cards' as a PracticeCard.
//
// Generated from index 'Practices'.
func PracticeCardsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*PracticeCard, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, name, active, header_color_back, header_color_font, header_text, header_bold, header_font_size, logo, logo_width, logo_height, logo_X, logo_Y, pic_display, pic_width, pic_height, pic_X, pic_Y, name_width, name_height, name_X, name_Y, name_font_size, name_bold, name_align, dob_display, dob_width, dob_height, dob_X, dob_Y, dob_font_size, dob_bold, dob_align, lcn_display, lcn_width, lcn_height, lcn_X, lcn_Y, lcn_font_size, lcn_bold, lcn_align, doc_display, doc_width, doc_height, doc_X, doc_Y, doc_font_size, doc_bold, doc_align, spare1_display, spare1_width, spare1_height, spare1_X, spare1_Y, spare1_font_size, spare1_bold, spare1_align, spare1_text, spare1_font_color, spare2_display, spare2_width, spare2_height, spare2_X, spare2_Y, spare2_font_size, spare2_bold, spare2_align, spare2_text, spare2_font_color, updated_by, updated ` +
		`FROM AllergyNew.practice_cards ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticeCard{}
	for q.Next() {
		pc := PracticeCard{
			_exists: true,
		}

		// scan
		err = q.Scan(&pc.ID, &pc.PracticeID, &pc.Name, &pc.Active, &pc.HeaderColorBack, &pc.HeaderColorFont, &pc.HeaderText, &pc.HeaderBold, &pc.HeaderFontSize, &pc.Logo, &pc.LogoWidth, &pc.LogoHeight, &pc.LogoX, &pc.LogoY, &pc.PicDisplay, &pc.PicWidth, &pc.PicHeight, &pc.PicX, &pc.PicY, &pc.NameWidth, &pc.NameHeight, &pc.NameX, &pc.NameY, &pc.NameFontSize, &pc.NameBold, &pc.NameAlign, &pc.DobDisplay, &pc.DobWidth, &pc.DobHeight, &pc.DobX, &pc.DobY, &pc.DobFontSize, &pc.DobBold, &pc.DobAlign, &pc.LcnDisplay, &pc.LcnWidth, &pc.LcnHeight, &pc.LcnX, &pc.LcnY, &pc.LcnFontSize, &pc.LcnBold, &pc.LcnAlign, &pc.DocDisplay, &pc.DocWidth, &pc.DocHeight, &pc.DocX, &pc.DocY, &pc.DocFontSize, &pc.DocBold, &pc.DocAlign, &pc.Spare1Display, &pc.Spare1Width, &pc.Spare1Height, &pc.Spare1X, &pc.Spare1Y, &pc.Spare1FontSize, &pc.Spare1Bold, &pc.Spare1Align, &pc.Spare1Text, &pc.Spare1FontColor, &pc.Spare2Display, &pc.Spare2Width, &pc.Spare2Height, &pc.Spare2X, &pc.Spare2Y, &pc.Spare2FontSize, &pc.Spare2Bold, &pc.Spare2Align, &pc.Spare2Text, &pc.Spare2FontColor, &pc.UpdatedBy, &pc.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PracticeCardByID retrieves a row from 'AllergyNew.practice_cards' as a PracticeCard.
//
// Generated from index 'practice_cards_id_pkey'.
func PracticeCardByID(db XODB, id uint) (*PracticeCard, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, name, active, header_color_back, header_color_font, header_text, header_bold, header_font_size, logo, logo_width, logo_height, logo_X, logo_Y, pic_display, pic_width, pic_height, pic_X, pic_Y, name_width, name_height, name_X, name_Y, name_font_size, name_bold, name_align, dob_display, dob_width, dob_height, dob_X, dob_Y, dob_font_size, dob_bold, dob_align, lcn_display, lcn_width, lcn_height, lcn_X, lcn_Y, lcn_font_size, lcn_bold, lcn_align, doc_display, doc_width, doc_height, doc_X, doc_Y, doc_font_size, doc_bold, doc_align, spare1_display, spare1_width, spare1_height, spare1_X, spare1_Y, spare1_font_size, spare1_bold, spare1_align, spare1_text, spare1_font_color, spare2_display, spare2_width, spare2_height, spare2_X, spare2_Y, spare2_font_size, spare2_bold, spare2_align, spare2_text, spare2_font_color, updated_by, updated ` +
		`FROM AllergyNew.practice_cards ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pc := PracticeCard{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pc.ID, &pc.PracticeID, &pc.Name, &pc.Active, &pc.HeaderColorBack, &pc.HeaderColorFont, &pc.HeaderText, &pc.HeaderBold, &pc.HeaderFontSize, &pc.Logo, &pc.LogoWidth, &pc.LogoHeight, &pc.LogoX, &pc.LogoY, &pc.PicDisplay, &pc.PicWidth, &pc.PicHeight, &pc.PicX, &pc.PicY, &pc.NameWidth, &pc.NameHeight, &pc.NameX, &pc.NameY, &pc.NameFontSize, &pc.NameBold, &pc.NameAlign, &pc.DobDisplay, &pc.DobWidth, &pc.DobHeight, &pc.DobX, &pc.DobY, &pc.DobFontSize, &pc.DobBold, &pc.DobAlign, &pc.LcnDisplay, &pc.LcnWidth, &pc.LcnHeight, &pc.LcnX, &pc.LcnY, &pc.LcnFontSize, &pc.LcnBold, &pc.LcnAlign, &pc.DocDisplay, &pc.DocWidth, &pc.DocHeight, &pc.DocX, &pc.DocY, &pc.DocFontSize, &pc.DocBold, &pc.DocAlign, &pc.Spare1Display, &pc.Spare1Width, &pc.Spare1Height, &pc.Spare1X, &pc.Spare1Y, &pc.Spare1FontSize, &pc.Spare1Bold, &pc.Spare1Align, &pc.Spare1Text, &pc.Spare1FontColor, &pc.Spare2Display, &pc.Spare2Width, &pc.Spare2Height, &pc.Spare2X, &pc.Spare2Y, &pc.Spare2FontSize, &pc.Spare2Bold, &pc.Spare2Align, &pc.Spare2Text, &pc.Spare2FontColor, &pc.UpdatedBy, &pc.Updated)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PracticeCardsByUpdatedBy retrieves a row from 'AllergyNew.practice_cards' as a PracticeCard.
//
// Generated from index 'practice_cards_updated'.
func PracticeCardsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PracticeCard, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, name, active, header_color_back, header_color_font, header_text, header_bold, header_font_size, logo, logo_width, logo_height, logo_X, logo_Y, pic_display, pic_width, pic_height, pic_X, pic_Y, name_width, name_height, name_X, name_Y, name_font_size, name_bold, name_align, dob_display, dob_width, dob_height, dob_X, dob_Y, dob_font_size, dob_bold, dob_align, lcn_display, lcn_width, lcn_height, lcn_X, lcn_Y, lcn_font_size, lcn_bold, lcn_align, doc_display, doc_width, doc_height, doc_X, doc_Y, doc_font_size, doc_bold, doc_align, spare1_display, spare1_width, spare1_height, spare1_X, spare1_Y, spare1_font_size, spare1_bold, spare1_align, spare1_text, spare1_font_color, spare2_display, spare2_width, spare2_height, spare2_X, spare2_Y, spare2_font_size, spare2_bold, spare2_align, spare2_text, spare2_font_color, updated_by, updated ` +
		`FROM AllergyNew.practice_cards ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PracticeCard{}
	for q.Next() {
		pc := PracticeCard{
			_exists: true,
		}

		// scan
		err = q.Scan(&pc.ID, &pc.PracticeID, &pc.Name, &pc.Active, &pc.HeaderColorBack, &pc.HeaderColorFont, &pc.HeaderText, &pc.HeaderBold, &pc.HeaderFontSize, &pc.Logo, &pc.LogoWidth, &pc.LogoHeight, &pc.LogoX, &pc.LogoY, &pc.PicDisplay, &pc.PicWidth, &pc.PicHeight, &pc.PicX, &pc.PicY, &pc.NameWidth, &pc.NameHeight, &pc.NameX, &pc.NameY, &pc.NameFontSize, &pc.NameBold, &pc.NameAlign, &pc.DobDisplay, &pc.DobWidth, &pc.DobHeight, &pc.DobX, &pc.DobY, &pc.DobFontSize, &pc.DobBold, &pc.DobAlign, &pc.LcnDisplay, &pc.LcnWidth, &pc.LcnHeight, &pc.LcnX, &pc.LcnY, &pc.LcnFontSize, &pc.LcnBold, &pc.LcnAlign, &pc.DocDisplay, &pc.DocWidth, &pc.DocHeight, &pc.DocX, &pc.DocY, &pc.DocFontSize, &pc.DocBold, &pc.DocAlign, &pc.Spare1Display, &pc.Spare1Width, &pc.Spare1Height, &pc.Spare1X, &pc.Spare1Y, &pc.Spare1FontSize, &pc.Spare1Bold, &pc.Spare1Align, &pc.Spare1Text, &pc.Spare1FontColor, &pc.Spare2Display, &pc.Spare2Width, &pc.Spare2Height, &pc.Spare2X, &pc.Spare2Y, &pc.Spare2FontSize, &pc.Spare2Bold, &pc.Spare2Align, &pc.Spare2Text, &pc.Spare2FontColor, &pc.UpdatedBy, &pc.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}
