// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// FormulaHistory represents a row from 'AllergyNew.formula_history'.
type FormulaHistory struct {
	ID              uint          `json:"id"`                // id
	ParentFormulaID sql.NullInt64 `json:"parent_formula_id"` // parent_formula_id
	FormulaID       sql.NullInt64 `json:"formula_id"`        // formula_id
	Type            Type          `json:"type"`              // type
	Current         sql.NullInt64 `json:"current"`           // current
	Active          sql.NullInt64 `json:"active"`            // active
	UpdatedBy       sql.NullInt64 `json:"updated_by"`        // updated_by
	Updated         time.Time     `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FormulaHistory exists in the database.
func (fh *FormulaHistory) Exists() bool {
	return fh._exists
}

// Deleted provides information if the FormulaHistory has been deleted from the database.
func (fh *FormulaHistory) Deleted() bool {
	return fh._deleted
}

// Insert inserts the FormulaHistory to the database.
func (fh *FormulaHistory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fh._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.formula_history (` +
		`parent_formula_id, formula_id, type, current, active, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fh.ParentFormulaID, fh.FormulaID, fh.Type, fh.Current, fh.Active, fh.UpdatedBy, fh.Updated)
	res, err := db.Exec(sqlstr, fh.ParentFormulaID, fh.FormulaID, fh.Type, fh.Current, fh.Active, fh.UpdatedBy, fh.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fh.ID = uint(id)
	fh._exists = true

	return nil
}

// Update updates the FormulaHistory in the database.
func (fh *FormulaHistory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fh._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fh._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.formula_history SET ` +
		`parent_formula_id = ?, formula_id = ?, type = ?, current = ?, active = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, fh.ParentFormulaID, fh.FormulaID, fh.Type, fh.Current, fh.Active, fh.UpdatedBy, fh.Updated, fh.ID)
	_, err = db.Exec(sqlstr, fh.ParentFormulaID, fh.FormulaID, fh.Type, fh.Current, fh.Active, fh.UpdatedBy, fh.Updated, fh.ID)
	return err
}

// Save saves the FormulaHistory to the database.
func (fh *FormulaHistory) Save(db XODB) error {
	if fh.Exists() {
		return fh.Update(db)
	}

	return fh.Insert(db)
}

// Delete deletes the FormulaHistory from the database.
func (fh *FormulaHistory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fh._exists {
		return nil
	}

	// if deleted, bail
	if fh._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.formula_history WHERE id = ?`

	// run query
	XOLog(sqlstr, fh.ID)
	_, err = db.Exec(sqlstr, fh.ID)
	if err != nil {
		return err
	}

	// set deleted
	fh._deleted = true

	return nil
}

// FormulaByFormulaID returns the Formula associated with the FormulaHistory's FormulaID (formula_id).
//
// Generated from foreign key 'formula_history_formulas'.
func (fh *FormulaHistory) FormulaByFormulaID(db XODB) (*Formula, error) {
	return FormulaByID(db, uint(fh.FormulaID.Int64))
}

// FormulaByParentFormulaID returns the Formula associated with the FormulaHistory's ParentFormulaID (parent_formula_id).
//
// Generated from foreign key 'formula_history_parent_formulas'.
func (fh *FormulaHistory) FormulaByParentFormulaID(db XODB) (*Formula, error) {
	return FormulaByID(db, uint(fh.ParentFormulaID.Int64))
}

// FormulaHistoriesByCurrent retrieves a row from 'AllergyNew.formula_history' as a FormulaHistory.
//
// Generated from index 'Current_Formulas'.
func FormulaHistoriesByCurrent(db XODB, current sql.NullInt64) ([]*FormulaHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_formula_id, formula_id, type, current, active, updated_by, updated ` +
		`FROM AllergyNew.formula_history ` +
		`WHERE current = ?`

	// run query
	XOLog(sqlstr, current)
	q, err := db.Query(sqlstr, current)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaHistory{}
	for q.Next() {
		fh := FormulaHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&fh.ID, &fh.ParentFormulaID, &fh.FormulaID, &fh.Type, &fh.Current, &fh.Active, &fh.UpdatedBy, &fh.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fh)
	}

	return res, nil
}

// FormulaHistoriesByFormulaID retrieves a row from 'AllergyNew.formula_history' as a FormulaHistory.
//
// Generated from index 'Formula_ID'.
func FormulaHistoriesByFormulaID(db XODB, formulaID sql.NullInt64) ([]*FormulaHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_formula_id, formula_id, type, current, active, updated_by, updated ` +
		`FROM AllergyNew.formula_history ` +
		`WHERE formula_id = ?`

	// run query
	XOLog(sqlstr, formulaID)
	q, err := db.Query(sqlstr, formulaID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaHistory{}
	for q.Next() {
		fh := FormulaHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&fh.ID, &fh.ParentFormulaID, &fh.FormulaID, &fh.Type, &fh.Current, &fh.Active, &fh.UpdatedBy, &fh.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fh)
	}

	return res, nil
}

// FormulaHistoriesByParentFormulaID retrieves a row from 'AllergyNew.formula_history' as a FormulaHistory.
//
// Generated from index 'Parent_Formula_ID'.
func FormulaHistoriesByParentFormulaID(db XODB, parentFormulaID sql.NullInt64) ([]*FormulaHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_formula_id, formula_id, type, current, active, updated_by, updated ` +
		`FROM AllergyNew.formula_history ` +
		`WHERE parent_formula_id = ?`

	// run query
	XOLog(sqlstr, parentFormulaID)
	q, err := db.Query(sqlstr, parentFormulaID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FormulaHistory{}
	for q.Next() {
		fh := FormulaHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&fh.ID, &fh.ParentFormulaID, &fh.FormulaID, &fh.Type, &fh.Current, &fh.Active, &fh.UpdatedBy, &fh.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fh)
	}

	return res, nil
}

// FormulaHistoryByID retrieves a row from 'AllergyNew.formula_history' as a FormulaHistory.
//
// Generated from index 'formula_history_id_pkey'.
func FormulaHistoryByID(db XODB, id uint) (*FormulaHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_formula_id, formula_id, type, current, active, updated_by, updated ` +
		`FROM AllergyNew.formula_history ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fh := FormulaHistory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fh.ID, &fh.ParentFormulaID, &fh.FormulaID, &fh.Type, &fh.Current, &fh.Active, &fh.UpdatedBy, &fh.Updated)
	if err != nil {
		return nil, err
	}

	return &fh, nil
}
