// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// ApplicationMessage represents a row from 'AllergyNew.application_messages'.
type ApplicationMessage struct {
	ID             uint           `json:"id"`              // id
	MessageName    sql.NullString `json:"message_name"`    // message_name
	ReleaseDate    mysql.NullTime `json:"release_date"`    // release_date
	ExpirationDate mysql.NullTime `json:"expiration_date"` // expiration_date
	Message        sql.NullString `json:"message"`         // message
	Deleted        int8           `json:"deleted"`         // deleted
	UpdatedBy      sql.NullInt64  `json:"updated_by"`      // updated_by
	Updated        time.Time      `json:"updated"`         // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ApplicationMessage exists in the database.
func (am *ApplicationMessage) Exists() bool {
	return am._exists
}

// Deleted provides information if the ApplicationMessage has been deleted from the database.
func (am *ApplicationMessage) Deleted() bool {
	return am._deleted
}

// Insert inserts the ApplicationMessage to the database.
func (am *ApplicationMessage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if am._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.application_messages (` +
		`message_name, release_date, expiration_date, message, deleted, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, am.MessageName, am.ReleaseDate, am.ExpirationDate, am.Message, am.Deleted, am.UpdatedBy, am.Updated)
	res, err := db.Exec(sqlstr, am.MessageName, am.ReleaseDate, am.ExpirationDate, am.Message, am.Deleted, am.UpdatedBy, am.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	am.ID = uint(id)
	am._exists = true

	return nil
}

// Update updates the ApplicationMessage in the database.
func (am *ApplicationMessage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !am._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if am._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.application_messages SET ` +
		`message_name = ?, release_date = ?, expiration_date = ?, message = ?, deleted = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, am.MessageName, am.ReleaseDate, am.ExpirationDate, am.Message, am.Deleted, am.UpdatedBy, am.Updated, am.ID)
	_, err = db.Exec(sqlstr, am.MessageName, am.ReleaseDate, am.ExpirationDate, am.Message, am.Deleted, am.UpdatedBy, am.Updated, am.ID)
	return err
}

// Save saves the ApplicationMessage to the database.
func (am *ApplicationMessage) Save(db XODB) error {
	if am.Exists() {
		return am.Update(db)
	}

	return am.Insert(db)
}

// Delete deletes the ApplicationMessage from the database.
func (am *ApplicationMessage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !am._exists {
		return nil
	}

	// if deleted, bail
	if am._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.application_messages WHERE id = ?`

	// run query
	XOLog(sqlstr, am.ID)
	_, err = db.Exec(sqlstr, am.ID)
	if err != nil {
		return err
	}

	// set deleted
	am._deleted = true

	return nil
}

// ApplicationMessageByID retrieves a row from 'AllergyNew.application_messages' as a ApplicationMessage.
//
// Generated from index 'application_messages_id_pkey'.
func ApplicationMessageByID(db XODB, id uint) (*ApplicationMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, message_name, release_date, expiration_date, message, deleted, updated_by, updated ` +
		`FROM AllergyNew.application_messages ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	am := ApplicationMessage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&am.ID, &am.MessageName, &am.ReleaseDate, &am.ExpirationDate, &am.Message, &am.Deleted, &am.UpdatedBy, &am.Updated)
	if err != nil {
		return nil, err
	}

	return &am, nil
}
