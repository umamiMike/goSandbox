// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// HandledAlert represents a row from 'AllergyNew.handled_alerts'.
type HandledAlert struct {
	ID        uint          `json:"id"`         // id
	AlertID   sql.NullInt64 `json:"alert_id"`   // alert_id
	UserID    sql.NullInt64 `json:"user_id"`    // user_id
	UpdatedBy sql.NullInt64 `json:"updated_by"` // updated_by
	Updated   time.Time     `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HandledAlert exists in the database.
func (ha *HandledAlert) Exists() bool {
	return ha._exists
}

// Deleted provides information if the HandledAlert has been deleted from the database.
func (ha *HandledAlert) Deleted() bool {
	return ha._deleted
}

// Insert inserts the HandledAlert to the database.
func (ha *HandledAlert) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ha._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.handled_alerts (` +
		`alert_id, user_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ha.AlertID, ha.UserID, ha.UpdatedBy, ha.Updated)
	res, err := db.Exec(sqlstr, ha.AlertID, ha.UserID, ha.UpdatedBy, ha.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ha.ID = uint(id)
	ha._exists = true

	return nil
}

// Update updates the HandledAlert in the database.
func (ha *HandledAlert) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ha._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ha._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.handled_alerts SET ` +
		`alert_id = ?, user_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ha.AlertID, ha.UserID, ha.UpdatedBy, ha.Updated, ha.ID)
	_, err = db.Exec(sqlstr, ha.AlertID, ha.UserID, ha.UpdatedBy, ha.Updated, ha.ID)
	return err
}

// Save saves the HandledAlert to the database.
func (ha *HandledAlert) Save(db XODB) error {
	if ha.Exists() {
		return ha.Update(db)
	}

	return ha.Insert(db)
}

// Delete deletes the HandledAlert from the database.
func (ha *HandledAlert) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ha._exists {
		return nil
	}

	// if deleted, bail
	if ha._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.handled_alerts WHERE id = ?`

	// run query
	XOLog(sqlstr, ha.ID)
	_, err = db.Exec(sqlstr, ha.ID)
	if err != nil {
		return err
	}

	// set deleted
	ha._deleted = true

	return nil
}

// Alert returns the Alert associated with the HandledAlert's AlertID (alert_id).
//
// Generated from foreign key 'alerts_alert_id'.
func (ha *HandledAlert) Alert(db XODB) (*Alert, error) {
	return AlertByID(db, uint(ha.AlertID.Int64))
}

// User returns the User associated with the HandledAlert's UserID (user_id).
//
// Generated from foreign key 'alerts_user_id'.
func (ha *HandledAlert) User(db XODB) (*User, error) {
	return UserByID(db, uint(ha.UserID.Int64))
}

// HandledAlertsByAlertID retrieves a row from 'AllergyNew.handled_alerts' as a HandledAlert.
//
// Generated from index 'Alerts'.
func HandledAlertsByAlertID(db XODB, alertID sql.NullInt64) ([]*HandledAlert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, alert_id, user_id, updated_by, updated ` +
		`FROM AllergyNew.handled_alerts ` +
		`WHERE alert_id = ?`

	// run query
	XOLog(sqlstr, alertID)
	q, err := db.Query(sqlstr, alertID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HandledAlert{}
	for q.Next() {
		ha := HandledAlert{
			_exists: true,
		}

		// scan
		err = q.Scan(&ha.ID, &ha.AlertID, &ha.UserID, &ha.UpdatedBy, &ha.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ha)
	}

	return res, nil
}

// HandledAlertsByUserID retrieves a row from 'AllergyNew.handled_alerts' as a HandledAlert.
//
// Generated from index 'Users'.
func HandledAlertsByUserID(db XODB, userID sql.NullInt64) ([]*HandledAlert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, alert_id, user_id, updated_by, updated ` +
		`FROM AllergyNew.handled_alerts ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HandledAlert{}
	for q.Next() {
		ha := HandledAlert{
			_exists: true,
		}

		// scan
		err = q.Scan(&ha.ID, &ha.AlertID, &ha.UserID, &ha.UpdatedBy, &ha.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ha)
	}

	return res, nil
}

// HandledAlertByID retrieves a row from 'AllergyNew.handled_alerts' as a HandledAlert.
//
// Generated from index 'handled_alerts_id_pkey'.
func HandledAlertByID(db XODB, id uint) (*HandledAlert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, alert_id, user_id, updated_by, updated ` +
		`FROM AllergyNew.handled_alerts ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ha := HandledAlert{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ha.ID, &ha.AlertID, &ha.UserID, &ha.UpdatedBy, &ha.Updated)
	if err != nil {
		return nil, err
	}

	return &ha, nil
}
