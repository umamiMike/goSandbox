// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Module represents a row from 'AllergyNew.modules'.
type Module struct {
	ID        uint           `json:"id"`         // id
	Shortname sql.NullString `json:"shortname"`  // shortname
	CSSClass  sql.NullString `json:"css_class"`  // css_class
	Name      sql.NullString `json:"name"`       // name
	Bgcolor   sql.NullString `json:"bgcolor"`    // bgcolor
	Priority  sql.NullInt64  `json:"priority"`   // priority
	Enabled   sql.NullInt64  `json:"enabled"`    // enabled
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Module exists in the database.
func (m *Module) Exists() bool {
	return m._exists
}

// Deleted provides information if the Module has been deleted from the database.
func (m *Module) Deleted() bool {
	return m._deleted
}

// Insert inserts the Module to the database.
func (m *Module) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.modules (` +
		`shortname, css_class, name, bgcolor, priority, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.Shortname, m.CSSClass, m.Name, m.Bgcolor, m.Priority, m.Enabled, m.UpdatedBy, m.Updated)
	res, err := db.Exec(sqlstr, m.Shortname, m.CSSClass, m.Name, m.Bgcolor, m.Priority, m.Enabled, m.UpdatedBy, m.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.ID = uint(id)
	m._exists = true

	return nil
}

// Update updates the Module in the database.
func (m *Module) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.modules SET ` +
		`shortname = ?, css_class = ?, name = ?, bgcolor = ?, priority = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, m.Shortname, m.CSSClass, m.Name, m.Bgcolor, m.Priority, m.Enabled, m.UpdatedBy, m.Updated, m.ID)
	_, err = db.Exec(sqlstr, m.Shortname, m.CSSClass, m.Name, m.Bgcolor, m.Priority, m.Enabled, m.UpdatedBy, m.Updated, m.ID)
	return err
}

// Save saves the Module to the database.
func (m *Module) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Delete deletes the Module from the database.
func (m *Module) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.modules WHERE id = ?`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// ModuleByID retrieves a row from 'AllergyNew.modules' as a Module.
//
// Generated from index 'modules_id_pkey'.
func ModuleByID(db XODB, id uint) (*Module, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, shortname, css_class, name, bgcolor, priority, enabled, updated_by, updated ` +
		`FROM AllergyNew.modules ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Module{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.Shortname, &m.CSSClass, &m.Name, &m.Bgcolor, &m.Priority, &m.Enabled, &m.UpdatedBy, &m.Updated)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
