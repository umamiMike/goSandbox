// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// MixMethod is the 'mix_method' enum type from schema 'AllergyNew'.
type MixMethod uint16

const (
	// MixMethodStr is the 'str' MixMethod.
	MixMethodStr = MixMethod(1)

	// MixMethodDil is the 'dil' MixMethod.
	MixMethodDil = MixMethod(2)

	// MixMethodUnk is the 'unk' MixMethod.
	MixMethodUnk = MixMethod(3)
)

// String returns the string value of the MixMethod.
func (mm MixMethod) String() string {
	var enumVal string

	switch mm {
	case MixMethodStr:
		enumVal = "str"

	case MixMethodDil:
		enumVal = "dil"

	case MixMethodUnk:
		enumVal = "unk"
	}

	return enumVal
}

// MarshalText marshals MixMethod into text.
func (mm MixMethod) MarshalText() ([]byte, error) {
	return []byte(mm.String()), nil
}

// UnmarshalText unmarshals MixMethod from text.
func (mm *MixMethod) UnmarshalText(text []byte) error {
	switch string(text) {
	case "str":
		*mm = MixMethodStr

	case "dil":
		*mm = MixMethodDil

	case "unk":
		*mm = MixMethodUnk

	default:
		return errors.New("invalid MixMethod")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for MixMethod.
func (mm MixMethod) Value() (driver.Value, error) {
	return mm.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for MixMethod.
func (mm *MixMethod) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid MixMethod")
	}

	return mm.UnmarshalText(buf)
}
