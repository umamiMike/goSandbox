// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// IgeMapClassKulRange represents a row from 'AllergyNew.ige_map_class_kul_range'.
type IgeMapClassKulRange struct {
	ID              uint            `json:"id"`               // id
	PracticeID      uint            `json:"practice_id"`      // practice_id
	Class           string          `json:"class"`            // class
	AntigenStrength sql.NullInt64   `json:"antigen_strength"` // antigen_strength
	KulRangeStart   sql.NullFloat64 `json:"kul_range_start"`  // kul_range_start
	KulRangeEnd     sql.NullFloat64 `json:"kul_range_end"`    // kul_range_end
	UpdatedBy       sql.NullInt64   `json:"updated_by"`       // updated_by
	Updated         time.Time       `json:"updated"`          // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IgeMapClassKulRange exists in the database.
func (imckr *IgeMapClassKulRange) Exists() bool {
	return imckr._exists
}

// Deleted provides information if the IgeMapClassKulRange has been deleted from the database.
func (imckr *IgeMapClassKulRange) Deleted() bool {
	return imckr._deleted
}

// Insert inserts the IgeMapClassKulRange to the database.
func (imckr *IgeMapClassKulRange) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if imckr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.ige_map_class_kul_range (` +
		`practice_id, class, antigen_strength, kul_range_start, kul_range_end, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, imckr.PracticeID, imckr.Class, imckr.AntigenStrength, imckr.KulRangeStart, imckr.KulRangeEnd, imckr.UpdatedBy, imckr.Updated)
	res, err := db.Exec(sqlstr, imckr.PracticeID, imckr.Class, imckr.AntigenStrength, imckr.KulRangeStart, imckr.KulRangeEnd, imckr.UpdatedBy, imckr.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	imckr.ID = uint(id)
	imckr._exists = true

	return nil
}

// Update updates the IgeMapClassKulRange in the database.
func (imckr *IgeMapClassKulRange) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !imckr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if imckr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.ige_map_class_kul_range SET ` +
		`practice_id = ?, class = ?, antigen_strength = ?, kul_range_start = ?, kul_range_end = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, imckr.PracticeID, imckr.Class, imckr.AntigenStrength, imckr.KulRangeStart, imckr.KulRangeEnd, imckr.UpdatedBy, imckr.Updated, imckr.ID)
	_, err = db.Exec(sqlstr, imckr.PracticeID, imckr.Class, imckr.AntigenStrength, imckr.KulRangeStart, imckr.KulRangeEnd, imckr.UpdatedBy, imckr.Updated, imckr.ID)
	return err
}

// Save saves the IgeMapClassKulRange to the database.
func (imckr *IgeMapClassKulRange) Save(db XODB) error {
	if imckr.Exists() {
		return imckr.Update(db)
	}

	return imckr.Insert(db)
}

// Delete deletes the IgeMapClassKulRange from the database.
func (imckr *IgeMapClassKulRange) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !imckr._exists {
		return nil
	}

	// if deleted, bail
	if imckr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.ige_map_class_kul_range WHERE id = ?`

	// run query
	XOLog(sqlstr, imckr.ID)
	_, err = db.Exec(sqlstr, imckr.ID)
	if err != nil {
		return err
	}

	// set deleted
	imckr._deleted = true

	return nil
}

// IgeMapClassKulRangeByID retrieves a row from 'AllergyNew.ige_map_class_kul_range' as a IgeMapClassKulRange.
//
// Generated from index 'ige_map_class_kul_range_id_pkey'.
func IgeMapClassKulRangeByID(db XODB, id uint) (*IgeMapClassKulRange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, class, antigen_strength, kul_range_start, kul_range_end, updated_by, updated ` +
		`FROM AllergyNew.ige_map_class_kul_range ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	imckr := IgeMapClassKulRange{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&imckr.ID, &imckr.PracticeID, &imckr.Class, &imckr.AntigenStrength, &imckr.KulRangeStart, &imckr.KulRangeEnd, &imckr.UpdatedBy, &imckr.Updated)
	if err != nil {
		return nil, err
	}

	return &imckr, nil
}
