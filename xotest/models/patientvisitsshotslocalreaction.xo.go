// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// PatientVisitsShotsLocalReaction represents a row from 'AllergyNew.patient_visits_shots_local_reactions'.
type PatientVisitsShotsLocalReaction struct {
	ID          uint           `json:"id"`           // id
	PatientID   sql.NullInt64  `json:"patient_id"`   // patient_id
	VisitID     sql.NullInt64  `json:"visit_id"`     // visit_id
	VialID      sql.NullInt64  `json:"vial_id"`      // vial_id
	ShotID      sql.NullInt64  `json:"shot_id"`      // shot_id
	Size        sql.NullString `json:"size"`         // size
	Duration    sql.NullString `json:"duration"`     // duration
	Symptoms    sql.NullString `json:"symptoms"`     // symptoms
	DateAdded   mysql.NullTime `json:"date_added"`   // date_added
	AddedBy     sql.NullInt64  `json:"added_by"`     // added_by
	DateRemoved mysql.NullTime `json:"date_removed"` // date_removed
	RemovedBy   sql.NullInt64  `json:"removed_by"`   // removed_by
	UpdatedBy   sql.NullInt64  `json:"updated_by"`   // updated_by
	Updated     time.Time      `json:"updated"`      // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PatientVisitsShotsLocalReaction exists in the database.
func (pvslr *PatientVisitsShotsLocalReaction) Exists() bool {
	return pvslr._exists
}

// Deleted provides information if the PatientVisitsShotsLocalReaction has been deleted from the database.
func (pvslr *PatientVisitsShotsLocalReaction) Deleted() bool {
	return pvslr._deleted
}

// Insert inserts the PatientVisitsShotsLocalReaction to the database.
func (pvslr *PatientVisitsShotsLocalReaction) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pvslr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.patient_visits_shots_local_reactions (` +
		`patient_id, visit_id, vial_id, shot_id, size, duration, symptoms, date_added, added_by, date_removed, removed_by, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pvslr.PatientID, pvslr.VisitID, pvslr.VialID, pvslr.ShotID, pvslr.Size, pvslr.Duration, pvslr.Symptoms, pvslr.DateAdded, pvslr.AddedBy, pvslr.DateRemoved, pvslr.RemovedBy, pvslr.UpdatedBy, pvslr.Updated)
	res, err := db.Exec(sqlstr, pvslr.PatientID, pvslr.VisitID, pvslr.VialID, pvslr.ShotID, pvslr.Size, pvslr.Duration, pvslr.Symptoms, pvslr.DateAdded, pvslr.AddedBy, pvslr.DateRemoved, pvslr.RemovedBy, pvslr.UpdatedBy, pvslr.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pvslr.ID = uint(id)
	pvslr._exists = true

	return nil
}

// Update updates the PatientVisitsShotsLocalReaction in the database.
func (pvslr *PatientVisitsShotsLocalReaction) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvslr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pvslr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.patient_visits_shots_local_reactions SET ` +
		`patient_id = ?, visit_id = ?, vial_id = ?, shot_id = ?, size = ?, duration = ?, symptoms = ?, date_added = ?, added_by = ?, date_removed = ?, removed_by = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pvslr.PatientID, pvslr.VisitID, pvslr.VialID, pvslr.ShotID, pvslr.Size, pvslr.Duration, pvslr.Symptoms, pvslr.DateAdded, pvslr.AddedBy, pvslr.DateRemoved, pvslr.RemovedBy, pvslr.UpdatedBy, pvslr.Updated, pvslr.ID)
	_, err = db.Exec(sqlstr, pvslr.PatientID, pvslr.VisitID, pvslr.VialID, pvslr.ShotID, pvslr.Size, pvslr.Duration, pvslr.Symptoms, pvslr.DateAdded, pvslr.AddedBy, pvslr.DateRemoved, pvslr.RemovedBy, pvslr.UpdatedBy, pvslr.Updated, pvslr.ID)
	return err
}

// Save saves the PatientVisitsShotsLocalReaction to the database.
func (pvslr *PatientVisitsShotsLocalReaction) Save(db XODB) error {
	if pvslr.Exists() {
		return pvslr.Update(db)
	}

	return pvslr.Insert(db)
}

// Delete deletes the PatientVisitsShotsLocalReaction from the database.
func (pvslr *PatientVisitsShotsLocalReaction) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pvslr._exists {
		return nil
	}

	// if deleted, bail
	if pvslr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.patient_visits_shots_local_reactions WHERE id = ?`

	// run query
	XOLog(sqlstr, pvslr.ID)
	_, err = db.Exec(sqlstr, pvslr.ID)
	if err != nil {
		return err
	}

	// set deleted
	pvslr._deleted = true

	return nil
}

// UserByAddedBy returns the User associated with the PatientVisitsShotsLocalReaction's AddedBy (added_by).
//
// Generated from foreign key 'patient_visits_shots_local_reactions_added_by'.
func (pvslr *PatientVisitsShotsLocalReaction) UserByAddedBy(db XODB) (*User, error) {
	return UserByID(db, uint(pvslr.AddedBy.Int64))
}

// Patient returns the Patient associated with the PatientVisitsShotsLocalReaction's PatientID (patient_id).
//
// Generated from foreign key 'patient_visits_shots_local_reactions_patient'.
func (pvslr *PatientVisitsShotsLocalReaction) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(pvslr.PatientID.Int64))
}

// PatientVisitsShot returns the PatientVisitsShot associated with the PatientVisitsShotsLocalReaction's ShotID (shot_id).
//
// Generated from foreign key 'patient_visits_shots_local_reactions_shots'.
func (pvslr *PatientVisitsShotsLocalReaction) PatientVisitsShot(db XODB) (*PatientVisitsShot, error) {
	return PatientVisitsShotByID(db, uint(pvslr.ShotID.Int64))
}

// UserByUpdatedBy returns the User associated with the PatientVisitsShotsLocalReaction's UpdatedBy (updated_by).
//
// Generated from foreign key 'patient_visits_shots_local_reactions_updated'.
func (pvslr *PatientVisitsShotsLocalReaction) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(pvslr.UpdatedBy.Int64))
}

// Vial returns the Vial associated with the PatientVisitsShotsLocalReaction's VialID (vial_id).
//
// Generated from foreign key 'patient_visits_shots_local_reactions_vials'.
func (pvslr *PatientVisitsShotsLocalReaction) Vial(db XODB) (*Vial, error) {
	return VialByID(db, uint(pvslr.VialID.Int64))
}

// PatientVisit returns the PatientVisit associated with the PatientVisitsShotsLocalReaction's VisitID (visit_id).
//
// Generated from foreign key 'patient_visits_shots_local_reactions_visits'.
func (pvslr *PatientVisitsShotsLocalReaction) PatientVisit(db XODB) (*PatientVisit, error) {
	return PatientVisitByID(db, uint(pvslr.VisitID.Int64))
}

// PatientVisitsShotsLocalReactionsByPatientID retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions' as a PatientVisitsShotsLocalReaction.
//
// Generated from index 'Patients'.
func PatientVisitsShotsLocalReactionsByPatientID(db XODB, patientID sql.NullInt64) ([]*PatientVisitsShotsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, visit_id, vial_id, shot_id, size, duration, symptoms, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShotsLocalReaction{}
	for q.Next() {
		pvslr := PatientVisitsShotsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvslr.ID, &pvslr.PatientID, &pvslr.VisitID, &pvslr.VialID, &pvslr.ShotID, &pvslr.Size, &pvslr.Duration, &pvslr.Symptoms, &pvslr.DateAdded, &pvslr.AddedBy, &pvslr.DateRemoved, &pvslr.RemovedBy, &pvslr.UpdatedBy, &pvslr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvslr)
	}

	return res, nil
}

// PatientVisitsShotsLocalReactionsByShotID retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions' as a PatientVisitsShotsLocalReaction.
//
// Generated from index 'Shots'.
func PatientVisitsShotsLocalReactionsByShotID(db XODB, shotID sql.NullInt64) ([]*PatientVisitsShotsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, visit_id, vial_id, shot_id, size, duration, symptoms, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions ` +
		`WHERE shot_id = ?`

	// run query
	XOLog(sqlstr, shotID)
	q, err := db.Query(sqlstr, shotID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShotsLocalReaction{}
	for q.Next() {
		pvslr := PatientVisitsShotsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvslr.ID, &pvslr.PatientID, &pvslr.VisitID, &pvslr.VialID, &pvslr.ShotID, &pvslr.Size, &pvslr.Duration, &pvslr.Symptoms, &pvslr.DateAdded, &pvslr.AddedBy, &pvslr.DateRemoved, &pvslr.RemovedBy, &pvslr.UpdatedBy, &pvslr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvslr)
	}

	return res, nil
}

// PatientVisitsShotsLocalReactionsByVialID retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions' as a PatientVisitsShotsLocalReaction.
//
// Generated from index 'Vials'.
func PatientVisitsShotsLocalReactionsByVialID(db XODB, vialID sql.NullInt64) ([]*PatientVisitsShotsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, visit_id, vial_id, shot_id, size, duration, symptoms, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions ` +
		`WHERE vial_id = ?`

	// run query
	XOLog(sqlstr, vialID)
	q, err := db.Query(sqlstr, vialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShotsLocalReaction{}
	for q.Next() {
		pvslr := PatientVisitsShotsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvslr.ID, &pvslr.PatientID, &pvslr.VisitID, &pvslr.VialID, &pvslr.ShotID, &pvslr.Size, &pvslr.Duration, &pvslr.Symptoms, &pvslr.DateAdded, &pvslr.AddedBy, &pvslr.DateRemoved, &pvslr.RemovedBy, &pvslr.UpdatedBy, &pvslr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvslr)
	}

	return res, nil
}

// PatientVisitsShotsLocalReactionsByVisitID retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions' as a PatientVisitsShotsLocalReaction.
//
// Generated from index 'Visits'.
func PatientVisitsShotsLocalReactionsByVisitID(db XODB, visitID sql.NullInt64) ([]*PatientVisitsShotsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, visit_id, vial_id, shot_id, size, duration, symptoms, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions ` +
		`WHERE visit_id = ?`

	// run query
	XOLog(sqlstr, visitID)
	q, err := db.Query(sqlstr, visitID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShotsLocalReaction{}
	for q.Next() {
		pvslr := PatientVisitsShotsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvslr.ID, &pvslr.PatientID, &pvslr.VisitID, &pvslr.VialID, &pvslr.ShotID, &pvslr.Size, &pvslr.Duration, &pvslr.Symptoms, &pvslr.DateAdded, &pvslr.AddedBy, &pvslr.DateRemoved, &pvslr.RemovedBy, &pvslr.UpdatedBy, &pvslr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvslr)
	}

	return res, nil
}

// PatientVisitsShotsLocalReactionsByAddedBy retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions' as a PatientVisitsShotsLocalReaction.
//
// Generated from index 'patient_visits_shots_local_reactions_added_by'.
func PatientVisitsShotsLocalReactionsByAddedBy(db XODB, addedBy sql.NullInt64) ([]*PatientVisitsShotsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, visit_id, vial_id, shot_id, size, duration, symptoms, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions ` +
		`WHERE added_by = ?`

	// run query
	XOLog(sqlstr, addedBy)
	q, err := db.Query(sqlstr, addedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShotsLocalReaction{}
	for q.Next() {
		pvslr := PatientVisitsShotsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvslr.ID, &pvslr.PatientID, &pvslr.VisitID, &pvslr.VialID, &pvslr.ShotID, &pvslr.Size, &pvslr.Duration, &pvslr.Symptoms, &pvslr.DateAdded, &pvslr.AddedBy, &pvslr.DateRemoved, &pvslr.RemovedBy, &pvslr.UpdatedBy, &pvslr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvslr)
	}

	return res, nil
}

// PatientVisitsShotsLocalReactionByID retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions' as a PatientVisitsShotsLocalReaction.
//
// Generated from index 'patient_visits_shots_local_reactions_id_pkey'.
func PatientVisitsShotsLocalReactionByID(db XODB, id uint) (*PatientVisitsShotsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, visit_id, vial_id, shot_id, size, duration, symptoms, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pvslr := PatientVisitsShotsLocalReaction{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pvslr.ID, &pvslr.PatientID, &pvslr.VisitID, &pvslr.VialID, &pvslr.ShotID, &pvslr.Size, &pvslr.Duration, &pvslr.Symptoms, &pvslr.DateAdded, &pvslr.AddedBy, &pvslr.DateRemoved, &pvslr.RemovedBy, &pvslr.UpdatedBy, &pvslr.Updated)
	if err != nil {
		return nil, err
	}

	return &pvslr, nil
}

// PatientVisitsShotsLocalReactionsByUpdatedBy retrieves a row from 'AllergyNew.patient_visits_shots_local_reactions' as a PatientVisitsShotsLocalReaction.
//
// Generated from index 'patient_visits_shots_local_reactions_updated'.
func PatientVisitsShotsLocalReactionsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*PatientVisitsShotsLocalReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, patient_id, visit_id, vial_id, shot_id, size, duration, symptoms, date_added, added_by, date_removed, removed_by, updated_by, updated ` +
		`FROM AllergyNew.patient_visits_shots_local_reactions ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PatientVisitsShotsLocalReaction{}
	for q.Next() {
		pvslr := PatientVisitsShotsLocalReaction{
			_exists: true,
		}

		// scan
		err = q.Scan(&pvslr.ID, &pvslr.PatientID, &pvslr.VisitID, &pvslr.VialID, &pvslr.ShotID, &pvslr.Size, &pvslr.Duration, &pvslr.Symptoms, &pvslr.DateAdded, &pvslr.AddedBy, &pvslr.DateRemoved, &pvslr.RemovedBy, &pvslr.UpdatedBy, &pvslr.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &pvslr)
	}

	return res, nil
}
