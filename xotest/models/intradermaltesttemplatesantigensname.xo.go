// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// IntradermalTestTemplatesAntigensName represents a row from 'AllergyNew.intradermal_test_templates_antigens_names'.
type IntradermalTestTemplatesAntigensName struct {
	ID        uint           `json:"id"`         // id
	AntigenID sql.NullInt64  `json:"antigen_id"` // antigen_id
	Name      sql.NullString `json:"name"`       // name
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the IntradermalTestTemplatesAntigensName exists in the database.
func (ittan *IntradermalTestTemplatesAntigensName) Exists() bool {
	return ittan._exists
}

// Deleted provides information if the IntradermalTestTemplatesAntigensName has been deleted from the database.
func (ittan *IntradermalTestTemplatesAntigensName) Deleted() bool {
	return ittan._deleted
}

// Insert inserts the IntradermalTestTemplatesAntigensName to the database.
func (ittan *IntradermalTestTemplatesAntigensName) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ittan._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.intradermal_test_templates_antigens_names (` +
		`antigen_id, name, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ittan.AntigenID, ittan.Name, ittan.UpdatedBy, ittan.Updated)
	res, err := db.Exec(sqlstr, ittan.AntigenID, ittan.Name, ittan.UpdatedBy, ittan.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ittan.ID = uint(id)
	ittan._exists = true

	return nil
}

// Update updates the IntradermalTestTemplatesAntigensName in the database.
func (ittan *IntradermalTestTemplatesAntigensName) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ittan._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ittan._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.intradermal_test_templates_antigens_names SET ` +
		`antigen_id = ?, name = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ittan.AntigenID, ittan.Name, ittan.UpdatedBy, ittan.Updated, ittan.ID)
	_, err = db.Exec(sqlstr, ittan.AntigenID, ittan.Name, ittan.UpdatedBy, ittan.Updated, ittan.ID)
	return err
}

// Save saves the IntradermalTestTemplatesAntigensName to the database.
func (ittan *IntradermalTestTemplatesAntigensName) Save(db XODB) error {
	if ittan.Exists() {
		return ittan.Update(db)
	}

	return ittan.Insert(db)
}

// Delete deletes the IntradermalTestTemplatesAntigensName from the database.
func (ittan *IntradermalTestTemplatesAntigensName) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ittan._exists {
		return nil
	}

	// if deleted, bail
	if ittan._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.intradermal_test_templates_antigens_names WHERE id = ?`

	// run query
	XOLog(sqlstr, ittan.ID)
	_, err = db.Exec(sqlstr, ittan.ID)
	if err != nil {
		return err
	}

	// set deleted
	ittan._deleted = true

	return nil
}

// IntradermalTestTemplatesAntigensNamesByAntigenID retrieves a row from 'AllergyNew.intradermal_test_templates_antigens_names' as a IntradermalTestTemplatesAntigensName.
//
// Generated from index 'Antigens'.
func IntradermalTestTemplatesAntigensNamesByAntigenID(db XODB, antigenID sql.NullInt64) ([]*IntradermalTestTemplatesAntigensName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, antigen_id, name, updated_by, updated ` +
		`FROM AllergyNew.intradermal_test_templates_antigens_names ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*IntradermalTestTemplatesAntigensName{}
	for q.Next() {
		ittan := IntradermalTestTemplatesAntigensName{
			_exists: true,
		}

		// scan
		err = q.Scan(&ittan.ID, &ittan.AntigenID, &ittan.Name, &ittan.UpdatedBy, &ittan.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ittan)
	}

	return res, nil
}

// IntradermalTestTemplatesAntigensNameByID retrieves a row from 'AllergyNew.intradermal_test_templates_antigens_names' as a IntradermalTestTemplatesAntigensName.
//
// Generated from index 'intradermal_test_templates_antigens_names_id_pkey'.
func IntradermalTestTemplatesAntigensNameByID(db XODB, id uint) (*IntradermalTestTemplatesAntigensName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, antigen_id, name, updated_by, updated ` +
		`FROM AllergyNew.intradermal_test_templates_antigens_names ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ittan := IntradermalTestTemplatesAntigensName{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ittan.ID, &ittan.AntigenID, &ittan.Name, &ittan.UpdatedBy, &ittan.Updated)
	if err != nil {
		return nil, err
	}

	return &ittan, nil
}
