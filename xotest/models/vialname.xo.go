// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialName represents a row from 'AllergyNew.vial_names'.
type VialName struct {
	ID        uint           `json:"id"`         // id
	VialID    sql.NullInt64  `json:"vial_id"`    // vial_id
	Name      sql.NullString `json:"name"`       // name
	UpdatedBy sql.NullInt64  `json:"updated_by"` // updated_by
	Updated   time.Time      `json:"updated"`    // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialName exists in the database.
func (vn *VialName) Exists() bool {
	return vn._exists
}

// Deleted provides information if the VialName has been deleted from the database.
func (vn *VialName) Deleted() bool {
	return vn._deleted
}

// Insert inserts the VialName to the database.
func (vn *VialName) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_names (` +
		`vial_id, name, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, vn.VialID, vn.Name, vn.UpdatedBy, vn.Updated)
	res, err := db.Exec(sqlstr, vn.VialID, vn.Name, vn.UpdatedBy, vn.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	vn.ID = uint(id)
	vn._exists = true

	return nil
}

// Update updates the VialName in the database.
func (vn *VialName) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_names SET ` +
		`vial_id = ?, name = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, vn.VialID, vn.Name, vn.UpdatedBy, vn.Updated, vn.ID)
	_, err = db.Exec(sqlstr, vn.VialID, vn.Name, vn.UpdatedBy, vn.Updated, vn.ID)
	return err
}

// Save saves the VialName to the database.
func (vn *VialName) Save(db XODB) error {
	if vn.Exists() {
		return vn.Update(db)
	}

	return vn.Insert(db)
}

// Delete deletes the VialName from the database.
func (vn *VialName) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vn._exists {
		return nil
	}

	// if deleted, bail
	if vn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_names WHERE id = ?`

	// run query
	XOLog(sqlstr, vn.ID)
	_, err = db.Exec(sqlstr, vn.ID)
	if err != nil {
		return err
	}

	// set deleted
	vn._deleted = true

	return nil
}

// VialNamesByVialID retrieves a row from 'AllergyNew.vial_names' as a VialName.
//
// Generated from index 'Vials'.
func VialNamesByVialID(db XODB, vialID sql.NullInt64) ([]*VialName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, name, updated_by, updated ` +
		`FROM AllergyNew.vial_names ` +
		`WHERE vial_id = ?`

	// run query
	XOLog(sqlstr, vialID)
	q, err := db.Query(sqlstr, vialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialName{}
	for q.Next() {
		vn := VialName{
			_exists: true,
		}

		// scan
		err = q.Scan(&vn.ID, &vn.VialID, &vn.Name, &vn.UpdatedBy, &vn.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &vn)
	}

	return res, nil
}

// VialNameByID retrieves a row from 'AllergyNew.vial_names' as a VialName.
//
// Generated from index 'vial_names_id_pkey'.
func VialNameByID(db XODB, id uint) (*VialName, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, name, updated_by, updated ` +
		`FROM AllergyNew.vial_names ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	vn := VialName{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vn.ID, &vn.VialID, &vn.Name, &vn.UpdatedBy, &vn.Updated)
	if err != nil {
		return nil, err
	}

	return &vn, nil
}
