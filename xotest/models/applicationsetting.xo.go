// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// ApplicationSetting represents a row from 'AllergyNew.application_settings'.
type ApplicationSetting struct {
	ID      uint           `json:"id"`      // id
	Version sql.NullString `json:"version"` // version

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ApplicationSetting exists in the database.
func (as *ApplicationSetting) Exists() bool {
	return as._exists
}

// Deleted provides information if the ApplicationSetting has been deleted from the database.
func (as *ApplicationSetting) Deleted() bool {
	return as._deleted
}

// Insert inserts the ApplicationSetting to the database.
func (as *ApplicationSetting) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if as._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.application_settings (` +
		`version` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, as.Version)
	res, err := db.Exec(sqlstr, as.Version)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	as.ID = uint(id)
	as._exists = true

	return nil
}

// Update updates the ApplicationSetting in the database.
func (as *ApplicationSetting) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !as._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if as._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.application_settings SET ` +
		`version = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, as.Version, as.ID)
	_, err = db.Exec(sqlstr, as.Version, as.ID)
	return err
}

// Save saves the ApplicationSetting to the database.
func (as *ApplicationSetting) Save(db XODB) error {
	if as.Exists() {
		return as.Update(db)
	}

	return as.Insert(db)
}

// Delete deletes the ApplicationSetting from the database.
func (as *ApplicationSetting) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !as._exists {
		return nil
	}

	// if deleted, bail
	if as._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.application_settings WHERE id = ?`

	// run query
	XOLog(sqlstr, as.ID)
	_, err = db.Exec(sqlstr, as.ID)
	if err != nil {
		return err
	}

	// set deleted
	as._deleted = true

	return nil
}

// ApplicationSettingByID retrieves a row from 'AllergyNew.application_settings' as a ApplicationSetting.
//
// Generated from index 'application_settings_id_pkey'.
func ApplicationSettingByID(db XODB, id uint) (*ApplicationSetting, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, version ` +
		`FROM AllergyNew.application_settings ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	as := ApplicationSetting{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&as.ID, &as.Version)
	if err != nil {
		return nil, err
	}

	return &as, nil
}
