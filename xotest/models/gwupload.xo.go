// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// GwUpload represents a row from 'AllergyNew.gw_uploads'.
type GwUpload struct {
	ID               uint           `json:"id"`                // id
	PracticeID       sql.NullInt64  `json:"practice_id"`       // practice_id
	UserID           sql.NullInt64  `json:"user_id"`           // user_id
	UploadDate       mysql.NullTime `json:"upload_date"`       // upload_date
	PrimeSuiteID     sql.NullInt64  `json:"prime_suite_id"`    // prime_suite_id
	DocumentTypeID   sql.NullInt64  `json:"document_type_id"`  // document_type_id
	DocumentFilename sql.NullString `json:"document_filename"` // document_filename
	Details          sql.NullString `json:"details"`           // details
	UpdatedBy        sql.NullInt64  `json:"updated_by"`        // updated_by
	Updated          time.Time      `json:"updated"`           // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GwUpload exists in the database.
func (gu *GwUpload) Exists() bool {
	return gu._exists
}

// Deleted provides information if the GwUpload has been deleted from the database.
func (gu *GwUpload) Deleted() bool {
	return gu._deleted
}

// Insert inserts the GwUpload to the database.
func (gu *GwUpload) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.gw_uploads (` +
		`practice_id, user_id, upload_date, prime_suite_id, document_type_id, document_filename, details, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gu.PracticeID, gu.UserID, gu.UploadDate, gu.PrimeSuiteID, gu.DocumentTypeID, gu.DocumentFilename, gu.Details, gu.UpdatedBy, gu.Updated)
	res, err := db.Exec(sqlstr, gu.PracticeID, gu.UserID, gu.UploadDate, gu.PrimeSuiteID, gu.DocumentTypeID, gu.DocumentFilename, gu.Details, gu.UpdatedBy, gu.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gu.ID = uint(id)
	gu._exists = true

	return nil
}

// Update updates the GwUpload in the database.
func (gu *GwUpload) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.gw_uploads SET ` +
		`practice_id = ?, user_id = ?, upload_date = ?, prime_suite_id = ?, document_type_id = ?, document_filename = ?, details = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, gu.PracticeID, gu.UserID, gu.UploadDate, gu.PrimeSuiteID, gu.DocumentTypeID, gu.DocumentFilename, gu.Details, gu.UpdatedBy, gu.Updated, gu.ID)
	_, err = db.Exec(sqlstr, gu.PracticeID, gu.UserID, gu.UploadDate, gu.PrimeSuiteID, gu.DocumentTypeID, gu.DocumentFilename, gu.Details, gu.UpdatedBy, gu.Updated, gu.ID)
	return err
}

// Save saves the GwUpload to the database.
func (gu *GwUpload) Save(db XODB) error {
	if gu.Exists() {
		return gu.Update(db)
	}

	return gu.Insert(db)
}

// Delete deletes the GwUpload from the database.
func (gu *GwUpload) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gu._exists {
		return nil
	}

	// if deleted, bail
	if gu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.gw_uploads WHERE id = ?`

	// run query
	XOLog(sqlstr, gu.ID)
	_, err = db.Exec(sqlstr, gu.ID)
	if err != nil {
		return err
	}

	// set deleted
	gu._deleted = true

	return nil
}

// Practice returns the Practice associated with the GwUpload's PracticeID (practice_id).
//
// Generated from foreign key 'gw_uploads_practice'.
func (gu *GwUpload) Practice(db XODB) (*Practice, error) {
	return PracticeByID(db, uint(gu.PracticeID.Int64))
}

// UserByUpdatedBy returns the User associated with the GwUpload's UpdatedBy (updated_by).
//
// Generated from foreign key 'gw_uploads_updated'.
func (gu *GwUpload) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByID(db, uint(gu.UpdatedBy.Int64))
}

// UserByUserID returns the User associated with the GwUpload's UserID (user_id).
//
// Generated from foreign key 'gw_uploads_user'.
func (gu *GwUpload) UserByUserID(db XODB) (*User, error) {
	return UserByID(db, uint(gu.UserID.Int64))
}

// GwUploadsByPracticeID retrieves a row from 'AllergyNew.gw_uploads' as a GwUpload.
//
// Generated from index 'Practices'.
func GwUploadsByPracticeID(db XODB, practiceID sql.NullInt64) ([]*GwUpload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, user_id, upload_date, prime_suite_id, document_type_id, document_filename, details, updated_by, updated ` +
		`FROM AllergyNew.gw_uploads ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GwUpload{}
	for q.Next() {
		gu := GwUpload{
			_exists: true,
		}

		// scan
		err = q.Scan(&gu.ID, &gu.PracticeID, &gu.UserID, &gu.UploadDate, &gu.PrimeSuiteID, &gu.DocumentTypeID, &gu.DocumentFilename, &gu.Details, &gu.UpdatedBy, &gu.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &gu)
	}

	return res, nil
}

// GwUploadsByUserID retrieves a row from 'AllergyNew.gw_uploads' as a GwUpload.
//
// Generated from index 'Users'.
func GwUploadsByUserID(db XODB, userID sql.NullInt64) ([]*GwUpload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, user_id, upload_date, prime_suite_id, document_type_id, document_filename, details, updated_by, updated ` +
		`FROM AllergyNew.gw_uploads ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GwUpload{}
	for q.Next() {
		gu := GwUpload{
			_exists: true,
		}

		// scan
		err = q.Scan(&gu.ID, &gu.PracticeID, &gu.UserID, &gu.UploadDate, &gu.PrimeSuiteID, &gu.DocumentTypeID, &gu.DocumentFilename, &gu.Details, &gu.UpdatedBy, &gu.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &gu)
	}

	return res, nil
}

// GwUploadByID retrieves a row from 'AllergyNew.gw_uploads' as a GwUpload.
//
// Generated from index 'gw_uploads_id_pkey'.
func GwUploadByID(db XODB, id uint) (*GwUpload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, user_id, upload_date, prime_suite_id, document_type_id, document_filename, details, updated_by, updated ` +
		`FROM AllergyNew.gw_uploads ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	gu := GwUpload{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&gu.ID, &gu.PracticeID, &gu.UserID, &gu.UploadDate, &gu.PrimeSuiteID, &gu.DocumentTypeID, &gu.DocumentFilename, &gu.Details, &gu.UpdatedBy, &gu.Updated)
	if err != nil {
		return nil, err
	}

	return &gu, nil
}

// GwUploadsByUpdatedBy retrieves a row from 'AllergyNew.gw_uploads' as a GwUpload.
//
// Generated from index 'gw_uploads_updated'.
func GwUploadsByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*GwUpload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, user_id, upload_date, prime_suite_id, document_type_id, document_filename, details, updated_by, updated ` +
		`FROM AllergyNew.gw_uploads ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*GwUpload{}
	for q.Next() {
		gu := GwUpload{
			_exists: true,
		}

		// scan
		err = q.Scan(&gu.ID, &gu.PracticeID, &gu.UserID, &gu.UploadDate, &gu.PrimeSuiteID, &gu.DocumentTypeID, &gu.DocumentFilename, &gu.Details, &gu.UpdatedBy, &gu.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &gu)
	}

	return res, nil
}
