// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// MixAntigen represents a row from 'AllergyNew.mix_antigens'.
type MixAntigen struct {
	ID         uint          `json:"id"`          // id
	PracticeID sql.NullInt64 `json:"practice_id"` // practice_id
	LocationID sql.NullInt64 `json:"location_id"` // location_id
	MixID      sql.NullInt64 `json:"mix_id"`      // mix_id
	AntigenID  sql.NullInt64 `json:"antigen_id"`  // antigen_id
	UpdatedBy  sql.NullInt64 `json:"updated_by"`  // updated_by
	Updated    time.Time     `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MixAntigen exists in the database.
func (ma *MixAntigen) Exists() bool {
	return ma._exists
}

// Deleted provides information if the MixAntigen has been deleted from the database.
func (ma *MixAntigen) Deleted() bool {
	return ma._deleted
}

// Insert inserts the MixAntigen to the database.
func (ma *MixAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ma._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.mix_antigens (` +
		`practice_id, location_id, mix_id, antigen_id, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ma.PracticeID, ma.LocationID, ma.MixID, ma.AntigenID, ma.UpdatedBy, ma.Updated)
	res, err := db.Exec(sqlstr, ma.PracticeID, ma.LocationID, ma.MixID, ma.AntigenID, ma.UpdatedBy, ma.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ma.ID = uint(id)
	ma._exists = true

	return nil
}

// Update updates the MixAntigen in the database.
func (ma *MixAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ma._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ma._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.mix_antigens SET ` +
		`practice_id = ?, location_id = ?, mix_id = ?, antigen_id = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ma.PracticeID, ma.LocationID, ma.MixID, ma.AntigenID, ma.UpdatedBy, ma.Updated, ma.ID)
	_, err = db.Exec(sqlstr, ma.PracticeID, ma.LocationID, ma.MixID, ma.AntigenID, ma.UpdatedBy, ma.Updated, ma.ID)
	return err
}

// Save saves the MixAntigen to the database.
func (ma *MixAntigen) Save(db XODB) error {
	if ma.Exists() {
		return ma.Update(db)
	}

	return ma.Insert(db)
}

// Delete deletes the MixAntigen from the database.
func (ma *MixAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ma._exists {
		return nil
	}

	// if deleted, bail
	if ma._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.mix_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, ma.ID)
	_, err = db.Exec(sqlstr, ma.ID)
	if err != nil {
		return err
	}

	// set deleted
	ma._deleted = true

	return nil
}

// MixAntigensByAntigenID retrieves a row from 'AllergyNew.mix_antigens' as a MixAntigen.
//
// Generated from index 'Antigens'.
func MixAntigensByAntigenID(db XODB, antigenID sql.NullInt64) ([]*MixAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, mix_id, antigen_id, updated_by, updated ` +
		`FROM AllergyNew.mix_antigens ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MixAntigen{}
	for q.Next() {
		ma := MixAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ma.ID, &ma.PracticeID, &ma.LocationID, &ma.MixID, &ma.AntigenID, &ma.UpdatedBy, &ma.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ma)
	}

	return res, nil
}

// MixAntigensByLocationID retrieves a row from 'AllergyNew.mix_antigens' as a MixAntigen.
//
// Generated from index 'Locations'.
func MixAntigensByLocationID(db XODB, locationID sql.NullInt64) ([]*MixAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, mix_id, antigen_id, updated_by, updated ` +
		`FROM AllergyNew.mix_antigens ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MixAntigen{}
	for q.Next() {
		ma := MixAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ma.ID, &ma.PracticeID, &ma.LocationID, &ma.MixID, &ma.AntigenID, &ma.UpdatedBy, &ma.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ma)
	}

	return res, nil
}

// MixAntigensByMixID retrieves a row from 'AllergyNew.mix_antigens' as a MixAntigen.
//
// Generated from index 'Mixes'.
func MixAntigensByMixID(db XODB, mixID sql.NullInt64) ([]*MixAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, mix_id, antigen_id, updated_by, updated ` +
		`FROM AllergyNew.mix_antigens ` +
		`WHERE mix_id = ?`

	// run query
	XOLog(sqlstr, mixID)
	q, err := db.Query(sqlstr, mixID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MixAntigen{}
	for q.Next() {
		ma := MixAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ma.ID, &ma.PracticeID, &ma.LocationID, &ma.MixID, &ma.AntigenID, &ma.UpdatedBy, &ma.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ma)
	}

	return res, nil
}

// MixAntigensByPracticeID retrieves a row from 'AllergyNew.mix_antigens' as a MixAntigen.
//
// Generated from index 'Practices'.
func MixAntigensByPracticeID(db XODB, practiceID sql.NullInt64) ([]*MixAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, mix_id, antigen_id, updated_by, updated ` +
		`FROM AllergyNew.mix_antigens ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MixAntigen{}
	for q.Next() {
		ma := MixAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&ma.ID, &ma.PracticeID, &ma.LocationID, &ma.MixID, &ma.AntigenID, &ma.UpdatedBy, &ma.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &ma)
	}

	return res, nil
}

// MixAntigenByID retrieves a row from 'AllergyNew.mix_antigens' as a MixAntigen.
//
// Generated from index 'mix_antigens_id_pkey'.
func MixAntigenByID(db XODB, id uint) (*MixAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, location_id, mix_id, antigen_id, updated_by, updated ` +
		`FROM AllergyNew.mix_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ma := MixAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ma.ID, &ma.PracticeID, &ma.LocationID, &ma.MixID, &ma.AntigenID, &ma.UpdatedBy, &ma.Updated)
	if err != nil {
		return nil, err
	}

	return &ma, nil
}
