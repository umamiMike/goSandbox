// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// ApplicationLog represents a row from 'AllergyNew.application_log'.
type ApplicationLog struct {
	ID           uint           `json:"id"`           // id
	Timestamp    time.Time      `json:"timestamp"`    // timestamp
	Message      sql.NullString `json:"message"`      // message
	Priority     sql.NullInt64  `json:"priority"`     // priority
	Priorityname sql.NullString `json:"priorityName"` // priorityName

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ApplicationLog exists in the database.
func (al *ApplicationLog) Exists() bool {
	return al._exists
}

// Deleted provides information if the ApplicationLog has been deleted from the database.
func (al *ApplicationLog) Deleted() bool {
	return al._deleted
}

// Insert inserts the ApplicationLog to the database.
func (al *ApplicationLog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if al._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.application_log (` +
		`timestamp, message, priority, priorityName` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, al.Timestamp, al.Message, al.Priority, al.Priorityname)
	res, err := db.Exec(sqlstr, al.Timestamp, al.Message, al.Priority, al.Priorityname)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	al.ID = uint(id)
	al._exists = true

	return nil
}

// Update updates the ApplicationLog in the database.
func (al *ApplicationLog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !al._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if al._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.application_log SET ` +
		`timestamp = ?, message = ?, priority = ?, priorityName = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, al.Timestamp, al.Message, al.Priority, al.Priorityname, al.ID)
	_, err = db.Exec(sqlstr, al.Timestamp, al.Message, al.Priority, al.Priorityname, al.ID)
	return err
}

// Save saves the ApplicationLog to the database.
func (al *ApplicationLog) Save(db XODB) error {
	if al.Exists() {
		return al.Update(db)
	}

	return al.Insert(db)
}

// Delete deletes the ApplicationLog from the database.
func (al *ApplicationLog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !al._exists {
		return nil
	}

	// if deleted, bail
	if al._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.application_log WHERE id = ?`

	// run query
	XOLog(sqlstr, al.ID)
	_, err = db.Exec(sqlstr, al.ID)
	if err != nil {
		return err
	}

	// set deleted
	al._deleted = true

	return nil
}

// ApplicationLogByID retrieves a row from 'AllergyNew.application_log' as a ApplicationLog.
//
// Generated from index 'application_log_id_pkey'.
func ApplicationLogByID(db XODB, id uint) (*ApplicationLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, timestamp, message, priority, priorityName ` +
		`FROM AllergyNew.application_log ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	al := ApplicationLog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&al.ID, &al.Timestamp, &al.Message, &al.Priority, &al.Priorityname)
	if err != nil {
		return nil, err
	}

	return &al, nil
}
