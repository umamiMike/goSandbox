// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// VialAntigen represents a row from 'AllergyNew.vial_antigens'.
type VialAntigen struct {
	ID                 uint           `json:"id"`                   // id
	VialID             sql.NullInt64  `json:"vial_id"`              // vial_id
	AntigenID          sql.NullInt64  `json:"antigen_id"`           // antigen_id
	ProcessedAntigenID sql.NullInt64  `json:"processed_antigen_id"` // processed_antigen_id
	PatientID          sql.NullInt64  `json:"patient_id"`           // patient_id
	RequestID          sql.NullInt64  `json:"request_id"`           // request_id
	Title              sql.NullString `json:"title"`                // title
	Strength           sql.NullInt64  `json:"strength"`             // strength
	Volume             float32        `json:"volume"`               // volume
	Enabled            int8           `json:"enabled"`              // enabled
	UpdatedBy          sql.NullInt64  `json:"updated_by"`           // updated_by
	Updated            time.Time      `json:"updated"`              // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VialAntigen exists in the database.
func (va *VialAntigen) Exists() bool {
	return va._exists
}

// Deleted provides information if the VialAntigen has been deleted from the database.
func (va *VialAntigen) Deleted() bool {
	return va._deleted
}

// Insert inserts the VialAntigen to the database.
func (va *VialAntigen) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if va._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.vial_antigens (` +
		`vial_id, antigen_id, processed_antigen_id, patient_id, request_id, title, strength, volume, enabled, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, va.VialID, va.AntigenID, va.ProcessedAntigenID, va.PatientID, va.RequestID, va.Title, va.Strength, va.Volume, va.Enabled, va.UpdatedBy, va.Updated)
	res, err := db.Exec(sqlstr, va.VialID, va.AntigenID, va.ProcessedAntigenID, va.PatientID, va.RequestID, va.Title, va.Strength, va.Volume, va.Enabled, va.UpdatedBy, va.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	va.ID = uint(id)
	va._exists = true

	return nil
}

// Update updates the VialAntigen in the database.
func (va *VialAntigen) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !va._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if va._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.vial_antigens SET ` +
		`vial_id = ?, antigen_id = ?, processed_antigen_id = ?, patient_id = ?, request_id = ?, title = ?, strength = ?, volume = ?, enabled = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, va.VialID, va.AntigenID, va.ProcessedAntigenID, va.PatientID, va.RequestID, va.Title, va.Strength, va.Volume, va.Enabled, va.UpdatedBy, va.Updated, va.ID)
	_, err = db.Exec(sqlstr, va.VialID, va.AntigenID, va.ProcessedAntigenID, va.PatientID, va.RequestID, va.Title, va.Strength, va.Volume, va.Enabled, va.UpdatedBy, va.Updated, va.ID)
	return err
}

// Save saves the VialAntigen to the database.
func (va *VialAntigen) Save(db XODB) error {
	if va.Exists() {
		return va.Update(db)
	}

	return va.Insert(db)
}

// Delete deletes the VialAntigen from the database.
func (va *VialAntigen) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !va._exists {
		return nil
	}

	// if deleted, bail
	if va._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.vial_antigens WHERE id = ?`

	// run query
	XOLog(sqlstr, va.ID)
	_, err = db.Exec(sqlstr, va.ID)
	if err != nil {
		return err
	}

	// set deleted
	va._deleted = true

	return nil
}

// Antigen returns the Antigen associated with the VialAntigen's AntigenID (antigen_id).
//
// Generated from foreign key 'vial_antigens_antigens'.
func (va *VialAntigen) Antigen(db XODB) (*Antigen, error) {
	return AntigenByID(db, uint(va.AntigenID.Int64))
}

// Patient returns the Patient associated with the VialAntigen's PatientID (patient_id).
//
// Generated from foreign key 'vial_antigens_patients'.
func (va *VialAntigen) Patient(db XODB) (*Patient, error) {
	return PatientByID(db, uint(va.PatientID.Int64))
}

// ProcessedAntigen returns the ProcessedAntigen associated with the VialAntigen's ProcessedAntigenID (processed_antigen_id).
//
// Generated from foreign key 'vial_antigens_processed_antigens'.
func (va *VialAntigen) ProcessedAntigen(db XODB) (*ProcessedAntigen, error) {
	return ProcessedAntigenByID(db, uint(va.ProcessedAntigenID.Int64))
}

// User returns the User associated with the VialAntigen's UpdatedBy (updated_by).
//
// Generated from foreign key 'vial_antigens_updated'.
func (va *VialAntigen) User(db XODB) (*User, error) {
	return UserByID(db, uint(va.UpdatedBy.Int64))
}

// Vial returns the Vial associated with the VialAntigen's VialID (vial_id).
//
// Generated from foreign key 'vial_antigens_vials'.
func (va *VialAntigen) Vial(db XODB) (*Vial, error) {
	return VialByID(db, uint(va.VialID.Int64))
}

// VialAntigensByAntigenID retrieves a row from 'AllergyNew.vial_antigens' as a VialAntigen.
//
// Generated from index 'Antigens'.
func VialAntigensByAntigenID(db XODB, antigenID sql.NullInt64) ([]*VialAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, antigen_id, processed_antigen_id, patient_id, request_id, title, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_antigens ` +
		`WHERE antigen_id = ?`

	// run query
	XOLog(sqlstr, antigenID)
	q, err := db.Query(sqlstr, antigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialAntigen{}
	for q.Next() {
		va := VialAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&va.ID, &va.VialID, &va.AntigenID, &va.ProcessedAntigenID, &va.PatientID, &va.RequestID, &va.Title, &va.Strength, &va.Volume, &va.Enabled, &va.UpdatedBy, &va.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &va)
	}

	return res, nil
}

// VialAntigensByPatientID retrieves a row from 'AllergyNew.vial_antigens' as a VialAntigen.
//
// Generated from index 'Patients'.
func VialAntigensByPatientID(db XODB, patientID sql.NullInt64) ([]*VialAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, antigen_id, processed_antigen_id, patient_id, request_id, title, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_antigens ` +
		`WHERE patient_id = ?`

	// run query
	XOLog(sqlstr, patientID)
	q, err := db.Query(sqlstr, patientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialAntigen{}
	for q.Next() {
		va := VialAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&va.ID, &va.VialID, &va.AntigenID, &va.ProcessedAntigenID, &va.PatientID, &va.RequestID, &va.Title, &va.Strength, &va.Volume, &va.Enabled, &va.UpdatedBy, &va.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &va)
	}

	return res, nil
}

// VialAntigensByProcessedAntigenID retrieves a row from 'AllergyNew.vial_antigens' as a VialAntigen.
//
// Generated from index 'Processed_Antigens'.
func VialAntigensByProcessedAntigenID(db XODB, processedAntigenID sql.NullInt64) ([]*VialAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, antigen_id, processed_antigen_id, patient_id, request_id, title, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_antigens ` +
		`WHERE processed_antigen_id = ?`

	// run query
	XOLog(sqlstr, processedAntigenID)
	q, err := db.Query(sqlstr, processedAntigenID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialAntigen{}
	for q.Next() {
		va := VialAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&va.ID, &va.VialID, &va.AntigenID, &va.ProcessedAntigenID, &va.PatientID, &va.RequestID, &va.Title, &va.Strength, &va.Volume, &va.Enabled, &va.UpdatedBy, &va.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &va)
	}

	return res, nil
}

// VialAntigensByVialID retrieves a row from 'AllergyNew.vial_antigens' as a VialAntigen.
//
// Generated from index 'Vials'.
func VialAntigensByVialID(db XODB, vialID sql.NullInt64) ([]*VialAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, antigen_id, processed_antigen_id, patient_id, request_id, title, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_antigens ` +
		`WHERE vial_id = ?`

	// run query
	XOLog(sqlstr, vialID)
	q, err := db.Query(sqlstr, vialID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialAntigen{}
	for q.Next() {
		va := VialAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&va.ID, &va.VialID, &va.AntigenID, &va.ProcessedAntigenID, &va.PatientID, &va.RequestID, &va.Title, &va.Strength, &va.Volume, &va.Enabled, &va.UpdatedBy, &va.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &va)
	}

	return res, nil
}

// VialAntigensByRequestID retrieves a row from 'AllergyNew.vial_antigens' as a VialAntigen.
//
// Generated from index 'vial_antigen_requests'.
func VialAntigensByRequestID(db XODB, requestID sql.NullInt64) ([]*VialAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, antigen_id, processed_antigen_id, patient_id, request_id, title, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_antigens ` +
		`WHERE request_id = ?`

	// run query
	XOLog(sqlstr, requestID)
	q, err := db.Query(sqlstr, requestID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialAntigen{}
	for q.Next() {
		va := VialAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&va.ID, &va.VialID, &va.AntigenID, &va.ProcessedAntigenID, &va.PatientID, &va.RequestID, &va.Title, &va.Strength, &va.Volume, &va.Enabled, &va.UpdatedBy, &va.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &va)
	}

	return res, nil
}

// VialAntigenByID retrieves a row from 'AllergyNew.vial_antigens' as a VialAntigen.
//
// Generated from index 'vial_antigens_id_pkey'.
func VialAntigenByID(db XODB, id uint) (*VialAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, antigen_id, processed_antigen_id, patient_id, request_id, title, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_antigens ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	va := VialAntigen{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&va.ID, &va.VialID, &va.AntigenID, &va.ProcessedAntigenID, &va.PatientID, &va.RequestID, &va.Title, &va.Strength, &va.Volume, &va.Enabled, &va.UpdatedBy, &va.Updated)
	if err != nil {
		return nil, err
	}

	return &va, nil
}

// VialAntigensByUpdatedBy retrieves a row from 'AllergyNew.vial_antigens' as a VialAntigen.
//
// Generated from index 'vial_antigens_updated'.
func VialAntigensByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*VialAntigen, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vial_id, antigen_id, processed_antigen_id, patient_id, request_id, title, strength, volume, enabled, updated_by, updated ` +
		`FROM AllergyNew.vial_antigens ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VialAntigen{}
	for q.Next() {
		va := VialAntigen{
			_exists: true,
		}

		// scan
		err = q.Scan(&va.ID, &va.VialID, &va.AntigenID, &va.ProcessedAntigenID, &va.PatientID, &va.RequestID, &va.Title, &va.Strength, &va.Volume, &va.Enabled, &va.UpdatedBy, &va.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &va)
	}

	return res, nil
}
