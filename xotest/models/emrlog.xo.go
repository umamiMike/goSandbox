// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// EmrLog represents a row from 'AllergyNew.emr_logs'.
type EmrLog struct {
	ID         uint           `json:"id"`          // id
	PracticeID uint           `json:"practice_id"` // practice_id
	EmrID      uint           `json:"emr_id"`      // emr_id
	Date       time.Time      `json:"date"`        // date
	URL        string         `json:"url"`         // url
	Request    sql.NullString `json:"request"`     // request
	Response   sql.NullString `json:"response"`    // response
	UpdatedBy  sql.NullInt64  `json:"updated_by"`  // updated_by
	Updated    time.Time      `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EmrLog exists in the database.
func (el *EmrLog) Exists() bool {
	return el._exists
}

// Deleted provides information if the EmrLog has been deleted from the database.
func (el *EmrLog) Deleted() bool {
	return el._deleted
}

// Insert inserts the EmrLog to the database.
func (el *EmrLog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if el._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO AllergyNew.emr_logs (` +
		`practice_id, emr_id, date, url, request, response, updated_by, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, el.PracticeID, el.EmrID, el.Date, el.URL, el.Request, el.Response, el.UpdatedBy, el.Updated)
	res, err := db.Exec(sqlstr, el.PracticeID, el.EmrID, el.Date, el.URL, el.Request, el.Response, el.UpdatedBy, el.Updated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	el.ID = uint(id)
	el._exists = true

	return nil
}

// Update updates the EmrLog in the database.
func (el *EmrLog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !el._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if el._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.emr_logs SET ` +
		`practice_id = ?, emr_id = ?, date = ?, url = ?, request = ?, response = ?, updated_by = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, el.PracticeID, el.EmrID, el.Date, el.URL, el.Request, el.Response, el.UpdatedBy, el.Updated, el.ID)
	_, err = db.Exec(sqlstr, el.PracticeID, el.EmrID, el.Date, el.URL, el.Request, el.Response, el.UpdatedBy, el.Updated, el.ID)
	return err
}

// Save saves the EmrLog to the database.
func (el *EmrLog) Save(db XODB) error {
	if el.Exists() {
		return el.Update(db)
	}

	return el.Insert(db)
}

// Delete deletes the EmrLog from the database.
func (el *EmrLog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !el._exists {
		return nil
	}

	// if deleted, bail
	if el._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.emr_logs WHERE id = ?`

	// run query
	XOLog(sqlstr, el.ID)
	_, err = db.Exec(sqlstr, el.ID)
	if err != nil {
		return err
	}

	// set deleted
	el._deleted = true

	return nil
}

// EmrLogsByDate retrieves a row from 'AllergyNew.emr_logs' as a EmrLog.
//
// Generated from index 'EMR_Log_Dates'.
func EmrLogsByDate(db XODB, date time.Time) ([]*EmrLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, emr_id, date, url, request, response, updated_by, updated ` +
		`FROM AllergyNew.emr_logs ` +
		`WHERE date = ?`

	// run query
	XOLog(sqlstr, date)
	q, err := db.Query(sqlstr, date)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EmrLog{}
	for q.Next() {
		el := EmrLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&el.ID, &el.PracticeID, &el.EmrID, &el.Date, &el.URL, &el.Request, &el.Response, &el.UpdatedBy, &el.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &el)
	}

	return res, nil
}

// EmrLogsByEmrID retrieves a row from 'AllergyNew.emr_logs' as a EmrLog.
//
// Generated from index 'EMR_Log_EMRs'.
func EmrLogsByEmrID(db XODB, emrID uint) ([]*EmrLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, emr_id, date, url, request, response, updated_by, updated ` +
		`FROM AllergyNew.emr_logs ` +
		`WHERE emr_id = ?`

	// run query
	XOLog(sqlstr, emrID)
	q, err := db.Query(sqlstr, emrID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EmrLog{}
	for q.Next() {
		el := EmrLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&el.ID, &el.PracticeID, &el.EmrID, &el.Date, &el.URL, &el.Request, &el.Response, &el.UpdatedBy, &el.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &el)
	}

	return res, nil
}

// EmrLogsByPracticeID retrieves a row from 'AllergyNew.emr_logs' as a EmrLog.
//
// Generated from index 'EMR_Log_Practices'.
func EmrLogsByPracticeID(db XODB, practiceID uint) ([]*EmrLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, emr_id, date, url, request, response, updated_by, updated ` +
		`FROM AllergyNew.emr_logs ` +
		`WHERE practice_id = ?`

	// run query
	XOLog(sqlstr, practiceID)
	q, err := db.Query(sqlstr, practiceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EmrLog{}
	for q.Next() {
		el := EmrLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&el.ID, &el.PracticeID, &el.EmrID, &el.Date, &el.URL, &el.Request, &el.Response, &el.UpdatedBy, &el.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &el)
	}

	return res, nil
}

// EmrLogsByURL retrieves a row from 'AllergyNew.emr_logs' as a EmrLog.
//
// Generated from index 'EMR_Log_URLs'.
func EmrLogsByURL(db XODB, url string) ([]*EmrLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, emr_id, date, url, request, response, updated_by, updated ` +
		`FROM AllergyNew.emr_logs ` +
		`WHERE url = ?`

	// run query
	XOLog(sqlstr, url)
	q, err := db.Query(sqlstr, url)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EmrLog{}
	for q.Next() {
		el := EmrLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&el.ID, &el.PracticeID, &el.EmrID, &el.Date, &el.URL, &el.Request, &el.Response, &el.UpdatedBy, &el.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &el)
	}

	return res, nil
}

// EmrLogByID retrieves a row from 'AllergyNew.emr_logs' as a EmrLog.
//
// Generated from index 'emr_logs_id_pkey'.
func EmrLogByID(db XODB, id uint) (*EmrLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, practice_id, emr_id, date, url, request, response, updated_by, updated ` +
		`FROM AllergyNew.emr_logs ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	el := EmrLog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&el.ID, &el.PracticeID, &el.EmrID, &el.Date, &el.URL, &el.Request, &el.Response, &el.UpdatedBy, &el.Updated)
	if err != nil {
		return nil, err
	}

	return &el, nil
}
