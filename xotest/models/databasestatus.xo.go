// Package models contains the types for schema 'AllergyNew'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// DatabaseStatus represents a row from 'AllergyNew.database_status'.
type DatabaseStatus struct {
	Key   string         `json:"key"`   // key
	Value sql.NullString `json:"value"` // value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DatabaseStatus exists in the database.
func (ds *DatabaseStatus) Exists() bool {
	return ds._exists
}

// Deleted provides information if the DatabaseStatus has been deleted from the database.
func (ds *DatabaseStatus) Deleted() bool {
	return ds._deleted
}

// Insert inserts the DatabaseStatus to the database.
func (ds *DatabaseStatus) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ds._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO AllergyNew.database_status (` +
		`key, value` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ds.Key, ds.Value)
	_, err = db.Exec(sqlstr, ds.Key, ds.Value)
	if err != nil {
		return err
	}

	// set existence
	ds._exists = true

	return nil
}

// Update updates the DatabaseStatus in the database.
func (ds *DatabaseStatus) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ds._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ds._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE AllergyNew.database_status SET ` +
		`value = ?` +
		` WHERE key = ?`

	// run query
	XOLog(sqlstr, ds.Value, ds.Key)
	_, err = db.Exec(sqlstr, ds.Value, ds.Key)
	return err
}

// Save saves the DatabaseStatus to the database.
func (ds *DatabaseStatus) Save(db XODB) error {
	if ds.Exists() {
		return ds.Update(db)
	}

	return ds.Insert(db)
}

// Delete deletes the DatabaseStatus from the database.
func (ds *DatabaseStatus) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ds._exists {
		return nil
	}

	// if deleted, bail
	if ds._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM AllergyNew.database_status WHERE key = ?`

	// run query
	XOLog(sqlstr, ds.Key)
	_, err = db.Exec(sqlstr, ds.Key)
	if err != nil {
		return err
	}

	// set deleted
	ds._deleted = true

	return nil
}

// DatabaseStatusByKey retrieves a row from 'AllergyNew.database_status' as a DatabaseStatus.
//
// Generated from index 'database_status_key_pkey'.
func DatabaseStatusByKey(db XODB, key string) (*DatabaseStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`key, value ` +
		`FROM AllergyNew.database_status ` +
		`WHERE key = ?`

	// run query
	XOLog(sqlstr, key)
	ds := DatabaseStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, key).Scan(&ds.Key, &ds.Value)
	if err != nil {
		return nil, err
	}

	return &ds, nil
}
